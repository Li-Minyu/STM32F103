
stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037fc  080076c8  080076c8  000176c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aec4  0800aec4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800aec4  0800aec4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aec4  0800aec4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800aecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d4  0800b0a0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800b0a0  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b2e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb6  00000000  00000000  00030d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00033d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8a  00000000  00000000  00034eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c545  00000000  00000000  00035c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160ab  00000000  00000000  00052187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f058  00000000  00000000  00068232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000590c  00000000  00000000  0010728c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0010cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080076b0 	.word	0x080076b0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080076b0 	.word	0x080076b0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0318 	add.w	r3, r7, #24
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b74:	4b43      	ldr	r3, [pc, #268]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a42      	ldr	r2, [pc, #264]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a3c      	ldr	r2, [pc, #240]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a30      	ldr	r2, [pc, #192]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a2a      	ldr	r2, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	213c      	movs	r1, #60	; 0x3c
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bf2:	f001 fb32 	bl	800225a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	4824      	ldr	r0, [pc, #144]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000bfc:	f001 fb2d 	bl	800225a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_BL_Pin;
 8000c00:	2324      	movs	r3, #36	; 0x24
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	4619      	mov	r1, r3
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000c18:	f001 f974 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8000c1c:	2318      	movs	r3, #24
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4815      	ldr	r0, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000c34:	f001 f966 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin|KEY4_Pin;
 8000c38:	231e      	movs	r3, #30
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000c4c:	f001 f95a 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c50:	2320      	movs	r3, #32
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000c68:	f001 f94c 	bl	8001f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2102      	movs	r1, #2
 8000c70:	200a      	movs	r0, #10
 8000c72:	f001 f910 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c76:	200a      	movs	r0, #10
 8000c78:	f001 f929 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40011800 	.word	0x40011800
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	10210000 	.word	0x10210000
 8000c94:	40011c00 	.word	0x40011c00

08000c98 <HAL_GPIO_EXTI_Callback>:
 *+----------------------+
 *|     GPIO KEY API     |
 *+----------------------+
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
    if (KEY1_Pin == GPIO_Pin) // 切换
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d11c      	bne.n	8000ce2 <HAL_GPIO_EXTI_Callback+0x4a>
    {
        HAL_Delay(10); // 消抖
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f000 fff9 	bl	8001ca0 <HAL_Delay>
        while (!KEY1); // 按键不松手，则停在这里
 8000cae:	bf00      	nop
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	482f      	ldr	r0, [pc, #188]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000cb4:	f001 faba 	bl	800222c <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f8      	beq.n	8000cb0 <HAL_GPIO_EXTI_Callback+0x18>
        state++;  // 初始时state=0
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000cc8:	701a      	strb	r2, [r3, #0]
        if (state > 3)
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d902      	bls.n	8000cd8 <HAL_GPIO_EXTI_Callback+0x40>
        {
            state = 0;//越界清零
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
        }
        LED1(ON);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4826      	ldr	r0, [pc, #152]	; (8000d78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000cde:	f001 fabc 	bl	800225a <HAL_GPIO_WritePin>
    }
	if (KEY2_Pin == GPIO_Pin) // 等待切换功能或确认
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d112      	bne.n	8000d0e <HAL_GPIO_EXTI_Callback+0x76>
	{
		HAL_Delay(10); // 消抖
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f000 ffd9 	bl	8001ca0 <HAL_Delay>
		while (!KEY2); // 按键不松手，则停在这里
 8000cee:	bf00      	nop
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	481f      	ldr	r0, [pc, #124]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000cf4:	f001 fa9a 	bl	800222c <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f8      	beq.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x58>
//		KEY2_PRES ^=1; //异或：0^1=1,1^1=0
		KEY2_PRES =1;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
		LED1(ON);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2120      	movs	r1, #32
 8000d08:	481b      	ldr	r0, [pc, #108]	; (8000d78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d0a:	f001 faa6 	bl	800225a <HAL_GPIO_WritePin>
	}
    if (KEY3_Pin == GPIO_Pin) // 状态机+一键多义
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d112      	bne.n	8000d3a <HAL_GPIO_EXTI_Callback+0xa2>
    {
        HAL_Delay(10); // 消抖
 8000d14:	200a      	movs	r0, #10
 8000d16:	f000 ffc3 	bl	8001ca0 <HAL_Delay>
        while (!KEY3); // 按键不松手，则停在这里
 8000d1a:	bf00      	nop
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d20:	f001 fa84 	bl	800222c <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f8      	beq.n	8000d1c <HAL_GPIO_EXTI_Callback+0x84>
        KEY3_PRES = 1;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
        LED1(OFF);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2120      	movs	r1, #32
 8000d34:	4810      	ldr	r0, [pc, #64]	; (8000d78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d36:	f001 fa90 	bl	800225a <HAL_GPIO_WritePin>
    }
    if (KEY4_Pin == GPIO_Pin) // 状态机+一键多义
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	2b10      	cmp	r3, #16
 8000d3e:	d112      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0xce>
    {
        HAL_Delay(10); // 消抖
 8000d40:	200a      	movs	r0, #10
 8000d42:	f000 ffad 	bl	8001ca0 <HAL_Delay>
        while (!KEY4); // 按键不松手，则停在这里
 8000d46:	bf00      	nop
 8000d48:	2110      	movs	r1, #16
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000d4c:	f001 fa6e 	bl	800222c <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f8      	beq.n	8000d48 <HAL_GPIO_EXTI_Callback+0xb0>
        KEY4_PRES = 1;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_GPIO_EXTI_Callback+0xec>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
        LED1(OFF);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2120      	movs	r1, #32
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d62:	f001 fa7a 	bl	800225a <HAL_GPIO_WritePin>
    }
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40011c00 	.word	0x40011c00
 8000d74:	200001f0 	.word	0x200001f0
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	200001f1 	.word	0x200001f1
 8000d80:	200001f2 	.word	0x200001f2
 8000d84:	200001f3 	.word	0x200001f3

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b093      	sub	sp, #76	; 0x4c
 8000d8c:	af04      	add	r7, sp, #16
//	unsigned char last_index = 14;
//	char set_run1 = 0; // 按键0run状态标识符
//	char set_run2 = 0; // 按键1run状态标识符
//	unsigned char init_time[6] = { 24, 2, 19, 18, 03, 20 };

	unsigned char time_data[3]={18,30,10};
 8000d8e:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <main+0x134>)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	4611      	mov	r1, r2
 8000d98:	8019      	strh	r1, [r3, #0]
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	0c12      	lsrs	r2, r2, #16
 8000d9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da0:	f000 ff1c 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da4:	f000 f898 	bl	8000ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f7ff feda 	bl	8000b60 <MX_GPIO_Init>
  MX_RTC_Init();
 8000dac:	f000 f8f8 	bl	8000fa0 <MX_RTC_Init>
  MX_SPI1_Init();
 8000db0:	f000 f95c 	bl	800106c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000db4:	f000 faf4 	bl	80013a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000db8:	f000 fbb0 	bl	800151c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	/* LCD initialization */
	LCD_Init();
 8000dbc:	f000 fe3e 	bl	8001a3c <LCD_Init>
	LCD_Fill(0, 0, LCD_W, LCD_H, BLACK);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	23f0      	movs	r3, #240	; 0xf0
 8000dc6:	22f0      	movs	r2, #240	; 0xf0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 fc53 	bl	8001676 <LCD_Fill>
	/* RTC peripheral */
	RTC_TimeTypeDef rtcTime;
	RTC_DateTypeDef rtcDate;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4839      	ldr	r0, [pc, #228]	; (8000ec0 <main+0x138>)
 8000dda:	f002 f93d 	bl	8003058 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4836      	ldr	r0, [pc, #216]	; (8000ec0 <main+0x138>)
 8000de6:	f002 fac5 	bl	8003374 <HAL_RTC_GetDate>

	LED1(ON);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2120      	movs	r1, #32
 8000dee:	4835      	ldr	r0, [pc, #212]	; (8000ec4 <main+0x13c>)
 8000df0:	f001 fa33 	bl	800225a <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000df4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000df8:	f000 ff52 	bl	8001ca0 <HAL_Delay>
	LED1(OFF);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2120      	movs	r1, #32
 8000e00:	4830      	ldr	r0, [pc, #192]	; (8000ec4 <main+0x13c>)
 8000e02:	f001 fa2a 	bl	800225a <HAL_GPIO_WritePin>
	printf("Hello,My name is STM32F103ZET6!\r\n");
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <main+0x140>)
 8000e08:	f004 fb00 	bl	800540c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		/* Get the RTC current Time */
		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <main+0x138>)
 8000e16:	f002 f91f 	bl	8003058 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4827      	ldr	r0, [pc, #156]	; (8000ec0 <main+0x138>)
 8000e22:	f002 faa7 	bl	8003374 <HAL_RTC_GetDate>

		/* Display RTC current Time on LCD */
		sprintf(rtcTimeString, "%u-%02u-%02u %02u:%02u:%02u",
				2000 + rtcDate.Year, rtcDate.Month, rtcDate.Date, rtcTime.Hours,
 8000e26:	79fb      	ldrb	r3, [r7, #7]
		sprintf(rtcTimeString, "%u-%02u-%02u %02u:%02u:%02u",
 8000e28:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
				2000 + rtcDate.Year, rtcDate.Month, rtcDate.Date, rtcTime.Hours,
 8000e2c:	797b      	ldrb	r3, [r7, #5]
		sprintf(rtcTimeString, "%u-%02u-%02u %02u:%02u:%02u",
 8000e2e:	461e      	mov	r6, r3
				2000 + rtcDate.Year, rtcDate.Month, rtcDate.Date, rtcTime.Hours,
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	7a39      	ldrb	r1, [r7, #8]
				rtcTime.Minutes, rtcTime.Seconds);
 8000e34:	7a78      	ldrb	r0, [r7, #9]
		sprintf(rtcTimeString, "%u-%02u-%02u %02u:%02u:%02u",
 8000e36:	4604      	mov	r4, r0
				rtcTime.Minutes, rtcTime.Seconds);
 8000e38:	7ab8      	ldrb	r0, [r7, #10]
		sprintf(rtcTimeString, "%u-%02u-%02u %02u:%02u:%02u",
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000e40:	9503      	str	r5, [sp, #12]
 8000e42:	9402      	str	r4, [sp, #8]
 8000e44:	9101      	str	r1, [sp, #4]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	4633      	mov	r3, r6
 8000e4a:	4920      	ldr	r1, [pc, #128]	; (8000ecc <main+0x144>)
 8000e4c:	f004 fae6 	bl	800541c <siprintf>
		LCD_ShowString(5, 10, (uint8_t*) rtcTimeString, WHITE, BLACK, 24, 0);
 8000e50:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e54:	2300      	movs	r3, #0
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2318      	movs	r3, #24
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e64:	210a      	movs	r1, #10
 8000e66:	2005      	movs	r0, #5
 8000e68:	f000 fd32 	bl	80018d0 <LCD_ShowString>

		LCD_ShowString(5, 50, (uint8_t*) "Timing: ", WHITE, BLACK, 24, 0);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	2318      	movs	r3, #24
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	2300      	movs	r3, #0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <main+0x148>)
 8000e7e:	2132      	movs	r1, #50	; 0x32
 8000e80:	2005      	movs	r0, #5
 8000e82:	f000 fd25 	bl	80018d0 <LCD_ShowString>
		sprintf(TimingString,"%2d:%2d:%2d",time_data[0],time_data[1],time_data[2]);
 8000e86:	7b3b      	ldrb	r3, [r7, #12]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	7b7b      	ldrb	r3, [r7, #13]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	f107 0010 	add.w	r0, r7, #16
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	460b      	mov	r3, r1
 8000e98:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <main+0x14c>)
 8000e9a:	f004 fabf 	bl	800541c <siprintf>
		LCD_ShowString(110, 50, (uint8_t*) TimingString, WHITE, BLACK, 24, 0);
 8000e9e:	f107 0210 	add.w	r2, r7, #16
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	2318      	movs	r3, #24
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb2:	2132      	movs	r1, #50	; 0x32
 8000eb4:	206e      	movs	r0, #110	; 0x6e
 8000eb6:	f000 fd0b 	bl	80018d0 <LCD_ShowString>
		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000eba:	e7a7      	b.n	8000e0c <main+0x84>
 8000ebc:	08007720 	.word	0x08007720
 8000ec0:	200001f4 	.word	0x200001f4
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	080076c8 	.word	0x080076c8
 8000ecc:	080076ec 	.word	0x080076ec
 8000ed0:	08007708 	.word	0x08007708
 8000ed4:	08007714 	.word	0x08007714

08000ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	; 0x58
 8000edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee2:	2228      	movs	r2, #40	; 0x28
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 fb90 	bl	800560c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f9cc 	bl	80022d4 <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f42:	f000 f828 	bl	8000f96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fc38 	bl	80027d8 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f6e:	f000 f812 	bl	8000f96 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f72:	2301      	movs	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fdb8 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f8a:	f000 f804 	bl	8000f96 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	; 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9a:	b672      	cpsid	i
}
 8000f9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000f9e:	e7fe      	b.n	8000f9e <Error_Handler+0x8>

08000fa0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_RTC_Init+0x7c>)
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <MX_RTC_Init+0x80>)
 8000faa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_RTC_Init+0x7c>)
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_RTC_Init+0x7c>)
 8000fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fba:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fbc:	4817      	ldr	r0, [pc, #92]	; (800101c <MX_RTC_Init+0x7c>)
 8000fbe:	f001 ff27 	bl	8002e10 <HAL_RTC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_RTC_Init+0x2c>
  {
    Error_Handler();
 8000fc8:	f7ff ffe5 	bl	8000f96 <Error_Handler>
  // Uncomment this section to set Date and time
  RTC_DateTypeDef  rtcDate;
  RTC_TimeTypeDef  rtcTime;

  /* Set Date: Friday, December 1st 2023 */
  rtcDate.Year = 0x24;
 8000fcc:	2324      	movs	r3, #36	; 0x24
 8000fce:	71fb      	strb	r3, [r7, #7]
  rtcDate.Month = RTC_MONTH_FEBRUARY;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	717b      	strb	r3, [r7, #5]
  rtcDate.Date = 0x19;
 8000fd4:	2319      	movs	r3, #25
 8000fd6:	71bb      	strb	r3, [r7, #6]
  rtcDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	713b      	strb	r3, [r7, #4]

  if(HAL_RTC_SetDate(&hrtc,&rtcDate,RTC_FORMAT_BCD) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <MX_RTC_Init+0x7c>)
 8000fe4:	f002 f910 	bl	8003208 <HAL_RTC_SetDate>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_RTC_Init+0x52>
  {
    /* Initialization Error */
    Error_Handler();
 8000fee:	f7ff ffd2 	bl	8000f96 <Error_Handler>
  }

  /* Set Time: 15:50:00 */
  rtcTime.Hours = 0x10;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	703b      	strb	r3, [r7, #0]
  rtcTime.Minutes = 0x41;
 8000ff6:	2341      	movs	r3, #65	; 0x41
 8000ff8:	707b      	strb	r3, [r7, #1]
  rtcTime.Seconds = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	70bb      	strb	r3, [r7, #2]
//  rtcTime.TimeFormat = RTC_HOURFORMAT_24;
//  rtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
//  rtcTime.StoreOperation = RTC_STOREOPERATION_RESET;

  if(HAL_RTC_SetTime(&hrtc,&rtcTime,RTC_FORMAT_BCD) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2201      	movs	r2, #1
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_RTC_Init+0x7c>)
 8001006:	f001 ff8f 	bl	8002f28 <HAL_RTC_SetTime>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_RTC_Init+0x74>
  {
    /* Initialization Error */
    Error_Handler();
 8001010:	f7ff ffc1 	bl	8000f96 <Error_Handler>
  }
#endif

  /* USER CODE END RTC_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200001f4 	.word	0x200001f4
 8001020:	40002800 	.word	0x40002800

08001024 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_RTC_MspInit+0x3c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d110      	bne.n	8001058 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001036:	f001 f941 	bl	80022bc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_RTC_MspInit+0x40>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_RTC_MspInit+0x40>)
 8001040:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_RTC_MspInit+0x40>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_RTC_MspInit+0x44>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40002800 	.word	0x40002800
 8001064:	40021000 	.word	0x40021000
 8001068:	4242043c 	.word	0x4242043c

0800106c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <MX_SPI1_Init+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800107c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_SPI1_Init+0x64>)
 8001098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010a0:	2208      	movs	r2, #8
 80010a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010b8:	220a      	movs	r2, #10
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_SPI1_Init+0x64>)
 80010be:	f002 fc4f 	bl	8003960 <HAL_SPI_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c8:	f7ff ff65 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000208 	.word	0x20000208
 80010d4:	40013000 	.word	0x40013000

080010d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <HAL_SPI_MspInit+0x70>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d123      	bne.n	8001140 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_SPI_MspInit+0x74>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_SPI_MspInit+0x74>)
 80010fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_SPI_MspInit+0x74>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_SPI_MspInit+0x74>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_SPI_MspInit+0x74>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_SPI_MspInit+0x74>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8001128:	23a0      	movs	r3, #160	; 0xa0
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_SPI_MspInit+0x78>)
 800113c:	f000 fee2 	bl	8001f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40013000 	.word	0x40013000
 800114c:	40021000 	.word	0x40021000
 8001150:	40010800 	.word	0x40010800

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_MspInit+0x5c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6193      	str	r3, [r2, #24]
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_MspInit+0x5c>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_MspInit+0x60>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_MspInit+0x60>)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fe:	f000 fd33 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}

08001206 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY4_Pin);
 800120a:	2010      	movs	r0, #16
 800120c:	f001 f83e 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return 1;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <_kill>:

int _kill(int pid, int sig)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800122c:	f004 fa40 	bl	80056b0 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	2216      	movs	r2, #22
 8001234:	601a      	str	r2, [r3, #0]
  return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_exit>:

void _exit (int status)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800124a:	f04f 31ff 	mov.w	r1, #4294967295
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffe7 	bl	8001222 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001254:	e7fe      	b.n	8001254 <_exit+0x12>

08001256 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e00a      	b.n	800127e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001268:	f3af 8000 	nop.w
 800126c:	4601      	mov	r1, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	60ba      	str	r2, [r7, #8]
 8001274:	b2ca      	uxtb	r2, r1
 8001276:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	dbf0      	blt.n	8001268 <_read+0x12>
  }

  return len;
 8001286:	687b      	ldr	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e009      	b.n	80012b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f9ac 	bl	8001608 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dbf1      	blt.n	80012a2 <_write+0x12>
  }
  return len;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_close>:

int _close(int file)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <_isatty>:

int _isatty(int file)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f004 f9aa 	bl	80056b0 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20010000 	.word	0x20010000
 8001388:	00000400 	.word	0x00000400
 800138c:	20000260 	.word	0x20000260
 8001390:	20000448 	.word	0x20000448

08001394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_TIM3_Init+0xac>)
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <MX_TIM3_Init+0xb0>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 300-1;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_TIM3_Init+0xac>)
 80013ca:	f240 122b 	movw	r2, #299	; 0x12b
 80013ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_TIM3_Init+0xac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_TIM3_Init+0xac>)
 80013d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_TIM3_Init+0xac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_TIM3_Init+0xac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_TIM3_Init+0xac>)
 80013ec:	f002 fd26 	bl	8003e3c <HAL_TIM_PWM_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80013f6:	f7ff fdce 	bl	8000f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4619      	mov	r1, r3
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <MX_TIM3_Init+0xac>)
 800140a:	f003 f84f 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001414:	f7ff fdbf 	bl	8000f96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2204      	movs	r2, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM3_Init+0xac>)
 8001430:	f002 fd54 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800143a:	f7ff fdac 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM3_Init+0xac>)
 8001440:	f000 f826 	bl	8001490 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000264 	.word	0x20000264
 8001450:	40000400 	.word	0x40000400

08001454 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_TIM_PWM_MspInit+0x34>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10b      	bne.n	800147e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_TIM_PWM_MspInit+0x38>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_TIM_PWM_MspInit+0x38>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_TIM_PWM_MspInit+0x38>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	40000400 	.word	0x40000400
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_TIM_MspPostInit+0x7c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d129      	bne.n	8001504 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_TIM_MspPostInit+0x80>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a16      	ldr	r2, [pc, #88]	; (8001510 <HAL_TIM_MspPostInit+0x80>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_TIM_MspPostInit+0x80>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <HAL_TIM_MspPostInit+0x84>)
 80014dc:	f000 fd12 	bl	8001f04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_TIM_MspPostInit+0x88>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_TIM_MspPostInit+0x88>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40000400 	.word	0x40000400
 8001510:	40021000 	.word	0x40021000
 8001514:	40011000 	.word	0x40011000
 8001518:	40010000 	.word	0x40010000

0800151c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART1_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001554:	f003 f816 	bl	8004584 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f7ff fd1a 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200002ac 	.word	0x200002ac
 800156c:	40013800 	.word	0x40013800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <HAL_UART_MspInit+0x8c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d131      	bne.n	80015f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_UART_MspInit+0x90>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <HAL_UART_MspInit+0x90>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x90>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0x90>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_UART_MspInit+0x90>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_UART_MspInit+0x90>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <HAL_UART_MspInit+0x94>)
 80015d6:	f000 fc95 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_UART_MspInit+0x94>)
 80015f0:	f000 fc88 	bl	8001f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40013800 	.word	0x40013800
 8001600:	40021000 	.word	0x40021000
 8001604:	40010800 	.word	0x40010800

08001608 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8001610:	1d39      	adds	r1, r7, #4
 8001612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001616:	2201      	movs	r2, #1
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <__io_putchar+0x20>)
 800161a:	f003 f803 	bl	8004624 <HAL_UART_Transmit>
    return ch;
 800161e:	687b      	ldr	r3, [r7, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200002ac 	.word	0x200002ac

0800162c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800162c:	f7ff feb2 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001632:	490c      	ldr	r1, [pc, #48]	; (8001664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001634:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001648:	4c09      	ldr	r4, [pc, #36]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001656:	f004 f831 	bl	80056bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165a:	f7ff fb95 	bl	8000d88 <main>
  bx lr
 800165e:	4770      	bx	lr
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001668:	0800aecc 	.word	0x0800aecc
  ldr r2, =_sbss
 800166c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001670:	20000444 	.word	0x20000444

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>

08001676 <LCD_Fill>:
                xend,yend   终止坐标
								color       要填充的颜色
      返回值：  无
******************************************************************************/
void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
{          
 8001676:	b590      	push	{r4, r7, lr}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	4604      	mov	r4, r0
 800167e:	4608      	mov	r0, r1
 8001680:	4611      	mov	r1, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4623      	mov	r3, r4
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	4603      	mov	r3, r0
 800168a:	80bb      	strh	r3, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	803b      	strh	r3, [r7, #0]
	u16 i,j; 
	LCD_Address_Set(xsta,ysta,xend-1,yend-1);//设置显示范围
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	883b      	ldrh	r3, [r7, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	88b9      	ldrh	r1, [r7, #4]
 80016a2:	88f8      	ldrh	r0, [r7, #6]
 80016a4:	f000 f99e 	bl	80019e4 <LCD_Address_Set>
	for(i=ysta;i<yend;i++)
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	81fb      	strh	r3, [r7, #14]
 80016ac:	e010      	b.n	80016d0 <LCD_Fill+0x5a>
	{													   	 	
		for(j=xsta;j<xend;j++)
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	81bb      	strh	r3, [r7, #12]
 80016b2:	e006      	b.n	80016c2 <LCD_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80016b4:	8c3b      	ldrh	r3, [r7, #32]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f965 	bl	8001986 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80016bc:	89bb      	ldrh	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	81bb      	strh	r3, [r7, #12]
 80016c2:	89ba      	ldrh	r2, [r7, #12]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3f4      	bcc.n	80016b4 <LCD_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80016ca:	89fb      	ldrh	r3, [r7, #14]
 80016cc:	3301      	adds	r3, #1
 80016ce:	81fb      	strh	r3, [r7, #14]
 80016d0:	89fa      	ldrh	r2, [r7, #14]
 80016d2:	883b      	ldrh	r3, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3ea      	bcc.n	80016ae <LCD_Fill+0x38>
		}
	} 					  	    
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}

080016e2 <LCD_DrawPoint>:
      入口数据：x,y 画点坐标
                color 点的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y,u16 color)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	80fb      	strh	r3, [r7, #6]
 80016ec:	460b      	mov	r3, r1
 80016ee:	80bb      	strh	r3, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	807b      	strh	r3, [r7, #2]
	LCD_Address_Set(x,y,x,y);//设置光标位置 
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	88b9      	ldrh	r1, [r7, #4]
 80016fa:	88f8      	ldrh	r0, [r7, #6]
 80016fc:	f000 f972 	bl	80019e4 <LCD_Address_Set>
	LCD_WR_DATA(color);
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f93f 	bl	8001986 <LCD_WR_DATA>
} 
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <LCD_ShowChar>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	4604      	mov	r4, r0
 8001718:	4608      	mov	r0, r1
 800171a:	4611      	mov	r1, r2
 800171c:	461a      	mov	r2, r3
 800171e:	4623      	mov	r3, r4
 8001720:	80fb      	strh	r3, [r7, #6]
 8001722:	4603      	mov	r3, r0
 8001724:	80bb      	strh	r3, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	70fb      	strb	r3, [r7, #3]
 800172a:	4613      	mov	r3, r2
 800172c:	803b      	strh	r3, [r7, #0]
	u8 temp,sizex,t,m=0;
 800172e:	2300      	movs	r3, #0
 8001730:	757b      	strb	r3, [r7, #21]
	u16 i,TypefaceNum;//一个字符所占字节大小
	u16 x0=x;
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001736:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001760:	b292      	uxth	r2, r2
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //得到偏移后的值
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	3b20      	subs	r3, #32
 800176c:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //设置光标位置 
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	4413      	add	r3, r2
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29c      	uxth	r4, r3
 800177c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001780:	b29a      	uxth	r2, r3
 8001782:	88bb      	ldrh	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	b29b      	uxth	r3, r3
 800178c:	88b9      	ldrh	r1, [r7, #4]
 800178e:	88f8      	ldrh	r0, [r7, #6]
 8001790:	4622      	mov	r2, r4
 8001792:	f000 f927 	bl	80019e4 <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 8001796:	2300      	movs	r3, #0
 8001798:	827b      	strh	r3, [r7, #18]
 800179a:	e086      	b.n	80018aa <LCD_ShowChar+0x19a>
	{ 
		if(sizey==12)temp=ascii_1206[num][i];		       //调用6x12字体
 800179c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d10b      	bne.n	80017bc <LCD_ShowChar+0xac>
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	8a79      	ldrh	r1, [r7, #18]
 80017a8:	4845      	ldr	r0, [pc, #276]	; (80018c0 <LCD_ShowChar+0x1b0>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4403      	add	r3, r0
 80017b4:	440b      	add	r3, r1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	75fb      	strb	r3, [r7, #23]
 80017ba:	e028      	b.n	800180e <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[num][i];		 //调用8x16字体
 80017bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017c0:	2b10      	cmp	r3, #16
 80017c2:	d108      	bne.n	80017d6 <LCD_ShowChar+0xc6>
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	8a7b      	ldrh	r3, [r7, #18]
 80017c8:	493e      	ldr	r1, [pc, #248]	; (80018c4 <LCD_ShowChar+0x1b4>)
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	440a      	add	r2, r1
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	75fb      	strb	r3, [r7, #23]
 80017d4:	e01b      	b.n	800180e <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[num][i];		 //调用12x24字体
 80017d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017da:	2b18      	cmp	r3, #24
 80017dc:	d10b      	bne.n	80017f6 <LCD_ShowChar+0xe6>
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	8a79      	ldrh	r1, [r7, #18]
 80017e2:	4839      	ldr	r0, [pc, #228]	; (80018c8 <LCD_ShowChar+0x1b8>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4403      	add	r3, r0
 80017ee:	440b      	add	r3, r1
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	75fb      	strb	r3, [r7, #23]
 80017f4:	e00b      	b.n	800180e <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[num][i];		 //调用16x32字体
 80017f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d15b      	bne.n	80018b6 <LCD_ShowChar+0x1a6>
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	8a7b      	ldrh	r3, [r7, #18]
 8001802:	4932      	ldr	r1, [pc, #200]	; (80018cc <LCD_ShowChar+0x1bc>)
 8001804:	0192      	lsls	r2, r2, #6
 8001806:	440a      	add	r2, r1
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800180e:	2300      	movs	r3, #0
 8001810:	75bb      	strb	r3, [r7, #22]
 8001812:	e044      	b.n	800189e <LCD_ShowChar+0x18e>
		{
			if(!mode)//非叠加模式
 8001814:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001818:	2b00      	cmp	r3, #0
 800181a:	d120      	bne.n	800185e <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800181c:	7dfa      	ldrb	r2, [r7, #23]
 800181e:	7dbb      	ldrb	r3, [r7, #22]
 8001820:	fa42 f303 	asr.w	r3, r2, r3
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <LCD_ShowChar+0x126>
 800182c:	883b      	ldrh	r3, [r7, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f8a9 	bl	8001986 <LCD_WR_DATA>
 8001834:	e003      	b.n	800183e <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8001836:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f8a4 	bl	8001986 <LCD_WR_DATA>
				m++;
 800183e:	7d7b      	ldrb	r3, [r7, #21]
 8001840:	3301      	adds	r3, #1
 8001842:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001844:	7d7b      	ldrb	r3, [r7, #21]
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	fbb3 f1f2 	udiv	r1, r3, r2
 800184c:	fb01 f202 	mul.w	r2, r1, r2
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11f      	bne.n	8001898 <LCD_ShowChar+0x188>
				{
					m=0;
 8001858:	2300      	movs	r3, #0
 800185a:	757b      	strb	r3, [r7, #21]
					break;
 800185c:	e022      	b.n	80018a4 <LCD_ShowChar+0x194>
				}
			}
			else//叠加模式
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//画一个点
 800185e:	7dfa      	ldrb	r2, [r7, #23]
 8001860:	7dbb      	ldrb	r3, [r7, #22]
 8001862:	fa42 f303 	asr.w	r3, r2, r3
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <LCD_ShowChar+0x16a>
 800186e:	883a      	ldrh	r2, [r7, #0]
 8001870:	88b9      	ldrh	r1, [r7, #4]
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff34 	bl	80016e2 <LCD_DrawPoint>
				x++;
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	3301      	adds	r3, #1
 800187e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	8a3b      	ldrh	r3, [r7, #16]
 8001884:	1ad2      	subs	r2, r2, r3
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	429a      	cmp	r2, r3
 800188a:	d105      	bne.n	8001898 <LCD_ShowChar+0x188>
				{
					x=x0;
 800188c:	8a3b      	ldrh	r3, [r7, #16]
 800188e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	80bb      	strh	r3, [r7, #4]
					break;
 8001896:	e005      	b.n	80018a4 <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 8001898:	7dbb      	ldrb	r3, [r7, #22]
 800189a:	3301      	adds	r3, #1
 800189c:	75bb      	strb	r3, [r7, #22]
 800189e:	7dbb      	ldrb	r3, [r7, #22]
 80018a0:	2b07      	cmp	r3, #7
 80018a2:	d9b7      	bls.n	8001814 <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 80018a4:	8a7b      	ldrh	r3, [r7, #18]
 80018a6:	3301      	adds	r3, #1
 80018a8:	827b      	strh	r3, [r7, #18]
 80018aa:	8a7a      	ldrh	r2, [r7, #18]
 80018ac:	89bb      	ldrh	r3, [r7, #12]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	f4ff af74 	bcc.w	800179c <LCD_ShowChar+0x8c>
 80018b4:	e000      	b.n	80018b8 <LCD_ShowChar+0x1a8>
		else return;
 80018b6:	bf00      	nop
				}
			}
		}
	}   	 	  
}
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	0800773c 	.word	0x0800773c
 80018c4:	08007bb0 	.word	0x08007bb0
 80018c8:	080081a0 	.word	0x080081a0
 80018cc:	08009370 	.word	0x08009370

080018d0 <LCD_ShowString>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)
{         
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af04      	add	r7, sp, #16
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	81fb      	strh	r3, [r7, #14]
 80018de:	460b      	mov	r3, r1
 80018e0:	81bb      	strh	r3, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 80018e6:	e01a      	b.n	800191e <LCD_ShowString+0x4e>
	{       
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	88fc      	ldrh	r4, [r7, #6]
 80018ee:	89b9      	ldrh	r1, [r7, #12]
 80018f0:	89f8      	ldrh	r0, [r7, #14]
 80018f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	8c3b      	ldrh	r3, [r7, #32]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4623      	mov	r3, r4
 8001904:	f7ff ff04 	bl	8001710 <LCD_ShowChar>
		x+=sizey/2;
 8001908:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b29a      	uxth	r2, r3
 8001912:	89fb      	ldrh	r3, [r7, #14]
 8001914:	4413      	add	r3, r2
 8001916:	81fb      	strh	r3, [r7, #14]
		p++;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	3301      	adds	r3, #1
 800191c:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1e0      	bne.n	80018e8 <LCD_ShowString+0x18>
	}  
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}

08001930 <LCD_Writ_Bus>:
      入口数据：dat  要写入的串行数据
      返回值：  无
******************************************************************************/
#ifdef __HW_SPI
void LCD_Writ_Bus(u8 dat) 
{	
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	LCD_CS_Clr();
 800193a:	2200      	movs	r2, #0
 800193c:	2110      	movs	r1, #16
 800193e:	4809      	ldr	r0, [pc, #36]	; (8001964 <LCD_Writ_Bus+0x34>)
 8001940:	f000 fc8b 	bl	800225a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&usr_lcd_spi,&dat,1,1000);
 8001944:	1df9      	adds	r1, r7, #7
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	2201      	movs	r2, #1
 800194c:	4806      	ldr	r0, [pc, #24]	; (8001968 <LCD_Writ_Bus+0x38>)
 800194e:	f002 f88b 	bl	8003a68 <HAL_SPI_Transmit>
	LCD_CS_Set();
 8001952:	2201      	movs	r2, #1
 8001954:	2110      	movs	r1, #16
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <LCD_Writ_Bus+0x34>)
 8001958:	f000 fc7f 	bl	800225a <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40011800 	.word	0x40011800
 8001968:	20000208 	.word	0x20000208

0800196c <LCD_WR_DATA8>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA8(u8 dat)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
	LCD_Writ_Bus(dat);
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ffd9 	bl	8001930 <LCD_Writ_Bus>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <LCD_WR_DATA>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA(u16 dat)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	80fb      	strh	r3, [r7, #6]
	LCD_Writ_Bus(dat>>8);
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ffc9 	bl	8001930 <LCD_Writ_Bus>
	LCD_Writ_Bus(dat);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffc4 	bl	8001930 <LCD_Writ_Bus>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <LCD_WR_REG>:
      函数说明：LCD写入命令
      入口数据：dat 写入的命令
      返回值：  无
******************************************************************************/
void LCD_WR_REG(u8 dat)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Clr();//写命令
 80019ba:	2200      	movs	r2, #0
 80019bc:	2108      	movs	r1, #8
 80019be:	4808      	ldr	r0, [pc, #32]	; (80019e0 <LCD_WR_REG+0x30>)
 80019c0:	f000 fc4b 	bl	800225a <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ffb2 	bl	8001930 <LCD_Writ_Bus>
	LCD_DC_Set();//写数据
 80019cc:	2201      	movs	r2, #1
 80019ce:	2108      	movs	r1, #8
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <LCD_WR_REG+0x30>)
 80019d2:	f000 fc42 	bl	800225a <HAL_GPIO_WritePin>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40011800 	.word	0x40011800

080019e4 <LCD_Address_Set>:
      入口数据：x1,x2 设置列的起始和结束地址
                y1,y2 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
void LCD_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4604      	mov	r4, r0
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	80fb      	strh	r3, [r7, #6]
 80019f6:	4603      	mov	r3, r0
 80019f8:	80bb      	strh	r3, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	807b      	strh	r3, [r7, #2]
 80019fe:	4613      	mov	r3, r2
 8001a00:	803b      	strh	r3, [r7, #0]
	if(USE_HORIZONTAL==0)
	{
		LCD_WR_REG(0x2a);//列地址设置
 8001a02:	202a      	movs	r0, #42	; 0x2a
 8001a04:	f7ff ffd4 	bl	80019b0 <LCD_WR_REG>
		LCD_WR_DATA(x1);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ffbb 	bl	8001986 <LCD_WR_DATA>
		LCD_WR_DATA(x2);
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ffb7 	bl	8001986 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//行地址设置
 8001a18:	202b      	movs	r0, #43	; 0x2b
 8001a1a:	f7ff ffc9 	bl	80019b0 <LCD_WR_REG>
		LCD_WR_DATA(y1);
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ffb0 	bl	8001986 <LCD_WR_DATA>
		LCD_WR_DATA(y2);
 8001a26:	883b      	ldrh	r3, [r7, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ffac 	bl	8001986 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//储存器写
 8001a2e:	202c      	movs	r0, #44	; 0x2c
 8001a30:	f7ff ffbe 	bl	80019b0 <LCD_WR_REG>
		LCD_WR_REG(0x2b);//行地址设置
		LCD_WR_DATA(y1);
		LCD_WR_DATA(y2);
		LCD_WR_REG(0x2c);//储存器写
	}
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <LCD_Init>:
void LCD_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
//	LCD_GPIO_Init();//初始化GPIO
	
	LCD_RES_Clr();//复位
 8001a40:	2200      	movs	r2, #0
 8001a42:	2104      	movs	r1, #4
 8001a44:	4864      	ldr	r0, [pc, #400]	; (8001bd8 <LCD_Init+0x19c>)
 8001a46:	f000 fc08 	bl	800225a <HAL_GPIO_WritePin>
//	delay_ms(100);
	HAL_Delay(100);
 8001a4a:	2064      	movs	r0, #100	; 0x64
 8001a4c:	f000 f928 	bl	8001ca0 <HAL_Delay>
	LCD_RES_Set();
 8001a50:	2201      	movs	r2, #1
 8001a52:	2104      	movs	r1, #4
 8001a54:	4860      	ldr	r0, [pc, #384]	; (8001bd8 <LCD_Init+0x19c>)
 8001a56:	f000 fc00 	bl	800225a <HAL_GPIO_WritePin>
//	delay_ms(100);
	HAL_Delay(100);
 8001a5a:	2064      	movs	r0, #100	; 0x64
 8001a5c:	f000 f920 	bl	8001ca0 <HAL_Delay>
	
	LCD_BLK_Set();//打开背光
 8001a60:	2201      	movs	r2, #1
 8001a62:	2120      	movs	r1, #32
 8001a64:	485c      	ldr	r0, [pc, #368]	; (8001bd8 <LCD_Init+0x19c>)
 8001a66:	f000 fbf8 	bl	800225a <HAL_GPIO_WritePin>
//  delay_ms(100);
	HAL_Delay(100);
 8001a6a:	2064      	movs	r0, #100	; 0x64
 8001a6c:	f000 f918 	bl	8001ca0 <HAL_Delay>
	
	//************* Start Initial Sequence **********//
	LCD_WR_REG(0x11); //Sleep out 
 8001a70:	2011      	movs	r0, #17
 8001a72:	f7ff ff9d 	bl	80019b0 <LCD_WR_REG>
//	delay_ms(120);              //Delay 120ms
	HAL_Delay(120);
 8001a76:	2078      	movs	r0, #120	; 0x78
 8001a78:	f000 f912 	bl	8001ca0 <HAL_Delay>
	//************* Start Initial Sequence **********// 
	LCD_WR_REG(0x36);
 8001a7c:	2036      	movs	r0, #54	; 0x36
 8001a7e:	f7ff ff97 	bl	80019b0 <LCD_WR_REG>
	if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff ff72 	bl	800196c <LCD_WR_DATA8>
	else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0);
	else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70);
	else LCD_WR_DATA8(0xA0);

	LCD_WR_REG(0x3A);			
 8001a88:	203a      	movs	r0, #58	; 0x3a
 8001a8a:	f7ff ff91 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8001a8e:	2005      	movs	r0, #5
 8001a90:	f7ff ff6c 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xB2);			
 8001a94:	20b2      	movs	r0, #178	; 0xb2
 8001a96:	f7ff ff8b 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x0C);
 8001a9a:	200c      	movs	r0, #12
 8001a9c:	f7ff ff66 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0C); 
 8001aa0:	200c      	movs	r0, #12
 8001aa2:	f7ff ff63 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00); 
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff ff60 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x33); 
 8001aac:	2033      	movs	r0, #51	; 0x33
 8001aae:	f7ff ff5d 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x33); 			
 8001ab2:	2033      	movs	r0, #51	; 0x33
 8001ab4:	f7ff ff5a 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xB7);			
 8001ab8:	20b7      	movs	r0, #183	; 0xb7
 8001aba:	f7ff ff79 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x35);
 8001abe:	2035      	movs	r0, #53	; 0x35
 8001ac0:	f7ff ff54 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xBB);			
 8001ac4:	20bb      	movs	r0, #187	; 0xbb
 8001ac6:	f7ff ff73 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x32); //Vcom=1.35V
 8001aca:	2032      	movs	r0, #50	; 0x32
 8001acc:	f7ff ff4e 	bl	800196c <LCD_WR_DATA8>
					
	LCD_WR_REG(0xC2);
 8001ad0:	20c2      	movs	r0, #194	; 0xc2
 8001ad2:	f7ff ff6d 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x01);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff ff48 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xC3);			
 8001adc:	20c3      	movs	r0, #195	; 0xc3
 8001ade:	f7ff ff67 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x15); //GVDD=4.8V  颜色深度
 8001ae2:	2015      	movs	r0, #21
 8001ae4:	f7ff ff42 	bl	800196c <LCD_WR_DATA8>
				
	LCD_WR_REG(0xC4);			
 8001ae8:	20c4      	movs	r0, #196	; 0xc4
 8001aea:	f7ff ff61 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x20); //VDV, 0x20:0v
 8001aee:	2020      	movs	r0, #32
 8001af0:	f7ff ff3c 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xC6);			
 8001af4:	20c6      	movs	r0, #198	; 0xc6
 8001af6:	f7ff ff5b 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0x0F); //0x0F:60Hz        	
 8001afa:	200f      	movs	r0, #15
 8001afc:	f7ff ff36 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xD0);			
 8001b00:	20d0      	movs	r0, #208	; 0xd0
 8001b02:	f7ff ff55 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0xA4);
 8001b06:	20a4      	movs	r0, #164	; 0xa4
 8001b08:	f7ff ff30 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0xA1); 
 8001b0c:	20a1      	movs	r0, #161	; 0xa1
 8001b0e:	f7ff ff2d 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xE0);
 8001b12:	20e0      	movs	r0, #224	; 0xe0
 8001b14:	f7ff ff4c 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0xD0);   
 8001b18:	20d0      	movs	r0, #208	; 0xd0
 8001b1a:	f7ff ff27 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08);   
 8001b1e:	2008      	movs	r0, #8
 8001b20:	f7ff ff24 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0E);   
 8001b24:	200e      	movs	r0, #14
 8001b26:	f7ff ff21 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);   
 8001b2a:	2009      	movs	r0, #9
 8001b2c:	f7ff ff1e 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);   
 8001b30:	2009      	movs	r0, #9
 8001b32:	f7ff ff1b 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x05);   
 8001b36:	2005      	movs	r0, #5
 8001b38:	f7ff ff18 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x31);   
 8001b3c:	2031      	movs	r0, #49	; 0x31
 8001b3e:	f7ff ff15 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x33);   
 8001b42:	2033      	movs	r0, #51	; 0x33
 8001b44:	f7ff ff12 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x48);   
 8001b48:	2048      	movs	r0, #72	; 0x48
 8001b4a:	f7ff ff0f 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x17);   
 8001b4e:	2017      	movs	r0, #23
 8001b50:	f7ff ff0c 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x14);   
 8001b54:	2014      	movs	r0, #20
 8001b56:	f7ff ff09 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x15);   
 8001b5a:	2015      	movs	r0, #21
 8001b5c:	f7ff ff06 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x31);   
 8001b60:	2031      	movs	r0, #49	; 0x31
 8001b62:	f7ff ff03 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x34);   
 8001b66:	2034      	movs	r0, #52	; 0x34
 8001b68:	f7ff ff00 	bl	800196c <LCD_WR_DATA8>

	LCD_WR_REG(0xE1);     
 8001b6c:	20e1      	movs	r0, #225	; 0xe1
 8001b6e:	f7ff ff1f 	bl	80019b0 <LCD_WR_REG>
	LCD_WR_DATA8(0xD0);   
 8001b72:	20d0      	movs	r0, #208	; 0xd0
 8001b74:	f7ff fefa 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08);   
 8001b78:	2008      	movs	r0, #8
 8001b7a:	f7ff fef7 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0E);   
 8001b7e:	200e      	movs	r0, #14
 8001b80:	f7ff fef4 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);   
 8001b84:	2009      	movs	r0, #9
 8001b86:	f7ff fef1 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);   
 8001b8a:	2009      	movs	r0, #9
 8001b8c:	f7ff feee 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x15);   
 8001b90:	2015      	movs	r0, #21
 8001b92:	f7ff feeb 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x31);   
 8001b96:	2031      	movs	r0, #49	; 0x31
 8001b98:	f7ff fee8 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x33);   
 8001b9c:	2033      	movs	r0, #51	; 0x33
 8001b9e:	f7ff fee5 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x48);   
 8001ba2:	2048      	movs	r0, #72	; 0x48
 8001ba4:	f7ff fee2 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x17);   
 8001ba8:	2017      	movs	r0, #23
 8001baa:	f7ff fedf 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x14);   
 8001bae:	2014      	movs	r0, #20
 8001bb0:	f7ff fedc 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x15);   
 8001bb4:	2015      	movs	r0, #21
 8001bb6:	f7ff fed9 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x31);   
 8001bba:	2031      	movs	r0, #49	; 0x31
 8001bbc:	f7ff fed6 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_DATA8(0x34);
 8001bc0:	2034      	movs	r0, #52	; 0x34
 8001bc2:	f7ff fed3 	bl	800196c <LCD_WR_DATA8>
	LCD_WR_REG(0x21); 
 8001bc6:	2021      	movs	r0, #33	; 0x21
 8001bc8:	f7ff fef2 	bl	80019b0 <LCD_WR_REG>

	LCD_WR_REG(0x29);
 8001bcc:	2029      	movs	r0, #41	; 0x29
 8001bce:	f7ff feef 	bl	80019b0 <LCD_WR_REG>
} 
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40011800 	.word	0x40011800

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_Init+0x28>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 f947 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f808 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f7ff faac 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x54>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x58>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f95f 	bl	8001eea <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 f927 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x5c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x1c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_IncTick+0x20>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <HAL_IncTick+0x20>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	20000008 	.word	0x20000008
 8001c88:	200002f4 	.word	0x200002f4

08001c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_GetTick+0x10>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	200002f4 	.word	0x200002f4

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffe0 	bl	8001c8c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4906      	ldr	r1, [pc, #24]	; (8001d80 <__NVIC_EnableIRQ+0x34>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff90 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff2d 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff42 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff35 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e179      	b.n	800220c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8168 	bne.w	8002206 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a96      	ldr	r2, [pc, #600]	; (8002194 <HAL_GPIO_Init+0x290>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f40:	4a94      	ldr	r2, [pc, #592]	; (8002194 <HAL_GPIO_Init+0x290>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d875      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f46:	4a94      	ldr	r2, [pc, #592]	; (8002198 <HAL_GPIO_Init+0x294>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d058      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f4c:	4a92      	ldr	r2, [pc, #584]	; (8002198 <HAL_GPIO_Init+0x294>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d86f      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f52:	4a92      	ldr	r2, [pc, #584]	; (800219c <HAL_GPIO_Init+0x298>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d052      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f58:	4a90      	ldr	r2, [pc, #576]	; (800219c <HAL_GPIO_Init+0x298>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d869      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a90      	ldr	r2, [pc, #576]	; (80021a0 <HAL_GPIO_Init+0x29c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04c      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f64:	4a8e      	ldr	r2, [pc, #568]	; (80021a0 <HAL_GPIO_Init+0x29c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d863      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a8e      	ldr	r2, [pc, #568]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d046      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f70:	4a8c      	ldr	r2, [pc, #560]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d85d      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d82a      	bhi.n	8001fd0 <HAL_GPIO_Init+0xcc>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d859      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_GPIO_Init+0x80>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001feb 	.word	0x08001feb
 8001f90:	0800202d 	.word	0x0800202d
 8001f94:	08002033 	.word	0x08002033
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	08002033 	.word	0x08002033
 8001fa0:	08002033 	.word	0x08002033
 8001fa4:	08002033 	.word	0x08002033
 8001fa8:	08002033 	.word	0x08002033
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	08002033 	.word	0x08002033
 8001fb4:	08002033 	.word	0x08002033
 8001fb8:	08002033 	.word	0x08002033
 8001fbc:	08002033 	.word	0x08002033
 8001fc0:	08002033 	.word	0x08002033
 8001fc4:	08002033 	.word	0x08002033
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	4a75      	ldr	r2, [pc, #468]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fd6:	e02c      	b.n	8002032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e029      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e024      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e01f      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e01a      	b.n	8002034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002006:	2304      	movs	r3, #4
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e013      	b.n	8002034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	611a      	str	r2, [r3, #16]
          break;
 800201e:	e009      	b.n	8002034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	615a      	str	r2, [r3, #20]
          break;
 800202a:	e003      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x130>
          break;
 8002032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d801      	bhi.n	800203e <HAL_GPIO_Init+0x13a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_Init+0x13e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d802      	bhi.n	8002050 <HAL_GPIO_Init+0x14c>
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x152>
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3b08      	subs	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	210f      	movs	r1, #15
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80c1 	beq.w	8002206 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a48      	ldr	r2, [pc, #288]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209c:	4a44      	ldr	r2, [pc, #272]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3c      	ldr	r2, [pc, #240]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d01f      	beq.n	8002108 <HAL_GPIO_Init+0x204>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3b      	ldr	r2, [pc, #236]	; (80021b8 <HAL_GPIO_Init+0x2b4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d019      	beq.n	8002104 <HAL_GPIO_Init+0x200>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_GPIO_Init+0x1fc>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a39      	ldr	r2, [pc, #228]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00d      	beq.n	80020fc <HAL_GPIO_Init+0x1f8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a38      	ldr	r2, [pc, #224]	; (80021c4 <HAL_GPIO_Init+0x2c0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0x1f4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a37      	ldr	r2, [pc, #220]	; (80021c8 <HAL_GPIO_Init+0x2c4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_GPIO_Init+0x1f0>
 80020f0:	2305      	movs	r3, #5
 80020f2:	e00a      	b.n	800210a <HAL_GPIO_Init+0x206>
 80020f4:	2306      	movs	r3, #6
 80020f6:	e008      	b.n	800210a <HAL_GPIO_Init+0x206>
 80020f8:	2304      	movs	r3, #4
 80020fa:	e006      	b.n	800210a <HAL_GPIO_Init+0x206>
 80020fc:	2303      	movs	r3, #3
 80020fe:	e004      	b.n	800210a <HAL_GPIO_Init+0x206>
 8002100:	2302      	movs	r3, #2
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0x206>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_GPIO_Init+0x206>
 8002108:	2300      	movs	r3, #0
 800210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210c:	f002 0203 	and.w	r2, r2, #3
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	4093      	lsls	r3, r2
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800211a:	4925      	ldr	r1, [pc, #148]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4924      	ldr	r1, [pc, #144]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4920      	ldr	r1, [pc, #128]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 800214c:	4013      	ands	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	491a      	ldr	r1, [pc, #104]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	4916      	ldr	r1, [pc, #88]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 8002174:	4013      	ands	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d025      	beq.n	80021d0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4910      	ldr	r1, [pc, #64]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	e025      	b.n	80021de <HAL_GPIO_Init+0x2da>
 8002192:	bf00      	nop
 8002194:	10320000 	.word	0x10320000
 8002198:	10310000 	.word	0x10310000
 800219c:	10220000 	.word	0x10220000
 80021a0:	10210000 	.word	0x10210000
 80021a4:	10120000 	.word	0x10120000
 80021a8:	10110000 	.word	0x10110000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	40011000 	.word	0x40011000
 80021c0:	40011400 	.word	0x40011400
 80021c4:	40011800 	.word	0x40011800
 80021c8:	40011c00 	.word	0x40011c00
 80021cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4913      	ldr	r1, [pc, #76]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021da:	4013      	ands	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	490e      	ldr	r1, [pc, #56]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_GPIO_Init+0x324>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	43db      	mvns	r3, r3
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <HAL_GPIO_Init+0x324>)
 8002202:	4013      	ands	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3301      	adds	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	f47f ae7e 	bne.w	8001f18 <HAL_GPIO_Init+0x14>
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	372c      	adds	r7, #44	; 0x2c
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	e001      	b.n	800224e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	807b      	strh	r3, [r7, #2]
 8002266:	4613      	mov	r3, r2
 8002268:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226a:	787b      	ldrb	r3, [r7, #1]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002270:	887a      	ldrh	r2, [r7, #2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002276:	e003      	b.n	8002280 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	041a      	lsls	r2, r3, #16
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	611a      	str	r2, [r3, #16]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
	...

0800228c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fcf4 	bl	8000c98 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	420e0020 	.word	0x420e0020

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e272      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f4:	4b92      	ldr	r3, [pc, #584]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d00c      	beq.n	800231a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002300:	4b8f      	ldr	r3, [pc, #572]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x5e>
 800230c:	4b8c      	ldr	r3, [pc, #560]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d10b      	bne.n	8002332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	4b89      	ldr	r3, [pc, #548]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d06c      	beq.n	8002400 <HAL_RCC_OscConfig+0x12c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d168      	bne.n	8002400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e24c      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x76>
 800233c:	4b80      	ldr	r3, [pc, #512]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a7f      	ldr	r2, [pc, #508]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e02e      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x98>
 8002352:	4b7b      	ldr	r3, [pc, #492]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a7a      	ldr	r2, [pc, #488]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b78      	ldr	r3, [pc, #480]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a77      	ldr	r2, [pc, #476]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0xbc>
 8002376:	4b72      	ldr	r3, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a71      	ldr	r2, [pc, #452]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 8002390:	4b6b      	ldr	r3, [pc, #428]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a67      	ldr	r2, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fc6c 	bl	8001c8c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fc68 	bl	8001c8c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e200      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe4>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fc58 	bl	8001c8c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fc54 	bl	8001c8c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1ec      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x10c>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240e:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800241a:	4b49      	ldr	r3, [pc, #292]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x18c>
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x176>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1c0      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4939      	ldr	r1, [pc, #228]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e03a      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <HAL_RCC_OscConfig+0x270>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff fc0d 	bl	8001c8c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff fc09 	bl	8001c8c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1a1      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4927      	ldr	r1, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x270>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fbec 	bl	8001c8c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff fbe8 	bl	8001c8c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e180      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03a      	beq.n	8002558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d019      	beq.n	800251e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff fbcc 	bl	8001c8c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff fbc8 	bl	8001c8c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e160      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002516:	2001      	movs	r0, #1
 8002518:	f000 face 	bl	8002ab8 <RCC_Delay>
 800251c:	e01c      	b.n	8002558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff fbb2 	bl	8001c8c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252a:	e00f      	b.n	800254c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff fbae 	bl	8001c8c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d908      	bls.n	800254c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e146      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	42420000 	.word	0x42420000
 8002548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e9      	bne.n	800252c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80a6 	beq.w	80026b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10d      	bne.n	8002592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b85      	ldr	r3, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b82      	ldr	r3, [pc, #520]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b7f      	ldr	r3, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a7e      	ldr	r2, [pc, #504]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7ff fb6f 	bl	8001c8c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7ff fb6b 	bl	8001c8c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	; 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e103      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x312>
 80025d8:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	e02d      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x334>
 80025ee:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a69      	ldr	r2, [pc, #420]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	4b67      	ldr	r3, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4a66      	ldr	r2, [pc, #408]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	6213      	str	r3, [r2, #32]
 8002606:	e01c      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x356>
 8002610:	4b61      	ldr	r3, [pc, #388]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a60      	ldr	r2, [pc, #384]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e00b      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a5a      	ldr	r2, [pc, #360]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b58      	ldr	r3, [pc, #352]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a57      	ldr	r2, [pc, #348]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d015      	beq.n	8002676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7ff fb1f 	bl	8001c8c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff fb1b 	bl	8001c8c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0b1      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ee      	beq.n	8002652 <HAL_RCC_OscConfig+0x37e>
 8002674:	e014      	b.n	80026a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff fb09 	bl	8001c8c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff fb05 	bl	8001c8c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e09b      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	4b40      	ldr	r3, [pc, #256]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ee      	bne.n	800267e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8087 	beq.w	80027ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d061      	beq.n	800278c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d146      	bne.n	800275e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d0:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff fad9 	bl	8001c8c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7ff fad5 	bl	8001c8c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e06d      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d108      	bne.n	8002718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4921      	ldr	r1, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a19      	ldr	r1, [r3, #32]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	430b      	orrs	r3, r1
 800272a:	491b      	ldr	r1, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff faa9 	bl	8001c8c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff faa5 	bl	8001c8c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e03d      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x46a>
 800275c:	e035      	b.n	80027ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fa92 	bl	8001c8c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276c:	f7ff fa8e 	bl	8001c8c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e026      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x498>
 800278a:	e01e      	b.n	80027ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e019      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_OscConfig+0x500>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000

080027d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d0      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4965      	ldr	r1, [pc, #404]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002856:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d040      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e073      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4936      	ldr	r1, [pc, #216]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7ff f9e0 	bl	8001c8c <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7ff f9dc 	bl	8001c8c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e053      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d210      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f93e 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
 80029a0:	08007724 	.word	0x08007724
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x30>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x36>
 80029da:	e027      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80029de:	613b      	str	r3, [r7, #16]
      break;
 80029e0:	e027      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0c5b      	lsrs	r3, r3, #17
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	fb03 f202 	mul.w	r2, r3, r2
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e004      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	613b      	str	r3, [r7, #16]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a2e:	613b      	str	r3, [r7, #16]
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	693b      	ldr	r3, [r7, #16]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	0800ab30 	.word	0x0800ab30
 8002a4c:	0800ab40 	.word	0x0800ab40
 8002a50:	003d0900 	.word	0x003d0900

08002a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff2 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08007734 	.word	0x08007734

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffde 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0adb      	lsrs	r3, r3, #11
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08007734 	.word	0x08007734

08002ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <RCC_Delay+0x34>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <RCC_Delay+0x38>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0a5b      	lsrs	r3, r3, #9
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ad4:	bf00      	nop
  }
  while (Delay --);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1e5a      	subs	r2, r3, #1
 8002ada:	60fa      	str	r2, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f9      	bne.n	8002ad4 <RCC_Delay+0x1c>
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	20000000 	.word	0x20000000
 8002af0:	10624dd3 	.word	0x10624dd3

08002af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d07d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	61d3      	str	r3, [r2, #28]
 8002b2c:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d118      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b54:	f7ff f89a 	bl	8001c8c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7ff f896 	bl	8001c8c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e06d      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d027      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bae:	4a29      	ldr	r2, [pc, #164]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff f865 	bl	8001c8c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7ff f861 	bl	8001c8c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e036      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4917      	ldr	r1, [pc, #92]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	490b      	ldr	r1, [pc, #44]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4904      	ldr	r1, [pc, #16]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42420440 	.word	0x42420440

08002c60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	f200 80af 	bhi.w	8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002c86:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002d63 	.word	0x08002d63
 8002c90:	08002dc9 	.word	0x08002dc9
 8002c94:	08002de5 	.word	0x08002de5
 8002c98:	08002d53 	.word	0x08002d53
 8002c9c:	08002de5 	.word	0x08002de5
 8002ca0:	08002de5 	.word	0x08002de5
 8002ca4:	08002de5 	.word	0x08002de5
 8002ca8:	08002d5b 	.word	0x08002d5b
 8002cac:	08002de5 	.word	0x08002de5
 8002cb0:	08002de5 	.word	0x08002de5
 8002cb4:	08002de5 	.word	0x08002de5
 8002cb8:	08002de5 	.word	0x08002de5
 8002cbc:	08002de5 	.word	0x08002de5
 8002cc0:	08002de5 	.word	0x08002de5
 8002cc4:	08002de5 	.word	0x08002de5
 8002cc8:	08002ccd 	.word	0x08002ccd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8084 	beq.w	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	4a44      	ldr	r2, [pc, #272]	; (8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf8:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	0c5b      	lsrs	r3, r3, #17
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	4a3f      	ldr	r2, [pc, #252]	; (8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d12:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e004      	b.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4a38      	ldr	r2, [pc, #224]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d2e:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002d40:	e052      	b.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	61bb      	str	r3, [r7, #24]
      break;
 8002d50:	e04a      	b.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002d52:	f7ff fe2b 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002d56:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002d58:	e049      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002d5a:	f7ff fe27 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002d5e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002d60:	e045      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002d62:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d72:	d108      	bne.n	8002d86 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e01f      	b.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d90:	d109      	bne.n	8002da6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002d9e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e00f      	b.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db0:	d11c      	bne.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8002dbe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002dc2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002dc4:	e012      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002dc6:	e011      	b.n	8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002dc8:	f7ff fe62 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0b9b      	lsrs	r3, r3, #14
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	61bb      	str	r3, [r7, #24]
      break;
 8002de2:	e004      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8002de4:	bf00      	nop
 8002de6:	e002      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002dec:	bf00      	nop
    }
  }
  return (frequency);
 8002dee:	69bb      	ldr	r3, [r7, #24]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	0800ab44 	.word	0x0800ab44
 8002e00:	0800ab54 	.word	0x0800ab54
 8002e04:	007a1200 	.word	0x007a1200
 8002e08:	003d0900 	.word	0x003d0900
 8002e0c:	aaaaaaab 	.word	0xaaaaaaab

08002e10 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e07a      	b.n	8002f1c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	7c5b      	ldrb	r3, [r3, #17]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe f8f4 	bl	8001024 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 faea 	bl	800341c <HAL_RTC_WaitForSynchro>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e061      	b.n	8002f1c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fba3 	bl	80035a4 <RTC_EnterInitMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2204      	movs	r2, #4
 8002e68:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e056      	b.n	8002f1c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0207 	bic.w	r2, r2, #7
 8002e7c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <HAL_RTC_Init+0x114>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_RTC_Init+0x114>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RTC_Init+0x114>)
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4921      	ldr	r1, [pc, #132]	; (8002f24 <HAL_RTC_Init+0x114>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d003      	beq.n	8002eb6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e00e      	b.n	8002ed4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7ff fed2 	bl	8002c60 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ebc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e026      	b.n	8002f1c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	0c1a      	lsrs	r2, r3, #16
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f002 020f 	and.w	r2, r2, #15
 8002ee0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fb81 	bl	80035f4 <RTC_ExitInitMode>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00c      	b.n	8002f1c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40006c00 	.word	0x40006c00

08002f28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_RTC_SetTime+0x20>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e080      	b.n	800304e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	7c1b      	ldrb	r3, [r3, #16]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_RTC_SetTime+0x30>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e07a      	b.n	800304e <HAL_RTC_SetTime+0x126>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d113      	bne.n	8002f92 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f74:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	460b      	mov	r3, r1
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a5b      	subs	r3, r3, r1
 8002f84:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f86:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f8c:	4413      	add	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e01e      	b.n	8002fd0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fb71 	bl	800367e <RTC_Bcd2ToByte>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002fa4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fb66 	bl	800367e <RTC_Bcd2ToByte>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002fbe:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	789b      	ldrb	r3, [r3, #2]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fb5a 	bl	800367e <RTC_Bcd2ToByte>
 8002fca:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002fcc:	4423      	add	r3, r4
 8002fce:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fa7f 	bl	80034d6 <RTC_WriteTimeCounter>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e02f      	b.n	800304e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0205 	bic.w	r2, r2, #5
 8002ffc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fa90 	bl	8003524 <RTC_ReadAlarmCounter>
 8003004:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d018      	beq.n	8003040 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	429a      	cmp	r2, r3
 8003014:	d214      	bcs.n	8003040 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800301c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003020:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003022:	6939      	ldr	r1, [r7, #16]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fa96 	bl	8003556 <RTC_WriteAlarmCounter>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2204      	movs	r2, #4
 8003034:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e006      	b.n	800304e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
	...

08003058 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_RTC_GetTime+0x28>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b5      	b.n	80031f0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0ac      	b.n	80031f0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f9ed 	bl	8003476 <RTC_ReadTimeCounter>
 800309c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4a55      	ldr	r2, [pc, #340]	; (80031f8 <HAL_RTC_GetTime+0x1a0>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4b52      	ldr	r3, [pc, #328]	; (80031f8 <HAL_RTC_GetTime+0x1a0>)
 80030ae:	fba3 1302 	umull	r1, r3, r3, r2
 80030b2:	0adb      	lsrs	r3, r3, #11
 80030b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	4a4f      	ldr	r2, [pc, #316]	; (80031fc <HAL_RTC_GetTime+0x1a4>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4a4a      	ldr	r2, [pc, #296]	; (80031f8 <HAL_RTC_GetTime+0x1a0>)
 80030d0:	fba2 1203 	umull	r1, r2, r2, r3
 80030d4:	0ad2      	lsrs	r2, r2, #11
 80030d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80030da:	fb01 f202 	mul.w	r2, r1, r2
 80030de:	1a9a      	subs	r2, r3, r2
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RTC_GetTime+0x1a4>)
 80030e2:	fba3 1302 	umull	r1, r3, r3, r2
 80030e6:	0959      	lsrs	r1, r3, #5
 80030e8:	460b      	mov	r3, r1
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a5b      	subs	r3, r3, r1
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	1ad1      	subs	r1, r2, r3
 80030f2:	b2ca      	uxtb	r2, r1
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b17      	cmp	r3, #23
 80030fc:	d955      	bls.n	80031aa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a3f      	ldr	r2, [pc, #252]	; (8003200 <HAL_RTC_GetTime+0x1a8>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800310a:	6939      	ldr	r1, [r7, #16]
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RTC_GetTime+0x1a8>)
 800310e:	fba3 2301 	umull	r2, r3, r3, r1
 8003112:	091a      	lsrs	r2, r3, #4
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	1aca      	subs	r2, r1, r3
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f9fd 	bl	8003524 <RTC_ReadAlarmCounter>
 800312a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003132:	d008      	beq.n	8003146 <HAL_RTC_GetTime+0xee>
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d904      	bls.n	8003146 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e002      	b.n	800314c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <HAL_RTC_GetTime+0x1ac>)
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f9ba 	bl	80034d6 <RTC_WriteTimeCounter>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e041      	b.n	80031f0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d00c      	beq.n	800318e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4413      	add	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800317c:	69f9      	ldr	r1, [r7, #28]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f9e9 	bl	8003556 <RTC_WriteAlarmCounter>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e030      	b.n	80031f0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800318e:	69f9      	ldr	r1, [r7, #28]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f9e0 	bl	8003556 <RTC_WriteAlarmCounter>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e027      	b.n	80031f0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80031a0:	6979      	ldr	r1, [r7, #20]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fa88 	bl	80036b8 <RTC_DateUpdate>
 80031a8:	e003      	b.n	80031b2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01a      	beq.n	80031ee <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fa41 	bl	8003644 <RTC_ByteToBcd2>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa38 	bl	8003644 <RTC_ByteToBcd2>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	789b      	ldrb	r3, [r3, #2]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fa2f 	bl	8003644 <RTC_ByteToBcd2>
 80031e6:	4603      	mov	r3, r0
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	91a2b3c5 	.word	0x91a2b3c5
 80031fc:	88888889 	.word	0x88888889
 8003200:	aaaaaaab 	.word	0xaaaaaaab
 8003204:	00015180 	.word	0x00015180

08003208 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RTC_SetDate+0x24>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e097      	b.n	8003360 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	7c1b      	ldrb	r3, [r3, #16]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_RTC_SetDate+0x34>
 8003238:	2302      	movs	r3, #2
 800323a:	e091      	b.n	8003360 <HAL_RTC_SetDate+0x158>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2202      	movs	r2, #2
 8003246:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	78da      	ldrb	r2, [r3, #3]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	785a      	ldrb	r2, [r3, #1]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	789a      	ldrb	r2, [r3, #2]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	739a      	strb	r2, [r3, #14]
 8003266:	e01a      	b.n	800329e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fa06 	bl	800367e <RTC_Bcd2ToByte>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f9fd 	bl	800367e <RTC_Bcd2ToByte>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	789b      	ldrb	r3, [r3, #2]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f9f4 	bl	800367e <RTC_Bcd2ToByte>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	7bdb      	ldrb	r3, [r3, #15]
 80032a2:	4618      	mov	r0, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	7b59      	ldrb	r1, [r3, #13]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	7b9b      	ldrb	r3, [r3, #14]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f000 fadf 	bl	8003870 <RTC_WeekDayNum>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	7b1a      	ldrb	r2, [r3, #12]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f8d7 	bl	8003476 <RTC_ReadTimeCounter>
 80032c8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <HAL_RTC_SetDate+0x160>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0adb      	lsrs	r3, r3, #11
 80032d4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b18      	cmp	r3, #24
 80032da:	d93a      	bls.n	8003352 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <HAL_RTC_SetDate+0x164>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_RTC_SetDate+0x168>)
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80032f2:	69f9      	ldr	r1, [r7, #28]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8ee 	bl	80034d6 <RTC_WriteTimeCounter>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2204      	movs	r2, #4
 8003304:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e027      	b.n	8003360 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f907 	bl	8003524 <RTC_ReadAlarmCounter>
 8003316:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331e:	d018      	beq.n	8003352 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	429a      	cmp	r2, r3
 8003326:	d214      	bcs.n	8003352 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800332e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003332:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f90d 	bl	8003556 <RTC_WriteAlarmCounter>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2204      	movs	r2, #4
 8003346:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e006      	b.n	8003360 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3720      	adds	r7, #32
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	91a2b3c5 	.word	0x91a2b3c5
 800336c:	aaaaaaab 	.word	0xaaaaaaab
 8003370:	00015180 	.word	0x00015180

08003374 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	2100      	movs	r1, #0
 8003386:	460a      	mov	r2, r1
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	460a      	mov	r2, r1
 800338c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_RTC_GetDate+0x26>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e03a      	b.n	8003414 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	2200      	movs	r2, #0
 80033a4:	4619      	mov	r1, r3
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7ff fe56 	bl	8003058 <HAL_RTC_GetTime>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e02e      	b.n	8003414 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	7b1a      	ldrb	r2, [r3, #12]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	7bda      	ldrb	r2, [r3, #15]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	7b5a      	ldrb	r2, [r3, #13]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	7b9a      	ldrb	r2, [r3, #14]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01a      	beq.n	8003412 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	78db      	ldrb	r3, [r3, #3]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f92f 	bl	8003644 <RTC_ByteToBcd2>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f926 	bl	8003644 <RTC_ByteToBcd2>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	789b      	ldrb	r3, [r3, #2]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f91d 	bl	8003644 <RTC_ByteToBcd2>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e01d      	b.n	800346e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0208 	bic.w	r2, r2, #8
 8003440:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003442:	f7fe fc23 	bl	8001c8c <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003448:	e009      	b.n	800345e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800344a:	f7fe fc1f 	bl	8001c8c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003458:	d901      	bls.n	800345e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e007      	b.n	800346e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ee      	beq.n	800344a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003476:	b480      	push	{r7}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	827b      	strh	r3, [r7, #18]
 8003482:	2300      	movs	r3, #0
 8003484:	823b      	strh	r3, [r7, #16]
 8003486:	2300      	movs	r3, #0
 8003488:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80034a6:	8a7a      	ldrh	r2, [r7, #18]
 80034a8:	8a3b      	ldrh	r3, [r7, #16]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d008      	beq.n	80034c0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80034ae:	8a3b      	ldrh	r3, [r7, #16]
 80034b0:	041a      	lsls	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e004      	b.n	80034ca <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80034c0:	8a7b      	ldrh	r3, [r7, #18]
 80034c2:	041a      	lsls	r2, r3, #16
 80034c4:	89fb      	ldrh	r3, [r7, #14]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80034ca:	697b      	ldr	r3, [r7, #20]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f85d 	bl	80035a4 <RTC_EnterInitMode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e011      	b.n	800351a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	0c12      	lsrs	r2, r2, #16
 80034fe:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b292      	uxth	r2, r2
 8003508:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f872 	bl	80035f4 <RTC_ExitInitMode>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	81fb      	strh	r3, [r7, #14]
 8003530:	2300      	movs	r3, #0
 8003532:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	041a      	lsls	r2, r3, #16
 8003548:	89bb      	ldrh	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f81d 	bl	80035a4 <RTC_EnterInitMode>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e011      	b.n	800359a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	0c12      	lsrs	r2, r2, #16
 800357e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	b292      	uxth	r2, r2
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f832 	bl	80035f4 <RTC_ExitInitMode>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80035b0:	f7fe fb6c 	bl	8001c8c <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80035b6:	e009      	b.n	80035cc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80035b8:	f7fe fb68 	bl	8001c8c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035c6:	d901      	bls.n	80035cc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e00f      	b.n	80035ec <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0ee      	beq.n	80035b8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0210 	orr.w	r2, r2, #16
 80035e8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0210 	bic.w	r2, r2, #16
 800360e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003610:	f7fe fb3c 	bl	8001c8c <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003616:	e009      	b.n	800362c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003618:	f7fe fb38 	bl	8001c8c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003626:	d901      	bls.n	800362c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e007      	b.n	800363c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003652:	e005      	b.n	8003660 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	3b0a      	subs	r3, #10
 800365e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	2b09      	cmp	r3, #9
 8003664:	d8f6      	bhi.n	8003654 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	b2da      	uxtb	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	4313      	orrs	r3, r2
 8003672:	b2db      	uxtb	r3, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	b2db      	uxtb	r3, r3
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7bdb      	ldrb	r3, [r3, #15]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7b5b      	ldrb	r3, [r3, #13]
 80036dc:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7b9b      	ldrb	r3, [r3, #14]
 80036e2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	e06f      	b.n	80037ca <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d011      	beq.n	8003714 <RTC_DateUpdate+0x5c>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d00e      	beq.n	8003714 <RTC_DateUpdate+0x5c>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d00b      	beq.n	8003714 <RTC_DateUpdate+0x5c>
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b07      	cmp	r3, #7
 8003700:	d008      	beq.n	8003714 <RTC_DateUpdate+0x5c>
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d005      	beq.n	8003714 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b0a      	cmp	r3, #10
 800370c:	d002      	beq.n	8003714 <RTC_DateUpdate+0x5c>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d117      	bne.n	8003744 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b1e      	cmp	r3, #30
 8003718:	d803      	bhi.n	8003722 <RTC_DateUpdate+0x6a>
      {
        day++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003720:	e050      	b.n	80037c4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b0c      	cmp	r3, #12
 8003726:	d005      	beq.n	8003734 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	3301      	adds	r3, #1
 800372c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800372e:	2301      	movs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003732:	e047      	b.n	80037c4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003734:	2301      	movs	r3, #1
 8003736:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
          year++;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003742:	e03f      	b.n	80037c4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b04      	cmp	r3, #4
 8003748:	d008      	beq.n	800375c <RTC_DateUpdate+0xa4>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b06      	cmp	r3, #6
 800374e:	d005      	beq.n	800375c <RTC_DateUpdate+0xa4>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b09      	cmp	r3, #9
 8003754:	d002      	beq.n	800375c <RTC_DateUpdate+0xa4>
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b0b      	cmp	r3, #11
 800375a:	d10c      	bne.n	8003776 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b1d      	cmp	r3, #29
 8003760:	d803      	bhi.n	800376a <RTC_DateUpdate+0xb2>
      {
        day++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3301      	adds	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003768:	e02c      	b.n	80037c4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3301      	adds	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003770:	2301      	movs	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003774:	e026      	b.n	80037c4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d123      	bne.n	80037c4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b1b      	cmp	r3, #27
 8003780:	d803      	bhi.n	800378a <RTC_DateUpdate+0xd2>
      {
        day++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e01c      	b.n	80037c4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b1c      	cmp	r3, #28
 800378e:	d111      	bne.n	80037b4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	b29b      	uxth	r3, r3
 8003794:	4618      	mov	r0, r3
 8003796:	f000 f839 	bl	800380c <RTC_IsLeapYear>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e00d      	b.n	80037c4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	3301      	adds	r3, #1
 80037ac:	613b      	str	r3, [r7, #16]
          day = 1U;
 80037ae:	2301      	movs	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e007      	b.n	80037c4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b1d      	cmp	r3, #29
 80037b8:	d104      	bne.n	80037c4 <RTC_DateUpdate+0x10c>
      {
        month++;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3301      	adds	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
        day = 1U;
 80037c0:	2301      	movs	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3301      	adds	r3, #1
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d38b      	bcc.n	80036ea <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	6978      	ldr	r0, [r7, #20]
 80037f6:	f000 f83b 	bl	8003870 <RTC_WeekDayNum>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	731a      	strb	r2, [r3, #12]
}
 8003802:	bf00      	nop
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	e01d      	b.n	8003862 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	4a10      	ldr	r2, [pc, #64]	; (800386c <RTC_IsLeapYear+0x60>)
 800382a:	fba2 1203 	umull	r1, r2, r2, r3
 800382e:	0952      	lsrs	r2, r2, #5
 8003830:	2164      	movs	r1, #100	; 0x64
 8003832:	fb01 f202 	mul.w	r2, r1, r2
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800383e:	2301      	movs	r3, #1
 8003840:	e00f      	b.n	8003862 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	4a09      	ldr	r2, [pc, #36]	; (800386c <RTC_IsLeapYear+0x60>)
 8003846:	fba2 1203 	umull	r1, r2, r2, r3
 800384a:	09d2      	lsrs	r2, r2, #7
 800384c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003850:	fb01 f202 	mul.w	r2, r1, r2
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003860:	2300      	movs	r3, #0
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	51eb851f 	.word	0x51eb851f

08003870 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
 800387c:	4613      	mov	r3, r2
 800387e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800388e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d82d      	bhi.n	80038f2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <RTC_WeekDayNum+0xe4>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	085a      	lsrs	r2, r3, #1
 80038aa:	78bb      	ldrb	r3, [r7, #2]
 80038ac:	441a      	add	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	441a      	add	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3b01      	subs	r3, #1
 80038be:	4926      	ldr	r1, [pc, #152]	; (8003958 <RTC_WeekDayNum+0xe8>)
 80038c0:	fba1 1303 	umull	r1, r3, r1, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	1ad2      	subs	r2, r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	4922      	ldr	r1, [pc, #136]	; (8003958 <RTC_WeekDayNum+0xe8>)
 80038ce:	fba1 1303 	umull	r1, r3, r1, r3
 80038d2:	09db      	lsrs	r3, r3, #7
 80038d4:	4413      	add	r3, r2
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <RTC_WeekDayNum+0xec>)
 80038da:	fba3 1302 	umull	r1, r3, r3, r2
 80038de:	1ad1      	subs	r1, r2, r3
 80038e0:	0849      	lsrs	r1, r1, #1
 80038e2:	440b      	add	r3, r1
 80038e4:	0899      	lsrs	r1, r3, #2
 80038e6:	460b      	mov	r3, r1
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e029      	b.n	8003946 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	4613      	mov	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	4a15      	ldr	r2, [pc, #84]	; (8003954 <RTC_WeekDayNum+0xe4>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	085a      	lsrs	r2, r3, #1
 8003906:	78bb      	ldrb	r3, [r7, #2]
 8003908:	441a      	add	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	441a      	add	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4910      	ldr	r1, [pc, #64]	; (8003958 <RTC_WeekDayNum+0xe8>)
 8003918:	fba1 1303 	umull	r1, r3, r1, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	490d      	ldr	r1, [pc, #52]	; (8003958 <RTC_WeekDayNum+0xe8>)
 8003924:	fba1 1303 	umull	r1, r3, r1, r3
 8003928:	09db      	lsrs	r3, r3, #7
 800392a:	4413      	add	r3, r2
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <RTC_WeekDayNum+0xec>)
 8003930:	fba3 1302 	umull	r1, r3, r3, r2
 8003934:	1ad1      	subs	r1, r2, r3
 8003936:	0849      	lsrs	r1, r1, #1
 8003938:	440b      	add	r3, r1
 800393a:	0899      	lsrs	r1, r3, #2
 800393c:	460b      	mov	r3, r1
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a5b      	subs	r3, r3, r1
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	b2db      	uxtb	r3, r3
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	38e38e39 	.word	0x38e38e39
 8003958:	51eb851f 	.word	0x51eb851f
 800395c:	24924925 	.word	0x24924925

08003960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e076      	b.n	8003a60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003982:	d009      	beq.n	8003998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	61da      	str	r2, [r3, #28]
 800398a:	e005      	b.n	8003998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fb90 	bl	80010d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	ea42 0103 	orr.w	r1, r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	0c1a      	lsrs	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f002 0204 	and.w	r2, r2, #4
 8003a3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_SPI_Transmit+0x22>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e12d      	b.n	8003ce6 <HAL_SPI_Transmit+0x27e>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a92:	f7fe f8fb 	bl	8001c8c <HAL_GetTick>
 8003a96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aac:	e116      	b.n	8003cdc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_SPI_Transmit+0x52>
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003abe:	e10d      	b.n	8003cdc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b06:	d10f      	bne.n	8003b28 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d007      	beq.n	8003b46 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4e:	d14f      	bne.n	8003bf0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_SPI_Transmit+0xf6>
 8003b58:	8afb      	ldrh	r3, [r7, #22]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d142      	bne.n	8003be4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	1c9a      	adds	r2, r3, #2
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b82:	e02f      	b.n	8003be4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d112      	bne.n	8003bb8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bb6:	e015      	b.n	8003be4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb8:	f7fe f868 	bl	8001c8c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d803      	bhi.n	8003bd0 <HAL_SPI_Transmit+0x168>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d102      	bne.n	8003bd6 <HAL_SPI_Transmit+0x16e>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003be2:	e07b      	b.n	8003cdc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ca      	bne.n	8003b84 <HAL_SPI_Transmit+0x11c>
 8003bee:	e050      	b.n	8003c92 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_Transmit+0x196>
 8003bf8:	8afb      	ldrh	r3, [r7, #22]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d144      	bne.n	8003c88 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c24:	e030      	b.n	8003c88 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d113      	bne.n	8003c5c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c5a:	e015      	b.n	8003c88 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5c:	f7fe f816 	bl	8001c8c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d803      	bhi.n	8003c74 <HAL_SPI_Transmit+0x20c>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Transmit+0x212>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c86:	e029      	b.n	8003cdc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1c9      	bne.n	8003c26 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f8b2 	bl	8003e00 <SPI_EndRxTxTransaction>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e003      	b.n	8003cdc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ce4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d00:	f7fd ffc4 	bl	8001c8c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d10:	f7fd ffbc 	bl	8001c8c <HAL_GetTick>
 8003d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d16:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	015b      	lsls	r3, r3, #5
 8003d1c:	0d1b      	lsrs	r3, r3, #20
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	fb02 f303 	mul.w	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d26:	e054      	b.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d050      	beq.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d30:	f7fd ffac 	bl	8001c8c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d902      	bls.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d13d      	bne.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5e:	d111      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d68:	d004      	beq.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d107      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8c:	d10f      	bne.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e017      	b.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d19b      	bne.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2200      	movs	r2, #0
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff ff6a 	bl	8003cf0 <SPI_WaitFlagStateUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e000      	b.n	8003e34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e041      	b.n	8003ed2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd faf6 	bl	8001454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 f8f0 	bl	8004060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e0ae      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	f200 809f 	bhi.w	8004048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08004049 	.word	0x08004049
 8003f18:	08004049 	.word	0x08004049
 8003f1c:	08004049 	.word	0x08004049
 8003f20:	08003f85 	.word	0x08003f85
 8003f24:	08004049 	.word	0x08004049
 8003f28:	08004049 	.word	0x08004049
 8003f2c:	08004049 	.word	0x08004049
 8003f30:	08003fc7 	.word	0x08003fc7
 8003f34:	08004049 	.word	0x08004049
 8003f38:	08004049 	.word	0x08004049
 8003f3c:	08004049 	.word	0x08004049
 8003f40:	08004007 	.word	0x08004007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f902 	bl	8004154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0208 	orr.w	r2, r2, #8
 8003f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6999      	ldr	r1, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	619a      	str	r2, [r3, #24]
      break;
 8003f82:	e064      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f952 	bl	8004234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6999      	ldr	r1, [r3, #24]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	021a      	lsls	r2, r3, #8
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	619a      	str	r2, [r3, #24]
      break;
 8003fc4:	e043      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f9a5 	bl	800431c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0208 	orr.w	r2, r2, #8
 8003fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0204 	bic.w	r2, r2, #4
 8003ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69d9      	ldr	r1, [r3, #28]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	61da      	str	r2, [r3, #28]
      break;
 8004004:	e023      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f9f9 	bl	8004404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69d9      	ldr	r1, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	021a      	lsls	r2, r3, #8
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	61da      	str	r2, [r3, #28]
      break;
 8004046:	e002      	b.n	800404e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
      break;
 800404c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a33      	ldr	r2, [pc, #204]	; (8004140 <TIM_Base_SetConfig+0xe0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a32      	ldr	r2, [pc, #200]	; (8004144 <TIM_Base_SetConfig+0xe4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00f      	beq.n	80040a0 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d00b      	beq.n	80040a0 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <TIM_Base_SetConfig+0xe8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d007      	beq.n	80040a0 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a2e      	ldr	r2, [pc, #184]	; (800414c <TIM_Base_SetConfig+0xec>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <TIM_Base_SetConfig+0xf0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d108      	bne.n	80040b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <TIM_Base_SetConfig+0xe0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <TIM_Base_SetConfig+0x82>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a21      	ldr	r2, [pc, #132]	; (8004144 <TIM_Base_SetConfig+0xe4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00f      	beq.n	80040e2 <TIM_Base_SetConfig+0x82>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d00b      	beq.n	80040e2 <TIM_Base_SetConfig+0x82>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <TIM_Base_SetConfig+0xe8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d007      	beq.n	80040e2 <TIM_Base_SetConfig+0x82>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1d      	ldr	r2, [pc, #116]	; (800414c <TIM_Base_SetConfig+0xec>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d003      	beq.n	80040e2 <TIM_Base_SetConfig+0x82>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <TIM_Base_SetConfig+0xf0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <TIM_Base_SetConfig+0xe0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_Base_SetConfig+0xc8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a08      	ldr	r2, [pc, #32]	; (8004144 <TIM_Base_SetConfig+0xe4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d103      	bne.n	8004130 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	615a      	str	r2, [r3, #20]
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40013400 	.word	0x40013400
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800
 8004150:	40000c00 	.word	0x40000c00

08004154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f023 0201 	bic.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 0302 	bic.w	r3, r3, #2
 800419c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a20      	ldr	r2, [pc, #128]	; (800422c <TIM_OC1_SetConfig+0xd8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_OC1_SetConfig+0x64>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <TIM_OC1_SetConfig+0xdc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10c      	bne.n	80041d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0308 	bic.w	r3, r3, #8
 80041be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <TIM_OC1_SetConfig+0xd8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_OC1_SetConfig+0x8e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <TIM_OC1_SetConfig+0xdc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d111      	bne.n	8004206 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	621a      	str	r2, [r3, #32]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40013400 	.word	0x40013400

08004234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f023 0210 	bic.w	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0320 	bic.w	r3, r3, #32
 800427e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a21      	ldr	r2, [pc, #132]	; (8004314 <TIM_OC2_SetConfig+0xe0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_OC2_SetConfig+0x68>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a20      	ldr	r2, [pc, #128]	; (8004318 <TIM_OC2_SetConfig+0xe4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10d      	bne.n	80042b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a16      	ldr	r2, [pc, #88]	; (8004314 <TIM_OC2_SetConfig+0xe0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_OC2_SetConfig+0x94>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <TIM_OC2_SetConfig+0xe4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d113      	bne.n	80042f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40013400 	.word	0x40013400

0800431c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a21      	ldr	r2, [pc, #132]	; (80043fc <TIM_OC3_SetConfig+0xe0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_OC3_SetConfig+0x66>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a20      	ldr	r2, [pc, #128]	; (8004400 <TIM_OC3_SetConfig+0xe4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10d      	bne.n	800439e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800439c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <TIM_OC3_SetConfig+0xe0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_OC3_SetConfig+0x92>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a15      	ldr	r2, [pc, #84]	; (8004400 <TIM_OC3_SetConfig+0xe4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d113      	bne.n	80043d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40013400 	.word	0x40013400

08004404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800444e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	031b      	lsls	r3, r3, #12
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <TIM_OC4_SetConfig+0xa0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_OC4_SetConfig+0x68>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <TIM_OC4_SetConfig+0xa4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d109      	bne.n	8004480 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	019b      	lsls	r3, r3, #6
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40013400 	.word	0x40013400

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e050      	b.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d018      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451a:	d00e      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a14      	ldr	r2, [pc, #80]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a12      	ldr	r2, [pc, #72]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10c      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40013400 	.word	0x40013400
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00

08004584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e042      	b.n	800461c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc ffe0 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f91d 	bl	8004808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b20      	cmp	r3, #32
 8004642:	d16d      	bne.n	8004720 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Transmit+0x2c>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e066      	b.n	8004722 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2221      	movs	r2, #33	; 0x21
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fd fb13 	bl	8001c8c <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d108      	bne.n	8004690 <HAL_UART_Transmit+0x6c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e003      	b.n	8004698 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004698:	e02a      	b.n	80046f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2180      	movs	r1, #128	; 0x80
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f840 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e036      	b.n	8004722 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3302      	adds	r3, #2
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e007      	b.n	80046e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3301      	adds	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1cf      	bne.n	800469a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2140      	movs	r1, #64	; 0x40
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f810 	bl	800472a <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e006      	b.n	8004722 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b090      	sub	sp, #64	; 0x40
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473a:	e050      	b.n	80047de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d04c      	beq.n	80047de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <UART_WaitOnFlagUntilTimeout+0x30>
 800474a:	f7fd fa9f 	bl	8001c8c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004756:	429a      	cmp	r2, r3
 8004758:	d241      	bcs.n	80047de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800477a:	637a      	str	r2, [r7, #52]	; 0x34
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	613b      	str	r3, [r7, #16]
   return(result);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ae:	623a      	str	r2, [r7, #32]
 80047b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	69f9      	ldr	r1, [r7, #28]
 80047b4:	6a3a      	ldr	r2, [r7, #32]
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e5      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e00f      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	bf0c      	ite	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	2300      	movne	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d09f      	beq.n	800473c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3740      	adds	r7, #64	; 0x40
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004842:	f023 030c 	bic.w	r3, r3, #12
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	430b      	orrs	r3, r1
 800484e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2c      	ldr	r2, [pc, #176]	; (800491c <UART_SetConfig+0x114>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d103      	bne.n	8004878 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7fe f90e 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	e002      	b.n	800487e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe f8f6 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 800487c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009a      	lsls	r2, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	4a22      	ldr	r2, [pc, #136]	; (8004920 <UART_SetConfig+0x118>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	0119      	lsls	r1, r3, #4
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009a      	lsls	r2, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <UART_SetConfig+0x118>)
 80048b6:	fba3 0302 	umull	r0, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2064      	movs	r0, #100	; 0x64
 80048be:	fb00 f303 	mul.w	r3, r0, r3
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	3332      	adds	r3, #50	; 0x32
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <UART_SetConfig+0x118>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d4:	4419      	add	r1, r3
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	009a      	lsls	r2, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <UART_SetConfig+0x118>)
 80048ee:	fba3 0302 	umull	r0, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2064      	movs	r0, #100	; 0x64
 80048f6:	fb00 f303 	mul.w	r3, r0, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	3332      	adds	r3, #50	; 0x32
 8004900:	4a07      	ldr	r2, [pc, #28]	; (8004920 <UART_SetConfig+0x118>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	440a      	add	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40013800 	.word	0x40013800
 8004920:	51eb851f 	.word	0x51eb851f

08004924 <__cvt>:
 8004924:	2b00      	cmp	r3, #0
 8004926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492a:	461f      	mov	r7, r3
 800492c:	bfbb      	ittet	lt
 800492e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004932:	461f      	movlt	r7, r3
 8004934:	2300      	movge	r3, #0
 8004936:	232d      	movlt	r3, #45	; 0x2d
 8004938:	b088      	sub	sp, #32
 800493a:	4614      	mov	r4, r2
 800493c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800493e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004940:	7013      	strb	r3, [r2, #0]
 8004942:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004944:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004948:	f023 0820 	bic.w	r8, r3, #32
 800494c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004950:	d005      	beq.n	800495e <__cvt+0x3a>
 8004952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004956:	d100      	bne.n	800495a <__cvt+0x36>
 8004958:	3501      	adds	r5, #1
 800495a:	2302      	movs	r3, #2
 800495c:	e000      	b.n	8004960 <__cvt+0x3c>
 800495e:	2303      	movs	r3, #3
 8004960:	aa07      	add	r2, sp, #28
 8004962:	9204      	str	r2, [sp, #16]
 8004964:	aa06      	add	r2, sp, #24
 8004966:	e9cd a202 	strd	sl, r2, [sp, #8]
 800496a:	e9cd 3500 	strd	r3, r5, [sp]
 800496e:	4622      	mov	r2, r4
 8004970:	463b      	mov	r3, r7
 8004972:	f000 ff61 	bl	8005838 <_dtoa_r>
 8004976:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800497a:	4606      	mov	r6, r0
 800497c:	d102      	bne.n	8004984 <__cvt+0x60>
 800497e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004980:	07db      	lsls	r3, r3, #31
 8004982:	d522      	bpl.n	80049ca <__cvt+0xa6>
 8004984:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004988:	eb06 0905 	add.w	r9, r6, r5
 800498c:	d110      	bne.n	80049b0 <__cvt+0x8c>
 800498e:	7833      	ldrb	r3, [r6, #0]
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d10a      	bne.n	80049aa <__cvt+0x86>
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	4620      	mov	r0, r4
 800499a:	4639      	mov	r1, r7
 800499c:	f7fc f870 	bl	8000a80 <__aeabi_dcmpeq>
 80049a0:	b918      	cbnz	r0, 80049aa <__cvt+0x86>
 80049a2:	f1c5 0501 	rsb	r5, r5, #1
 80049a6:	f8ca 5000 	str.w	r5, [sl]
 80049aa:	f8da 3000 	ldr.w	r3, [sl]
 80049ae:	4499      	add	r9, r3
 80049b0:	2200      	movs	r2, #0
 80049b2:	2300      	movs	r3, #0
 80049b4:	4620      	mov	r0, r4
 80049b6:	4639      	mov	r1, r7
 80049b8:	f7fc f862 	bl	8000a80 <__aeabi_dcmpeq>
 80049bc:	b108      	cbz	r0, 80049c2 <__cvt+0x9e>
 80049be:	f8cd 901c 	str.w	r9, [sp, #28]
 80049c2:	2230      	movs	r2, #48	; 0x30
 80049c4:	9b07      	ldr	r3, [sp, #28]
 80049c6:	454b      	cmp	r3, r9
 80049c8:	d307      	bcc.n	80049da <__cvt+0xb6>
 80049ca:	4630      	mov	r0, r6
 80049cc:	9b07      	ldr	r3, [sp, #28]
 80049ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049d0:	1b9b      	subs	r3, r3, r6
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	b008      	add	sp, #32
 80049d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	9107      	str	r1, [sp, #28]
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e7f0      	b.n	80049c4 <__cvt+0xa0>

080049e2 <__exponent>:
 80049e2:	4603      	mov	r3, r0
 80049e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e6:	2900      	cmp	r1, #0
 80049e8:	f803 2b02 	strb.w	r2, [r3], #2
 80049ec:	bfb6      	itet	lt
 80049ee:	222d      	movlt	r2, #45	; 0x2d
 80049f0:	222b      	movge	r2, #43	; 0x2b
 80049f2:	4249      	neglt	r1, r1
 80049f4:	2909      	cmp	r1, #9
 80049f6:	7042      	strb	r2, [r0, #1]
 80049f8:	dd2a      	ble.n	8004a50 <__exponent+0x6e>
 80049fa:	f10d 0207 	add.w	r2, sp, #7
 80049fe:	4617      	mov	r7, r2
 8004a00:	260a      	movs	r6, #10
 8004a02:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a06:	4694      	mov	ip, r2
 8004a08:	fb06 1415 	mls	r4, r6, r5, r1
 8004a0c:	3430      	adds	r4, #48	; 0x30
 8004a0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a12:	460c      	mov	r4, r1
 8004a14:	2c63      	cmp	r4, #99	; 0x63
 8004a16:	4629      	mov	r1, r5
 8004a18:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a1c:	dcf1      	bgt.n	8004a02 <__exponent+0x20>
 8004a1e:	3130      	adds	r1, #48	; 0x30
 8004a20:	f1ac 0402 	sub.w	r4, ip, #2
 8004a24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a28:	4622      	mov	r2, r4
 8004a2a:	1c41      	adds	r1, r0, #1
 8004a2c:	42ba      	cmp	r2, r7
 8004a2e:	d30a      	bcc.n	8004a46 <__exponent+0x64>
 8004a30:	f10d 0209 	add.w	r2, sp, #9
 8004a34:	eba2 020c 	sub.w	r2, r2, ip
 8004a38:	42bc      	cmp	r4, r7
 8004a3a:	bf88      	it	hi
 8004a3c:	2200      	movhi	r2, #0
 8004a3e:	4413      	add	r3, r2
 8004a40:	1a18      	subs	r0, r3, r0
 8004a42:	b003      	add	sp, #12
 8004a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a4e:	e7ed      	b.n	8004a2c <__exponent+0x4a>
 8004a50:	2330      	movs	r3, #48	; 0x30
 8004a52:	3130      	adds	r1, #48	; 0x30
 8004a54:	7083      	strb	r3, [r0, #2]
 8004a56:	70c1      	strb	r1, [r0, #3]
 8004a58:	1d03      	adds	r3, r0, #4
 8004a5a:	e7f1      	b.n	8004a40 <__exponent+0x5e>

08004a5c <_printf_float>:
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	b091      	sub	sp, #68	; 0x44
 8004a62:	460c      	mov	r4, r1
 8004a64:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a68:	4616      	mov	r6, r2
 8004a6a:	461f      	mov	r7, r3
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	f000 fdd5 	bl	800561c <_localeconv_r>
 8004a72:	6803      	ldr	r3, [r0, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	9309      	str	r3, [sp, #36]	; 0x24
 8004a78:	f7fb fbd6 	bl	8000228 <strlen>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	930e      	str	r3, [sp, #56]	; 0x38
 8004a80:	f8d8 3000 	ldr.w	r3, [r8]
 8004a84:	900a      	str	r0, [sp, #40]	; 0x28
 8004a86:	3307      	adds	r3, #7
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	f103 0208 	add.w	r2, r3, #8
 8004a90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a94:	f8d4 b000 	ldr.w	fp, [r4]
 8004a98:	f8c8 2000 	str.w	r2, [r8]
 8004a9c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	4643      	mov	r3, r8
 8004aa4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004aa8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aae:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab2:	4650      	mov	r0, sl
 8004ab4:	4b9c      	ldr	r3, [pc, #624]	; (8004d28 <_printf_float+0x2cc>)
 8004ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ab8:	f7fc f814 	bl	8000ae4 <__aeabi_dcmpun>
 8004abc:	bb70      	cbnz	r0, 8004b1c <_printf_float+0xc0>
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4b98      	ldr	r3, [pc, #608]	; (8004d28 <_printf_float+0x2cc>)
 8004ac6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ac8:	f7fb ffee 	bl	8000aa8 <__aeabi_dcmple>
 8004acc:	bb30      	cbnz	r0, 8004b1c <_printf_float+0xc0>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4650      	mov	r0, sl
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	f7fb ffdd 	bl	8000a94 <__aeabi_dcmplt>
 8004ada:	b110      	cbz	r0, 8004ae2 <_printf_float+0x86>
 8004adc:	232d      	movs	r3, #45	; 0x2d
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae2:	4a92      	ldr	r2, [pc, #584]	; (8004d2c <_printf_float+0x2d0>)
 8004ae4:	4b92      	ldr	r3, [pc, #584]	; (8004d30 <_printf_float+0x2d4>)
 8004ae6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004aea:	bf94      	ite	ls
 8004aec:	4690      	movls	r8, r2
 8004aee:	4698      	movhi	r8, r3
 8004af0:	2303      	movs	r3, #3
 8004af2:	f04f 0a00 	mov.w	sl, #0
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	f02b 0304 	bic.w	r3, fp, #4
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	4633      	mov	r3, r6
 8004b00:	4621      	mov	r1, r4
 8004b02:	4628      	mov	r0, r5
 8004b04:	9700      	str	r7, [sp, #0]
 8004b06:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b08:	f000 f9d6 	bl	8004eb8 <_printf_common>
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f040 8090 	bne.w	8004c32 <_printf_float+0x1d6>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	b011      	add	sp, #68	; 0x44
 8004b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	4643      	mov	r3, r8
 8004b20:	4650      	mov	r0, sl
 8004b22:	4641      	mov	r1, r8
 8004b24:	f7fb ffde 	bl	8000ae4 <__aeabi_dcmpun>
 8004b28:	b148      	cbz	r0, 8004b3e <_printf_float+0xe2>
 8004b2a:	f1b8 0f00 	cmp.w	r8, #0
 8004b2e:	bfb8      	it	lt
 8004b30:	232d      	movlt	r3, #45	; 0x2d
 8004b32:	4a80      	ldr	r2, [pc, #512]	; (8004d34 <_printf_float+0x2d8>)
 8004b34:	bfb8      	it	lt
 8004b36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b3a:	4b7f      	ldr	r3, [pc, #508]	; (8004d38 <_printf_float+0x2dc>)
 8004b3c:	e7d3      	b.n	8004ae6 <_printf_float+0x8a>
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	d142      	bne.n	8004bce <_printf_float+0x172>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	9206      	str	r2, [sp, #24]
 8004b50:	aa0e      	add	r2, sp, #56	; 0x38
 8004b52:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b56:	aa0d      	add	r2, sp, #52	; 0x34
 8004b58:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b5c:	9203      	str	r2, [sp, #12]
 8004b5e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	4652      	mov	r2, sl
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	4643      	mov	r3, r8
 8004b72:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b74:	f7ff fed6 	bl	8004924 <__cvt>
 8004b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	2947      	cmp	r1, #71	; 0x47
 8004b7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b80:	d108      	bne.n	8004b94 <_printf_float+0x138>
 8004b82:	1cc8      	adds	r0, r1, #3
 8004b84:	db02      	blt.n	8004b8c <_printf_float+0x130>
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	4299      	cmp	r1, r3
 8004b8a:	dd40      	ble.n	8004c0e <_printf_float+0x1b2>
 8004b8c:	f1a9 0902 	sub.w	r9, r9, #2
 8004b90:	fa5f f989 	uxtb.w	r9, r9
 8004b94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b98:	d81f      	bhi.n	8004bda <_printf_float+0x17e>
 8004b9a:	464a      	mov	r2, r9
 8004b9c:	3901      	subs	r1, #1
 8004b9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ba2:	910d      	str	r1, [sp, #52]	; 0x34
 8004ba4:	f7ff ff1d 	bl	80049e2 <__exponent>
 8004ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004baa:	4682      	mov	sl, r0
 8004bac:	1813      	adds	r3, r2, r0
 8004bae:	2a01      	cmp	r2, #1
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	dc02      	bgt.n	8004bba <_printf_float+0x15e>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	07d2      	lsls	r2, r2, #31
 8004bb8:	d501      	bpl.n	8004bbe <_printf_float+0x162>
 8004bba:	3301      	adds	r3, #1
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d09b      	beq.n	8004afe <_printf_float+0xa2>
 8004bc6:	232d      	movs	r3, #45	; 0x2d
 8004bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bcc:	e797      	b.n	8004afe <_printf_float+0xa2>
 8004bce:	2947      	cmp	r1, #71	; 0x47
 8004bd0:	d1bc      	bne.n	8004b4c <_printf_float+0xf0>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ba      	bne.n	8004b4c <_printf_float+0xf0>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e7b7      	b.n	8004b4a <_printf_float+0xee>
 8004bda:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004bde:	d118      	bne.n	8004c12 <_printf_float+0x1b6>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	6863      	ldr	r3, [r4, #4]
 8004be4:	dd0b      	ble.n	8004bfe <_printf_float+0x1a2>
 8004be6:	6121      	str	r1, [r4, #16]
 8004be8:	b913      	cbnz	r3, 8004bf0 <_printf_float+0x194>
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	07d0      	lsls	r0, r2, #31
 8004bee:	d502      	bpl.n	8004bf6 <_printf_float+0x19a>
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	440b      	add	r3, r1
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	f04f 0a00 	mov.w	sl, #0
 8004bfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bfc:	e7df      	b.n	8004bbe <_printf_float+0x162>
 8004bfe:	b913      	cbnz	r3, 8004c06 <_printf_float+0x1aa>
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	07d2      	lsls	r2, r2, #31
 8004c04:	d501      	bpl.n	8004c0a <_printf_float+0x1ae>
 8004c06:	3302      	adds	r3, #2
 8004c08:	e7f4      	b.n	8004bf4 <_printf_float+0x198>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e7f2      	b.n	8004bf4 <_printf_float+0x198>
 8004c0e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c14:	4299      	cmp	r1, r3
 8004c16:	db05      	blt.n	8004c24 <_printf_float+0x1c8>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	6121      	str	r1, [r4, #16]
 8004c1c:	07d8      	lsls	r0, r3, #31
 8004c1e:	d5ea      	bpl.n	8004bf6 <_printf_float+0x19a>
 8004c20:	1c4b      	adds	r3, r1, #1
 8004c22:	e7e7      	b.n	8004bf4 <_printf_float+0x198>
 8004c24:	2900      	cmp	r1, #0
 8004c26:	bfcc      	ite	gt
 8004c28:	2201      	movgt	r2, #1
 8004c2a:	f1c1 0202 	rsble	r2, r1, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	e7e0      	b.n	8004bf4 <_printf_float+0x198>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	055a      	lsls	r2, r3, #21
 8004c36:	d407      	bmi.n	8004c48 <_printf_float+0x1ec>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	d12b      	bne.n	8004c9e <_printf_float+0x242>
 8004c46:	e764      	b.n	8004b12 <_printf_float+0xb6>
 8004c48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c4c:	f240 80dd 	bls.w	8004e0a <_printf_float+0x3ae>
 8004c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c54:	2200      	movs	r2, #0
 8004c56:	2300      	movs	r3, #0
 8004c58:	f7fb ff12 	bl	8000a80 <__aeabi_dcmpeq>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d033      	beq.n	8004cc8 <_printf_float+0x26c>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <_printf_float+0x2e0>)
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af51 	beq.w	8004b12 <_printf_float+0xb6>
 8004c70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c74:	429a      	cmp	r2, r3
 8004c76:	db02      	blt.n	8004c7e <_printf_float+0x222>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	07d8      	lsls	r0, r3, #31
 8004c7c:	d50f      	bpl.n	8004c9e <_printf_float+0x242>
 8004c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f af42 	beq.w	8004b12 <_printf_float+0xb6>
 8004c8e:	f04f 0800 	mov.w	r8, #0
 8004c92:	f104 091a 	add.w	r9, r4, #26
 8004c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	4543      	cmp	r3, r8
 8004c9c:	dc09      	bgt.n	8004cb2 <_printf_float+0x256>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	079b      	lsls	r3, r3, #30
 8004ca2:	f100 8104 	bmi.w	8004eae <_printf_float+0x452>
 8004ca6:	68e0      	ldr	r0, [r4, #12]
 8004ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004caa:	4298      	cmp	r0, r3
 8004cac:	bfb8      	it	lt
 8004cae:	4618      	movlt	r0, r3
 8004cb0:	e731      	b.n	8004b16 <_printf_float+0xba>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	464a      	mov	r2, r9
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f af28 	beq.w	8004b12 <_printf_float+0xb6>
 8004cc2:	f108 0801 	add.w	r8, r8, #1
 8004cc6:	e7e6      	b.n	8004c96 <_printf_float+0x23a>
 8004cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dc38      	bgt.n	8004d40 <_printf_float+0x2e4>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <_printf_float+0x2e0>)
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f af1a 	beq.w	8004b12 <_printf_float+0xb6>
 8004cde:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	d102      	bne.n	8004cec <_printf_float+0x290>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	07d9      	lsls	r1, r3, #31
 8004cea:	d5d8      	bpl.n	8004c9e <_printf_float+0x242>
 8004cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af0b 	beq.w	8004b12 <_printf_float+0xb6>
 8004cfc:	f04f 0900 	mov.w	r9, #0
 8004d00:	f104 0a1a 	add.w	sl, r4, #26
 8004d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d06:	425b      	negs	r3, r3
 8004d08:	454b      	cmp	r3, r9
 8004d0a:	dc01      	bgt.n	8004d10 <_printf_float+0x2b4>
 8004d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d0e:	e794      	b.n	8004c3a <_printf_float+0x1de>
 8004d10:	2301      	movs	r3, #1
 8004d12:	4652      	mov	r2, sl
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f aef9 	beq.w	8004b12 <_printf_float+0xb6>
 8004d20:	f109 0901 	add.w	r9, r9, #1
 8004d24:	e7ee      	b.n	8004d04 <_printf_float+0x2a8>
 8004d26:	bf00      	nop
 8004d28:	7fefffff 	.word	0x7fefffff
 8004d2c:	0800ab56 	.word	0x0800ab56
 8004d30:	0800ab5a 	.word	0x0800ab5a
 8004d34:	0800ab5e 	.word	0x0800ab5e
 8004d38:	0800ab62 	.word	0x0800ab62
 8004d3c:	0800ab66 	.word	0x0800ab66
 8004d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d44:	429a      	cmp	r2, r3
 8004d46:	bfa8      	it	ge
 8004d48:	461a      	movge	r2, r3
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	4691      	mov	r9, r2
 8004d4e:	dc37      	bgt.n	8004dc0 <_printf_float+0x364>
 8004d50:	f04f 0b00 	mov.w	fp, #0
 8004d54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d58:	f104 021a 	add.w	r2, r4, #26
 8004d5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d60:	ebaa 0309 	sub.w	r3, sl, r9
 8004d64:	455b      	cmp	r3, fp
 8004d66:	dc33      	bgt.n	8004dd0 <_printf_float+0x374>
 8004d68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	db3b      	blt.n	8004de8 <_printf_float+0x38c>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07da      	lsls	r2, r3, #31
 8004d74:	d438      	bmi.n	8004de8 <_printf_float+0x38c>
 8004d76:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d7a:	eba2 0903 	sub.w	r9, r2, r3
 8004d7e:	eba2 020a 	sub.w	r2, r2, sl
 8004d82:	4591      	cmp	r9, r2
 8004d84:	bfa8      	it	ge
 8004d86:	4691      	movge	r9, r2
 8004d88:	f1b9 0f00 	cmp.w	r9, #0
 8004d8c:	dc34      	bgt.n	8004df8 <_printf_float+0x39c>
 8004d8e:	f04f 0800 	mov.w	r8, #0
 8004d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d96:	f104 0a1a 	add.w	sl, r4, #26
 8004d9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	eba3 0309 	sub.w	r3, r3, r9
 8004da4:	4543      	cmp	r3, r8
 8004da6:	f77f af7a 	ble.w	8004c9e <_printf_float+0x242>
 8004daa:	2301      	movs	r3, #1
 8004dac:	4652      	mov	r2, sl
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f aeac 	beq.w	8004b12 <_printf_float+0xb6>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	e7ec      	b.n	8004d9a <_printf_float+0x33e>
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d1c0      	bne.n	8004d50 <_printf_float+0x2f4>
 8004dce:	e6a0      	b.n	8004b12 <_printf_float+0xb6>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f ae99 	beq.w	8004b12 <_printf_float+0xb6>
 8004de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004de2:	f10b 0b01 	add.w	fp, fp, #1
 8004de6:	e7b9      	b.n	8004d5c <_printf_float+0x300>
 8004de8:	4631      	mov	r1, r6
 8004dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	d1bf      	bne.n	8004d76 <_printf_float+0x31a>
 8004df6:	e68c      	b.n	8004b12 <_printf_float+0xb6>
 8004df8:	464b      	mov	r3, r9
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	eb08 020a 	add.w	r2, r8, sl
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	d1c2      	bne.n	8004d8e <_printf_float+0x332>
 8004e08:	e683      	b.n	8004b12 <_printf_float+0xb6>
 8004e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e0c:	2a01      	cmp	r2, #1
 8004e0e:	dc01      	bgt.n	8004e14 <_printf_float+0x3b8>
 8004e10:	07db      	lsls	r3, r3, #31
 8004e12:	d539      	bpl.n	8004e88 <_printf_float+0x42c>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4642      	mov	r2, r8
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f ae77 	beq.w	8004b12 <_printf_float+0xb6>
 8004e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f ae6f 	beq.w	8004b12 <_printf_float+0xb6>
 8004e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e40:	f7fb fe1e 	bl	8000a80 <__aeabi_dcmpeq>
 8004e44:	b9d8      	cbnz	r0, 8004e7e <_printf_float+0x422>
 8004e46:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e4a:	f108 0201 	add.w	r2, r8, #1
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d10e      	bne.n	8004e76 <_printf_float+0x41a>
 8004e58:	e65b      	b.n	8004b12 <_printf_float+0xb6>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	464a      	mov	r2, r9
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f ae54 	beq.w	8004b12 <_printf_float+0xb6>
 8004e6a:	f108 0801 	add.w	r8, r8, #1
 8004e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4543      	cmp	r3, r8
 8004e74:	dcf1      	bgt.n	8004e5a <_printf_float+0x3fe>
 8004e76:	4653      	mov	r3, sl
 8004e78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e7c:	e6de      	b.n	8004c3c <_printf_float+0x1e0>
 8004e7e:	f04f 0800 	mov.w	r8, #0
 8004e82:	f104 091a 	add.w	r9, r4, #26
 8004e86:	e7f2      	b.n	8004e6e <_printf_float+0x412>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4642      	mov	r2, r8
 8004e8c:	e7df      	b.n	8004e4e <_printf_float+0x3f2>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	464a      	mov	r2, r9
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f43f ae3a 	beq.w	8004b12 <_printf_float+0xb6>
 8004e9e:	f108 0801 	add.w	r8, r8, #1
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ea6:	1a5b      	subs	r3, r3, r1
 8004ea8:	4543      	cmp	r3, r8
 8004eaa:	dcf0      	bgt.n	8004e8e <_printf_float+0x432>
 8004eac:	e6fb      	b.n	8004ca6 <_printf_float+0x24a>
 8004eae:	f04f 0800 	mov.w	r8, #0
 8004eb2:	f104 0919 	add.w	r9, r4, #25
 8004eb6:	e7f4      	b.n	8004ea2 <_printf_float+0x446>

08004eb8 <_printf_common>:
 8004eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	4699      	mov	r9, r3
 8004ec0:	688a      	ldr	r2, [r1, #8]
 8004ec2:	690b      	ldr	r3, [r1, #16]
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	bfb8      	it	lt
 8004eca:	4613      	movlt	r3, r2
 8004ecc:	6033      	str	r3, [r6, #0]
 8004ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed8:	b10a      	cbz	r2, 8004ede <_printf_common+0x26>
 8004eda:	3301      	adds	r3, #1
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	0699      	lsls	r1, r3, #26
 8004ee2:	bf42      	ittt	mi
 8004ee4:	6833      	ldrmi	r3, [r6, #0]
 8004ee6:	3302      	addmi	r3, #2
 8004ee8:	6033      	strmi	r3, [r6, #0]
 8004eea:	6825      	ldr	r5, [r4, #0]
 8004eec:	f015 0506 	ands.w	r5, r5, #6
 8004ef0:	d106      	bne.n	8004f00 <_printf_common+0x48>
 8004ef2:	f104 0a19 	add.w	sl, r4, #25
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	6832      	ldr	r2, [r6, #0]
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dc2b      	bgt.n	8004f58 <_printf_common+0xa0>
 8004f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f04:	1e13      	subs	r3, r2, #0
 8004f06:	6822      	ldr	r2, [r4, #0]
 8004f08:	bf18      	it	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	0692      	lsls	r2, r2, #26
 8004f0e:	d430      	bmi.n	8004f72 <_printf_common+0xba>
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f18:	47c0      	blx	r8
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d023      	beq.n	8004f66 <_printf_common+0xae>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	6922      	ldr	r2, [r4, #16]
 8004f22:	f003 0306 	and.w	r3, r3, #6
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	bf14      	ite	ne
 8004f2a:	2500      	movne	r5, #0
 8004f2c:	6833      	ldreq	r3, [r6, #0]
 8004f2e:	f04f 0600 	mov.w	r6, #0
 8004f32:	bf08      	it	eq
 8004f34:	68e5      	ldreq	r5, [r4, #12]
 8004f36:	f104 041a 	add.w	r4, r4, #26
 8004f3a:	bf08      	it	eq
 8004f3c:	1aed      	subeq	r5, r5, r3
 8004f3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f42:	bf08      	it	eq
 8004f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	bfc4      	itt	gt
 8004f4c:	1a9b      	subgt	r3, r3, r2
 8004f4e:	18ed      	addgt	r5, r5, r3
 8004f50:	42b5      	cmp	r5, r6
 8004f52:	d11a      	bne.n	8004f8a <_printf_common+0xd2>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e008      	b.n	8004f6a <_printf_common+0xb2>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4652      	mov	r2, sl
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4638      	mov	r0, r7
 8004f60:	47c0      	blx	r8
 8004f62:	3001      	adds	r0, #1
 8004f64:	d103      	bne.n	8004f6e <_printf_common+0xb6>
 8004f66:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	3501      	adds	r5, #1
 8004f70:	e7c1      	b.n	8004ef6 <_printf_common+0x3e>
 8004f72:	2030      	movs	r0, #48	; 0x30
 8004f74:	18e1      	adds	r1, r4, r3
 8004f76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f80:	4422      	add	r2, r4
 8004f82:	3302      	adds	r3, #2
 8004f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f88:	e7c2      	b.n	8004f10 <_printf_common+0x58>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4638      	mov	r0, r7
 8004f92:	47c0      	blx	r8
 8004f94:	3001      	adds	r0, #1
 8004f96:	d0e6      	beq.n	8004f66 <_printf_common+0xae>
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7d9      	b.n	8004f50 <_printf_common+0x98>

08004f9c <_printf_i>:
 8004f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	7e0f      	ldrb	r7, [r1, #24]
 8004fa2:	4691      	mov	r9, r2
 8004fa4:	2f78      	cmp	r7, #120	; 0x78
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	469a      	mov	sl, r3
 8004fac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fb2:	d807      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fb4:	2f62      	cmp	r7, #98	; 0x62
 8004fb6:	d80a      	bhi.n	8004fce <_printf_i+0x32>
 8004fb8:	2f00      	cmp	r7, #0
 8004fba:	f000 80d5 	beq.w	8005168 <_printf_i+0x1cc>
 8004fbe:	2f58      	cmp	r7, #88	; 0x58
 8004fc0:	f000 80c1 	beq.w	8005146 <_printf_i+0x1aa>
 8004fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fcc:	e03a      	b.n	8005044 <_printf_i+0xa8>
 8004fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fd2:	2b15      	cmp	r3, #21
 8004fd4:	d8f6      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fd6:	a101      	add	r1, pc, #4	; (adr r1, 8004fdc <_printf_i+0x40>)
 8004fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fdc:	08005035 	.word	0x08005035
 8004fe0:	08005049 	.word	0x08005049
 8004fe4:	08004fc5 	.word	0x08004fc5
 8004fe8:	08004fc5 	.word	0x08004fc5
 8004fec:	08004fc5 	.word	0x08004fc5
 8004ff0:	08004fc5 	.word	0x08004fc5
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08004fc5 	.word	0x08004fc5
 8004ffc:	08004fc5 	.word	0x08004fc5
 8005000:	08004fc5 	.word	0x08004fc5
 8005004:	08004fc5 	.word	0x08004fc5
 8005008:	0800514f 	.word	0x0800514f
 800500c:	08005075 	.word	0x08005075
 8005010:	08005109 	.word	0x08005109
 8005014:	08004fc5 	.word	0x08004fc5
 8005018:	08004fc5 	.word	0x08004fc5
 800501c:	08005171 	.word	0x08005171
 8005020:	08004fc5 	.word	0x08004fc5
 8005024:	08005075 	.word	0x08005075
 8005028:	08004fc5 	.word	0x08004fc5
 800502c:	08004fc5 	.word	0x08004fc5
 8005030:	08005111 	.word	0x08005111
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	602a      	str	r2, [r5, #0]
 800503c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005044:	2301      	movs	r3, #1
 8005046:	e0a0      	b.n	800518a <_printf_i+0x1ee>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	0607      	lsls	r7, r0, #24
 800504e:	f103 0104 	add.w	r1, r3, #4
 8005052:	6029      	str	r1, [r5, #0]
 8005054:	d501      	bpl.n	800505a <_printf_i+0xbe>
 8005056:	681e      	ldr	r6, [r3, #0]
 8005058:	e003      	b.n	8005062 <_printf_i+0xc6>
 800505a:	0646      	lsls	r6, r0, #25
 800505c:	d5fb      	bpl.n	8005056 <_printf_i+0xba>
 800505e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005062:	2e00      	cmp	r6, #0
 8005064:	da03      	bge.n	800506e <_printf_i+0xd2>
 8005066:	232d      	movs	r3, #45	; 0x2d
 8005068:	4276      	negs	r6, r6
 800506a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506e:	230a      	movs	r3, #10
 8005070:	4859      	ldr	r0, [pc, #356]	; (80051d8 <_printf_i+0x23c>)
 8005072:	e012      	b.n	800509a <_printf_i+0xfe>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	6029      	str	r1, [r5, #0]
 800507c:	0605      	lsls	r5, r0, #24
 800507e:	d501      	bpl.n	8005084 <_printf_i+0xe8>
 8005080:	681e      	ldr	r6, [r3, #0]
 8005082:	e002      	b.n	800508a <_printf_i+0xee>
 8005084:	0641      	lsls	r1, r0, #25
 8005086:	d5fb      	bpl.n	8005080 <_printf_i+0xe4>
 8005088:	881e      	ldrh	r6, [r3, #0]
 800508a:	2f6f      	cmp	r7, #111	; 0x6f
 800508c:	bf0c      	ite	eq
 800508e:	2308      	moveq	r3, #8
 8005090:	230a      	movne	r3, #10
 8005092:	4851      	ldr	r0, [pc, #324]	; (80051d8 <_printf_i+0x23c>)
 8005094:	2100      	movs	r1, #0
 8005096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800509a:	6865      	ldr	r5, [r4, #4]
 800509c:	2d00      	cmp	r5, #0
 800509e:	bfa8      	it	ge
 80050a0:	6821      	ldrge	r1, [r4, #0]
 80050a2:	60a5      	str	r5, [r4, #8]
 80050a4:	bfa4      	itt	ge
 80050a6:	f021 0104 	bicge.w	r1, r1, #4
 80050aa:	6021      	strge	r1, [r4, #0]
 80050ac:	b90e      	cbnz	r6, 80050b2 <_printf_i+0x116>
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	d04b      	beq.n	800514a <_printf_i+0x1ae>
 80050b2:	4615      	mov	r5, r2
 80050b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80050b8:	fb03 6711 	mls	r7, r3, r1, r6
 80050bc:	5dc7      	ldrb	r7, [r0, r7]
 80050be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050c2:	4637      	mov	r7, r6
 80050c4:	42bb      	cmp	r3, r7
 80050c6:	460e      	mov	r6, r1
 80050c8:	d9f4      	bls.n	80050b4 <_printf_i+0x118>
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d10b      	bne.n	80050e6 <_printf_i+0x14a>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	07de      	lsls	r6, r3, #31
 80050d2:	d508      	bpl.n	80050e6 <_printf_i+0x14a>
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	6861      	ldr	r1, [r4, #4]
 80050d8:	4299      	cmp	r1, r3
 80050da:	bfde      	ittt	le
 80050dc:	2330      	movle	r3, #48	; 0x30
 80050de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050e6:	1b52      	subs	r2, r2, r5
 80050e8:	6122      	str	r2, [r4, #16]
 80050ea:	464b      	mov	r3, r9
 80050ec:	4621      	mov	r1, r4
 80050ee:	4640      	mov	r0, r8
 80050f0:	f8cd a000 	str.w	sl, [sp]
 80050f4:	aa03      	add	r2, sp, #12
 80050f6:	f7ff fedf 	bl	8004eb8 <_printf_common>
 80050fa:	3001      	adds	r0, #1
 80050fc:	d14a      	bne.n	8005194 <_printf_i+0x1f8>
 80050fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005102:	b004      	add	sp, #16
 8005104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f043 0320 	orr.w	r3, r3, #32
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	2778      	movs	r7, #120	; 0x78
 8005112:	4832      	ldr	r0, [pc, #200]	; (80051dc <_printf_i+0x240>)
 8005114:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	6829      	ldr	r1, [r5, #0]
 800511c:	061f      	lsls	r7, r3, #24
 800511e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005122:	d402      	bmi.n	800512a <_printf_i+0x18e>
 8005124:	065f      	lsls	r7, r3, #25
 8005126:	bf48      	it	mi
 8005128:	b2b6      	uxthmi	r6, r6
 800512a:	07df      	lsls	r7, r3, #31
 800512c:	bf48      	it	mi
 800512e:	f043 0320 	orrmi.w	r3, r3, #32
 8005132:	6029      	str	r1, [r5, #0]
 8005134:	bf48      	it	mi
 8005136:	6023      	strmi	r3, [r4, #0]
 8005138:	b91e      	cbnz	r6, 8005142 <_printf_i+0x1a6>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f023 0320 	bic.w	r3, r3, #32
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	2310      	movs	r3, #16
 8005144:	e7a6      	b.n	8005094 <_printf_i+0xf8>
 8005146:	4824      	ldr	r0, [pc, #144]	; (80051d8 <_printf_i+0x23c>)
 8005148:	e7e4      	b.n	8005114 <_printf_i+0x178>
 800514a:	4615      	mov	r5, r2
 800514c:	e7bd      	b.n	80050ca <_printf_i+0x12e>
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	6826      	ldr	r6, [r4, #0]
 8005152:	1d18      	adds	r0, r3, #4
 8005154:	6961      	ldr	r1, [r4, #20]
 8005156:	6028      	str	r0, [r5, #0]
 8005158:	0635      	lsls	r5, r6, #24
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	d501      	bpl.n	8005162 <_printf_i+0x1c6>
 800515e:	6019      	str	r1, [r3, #0]
 8005160:	e002      	b.n	8005168 <_printf_i+0x1cc>
 8005162:	0670      	lsls	r0, r6, #25
 8005164:	d5fb      	bpl.n	800515e <_printf_i+0x1c2>
 8005166:	8019      	strh	r1, [r3, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	4615      	mov	r5, r2
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	e7bc      	b.n	80050ea <_printf_i+0x14e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	2100      	movs	r1, #0
 8005174:	1d1a      	adds	r2, r3, #4
 8005176:	602a      	str	r2, [r5, #0]
 8005178:	681d      	ldr	r5, [r3, #0]
 800517a:	6862      	ldr	r2, [r4, #4]
 800517c:	4628      	mov	r0, r5
 800517e:	f000 fac4 	bl	800570a <memchr>
 8005182:	b108      	cbz	r0, 8005188 <_printf_i+0x1ec>
 8005184:	1b40      	subs	r0, r0, r5
 8005186:	6060      	str	r0, [r4, #4]
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	2300      	movs	r3, #0
 800518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005192:	e7aa      	b.n	80050ea <_printf_i+0x14e>
 8005194:	462a      	mov	r2, r5
 8005196:	4649      	mov	r1, r9
 8005198:	4640      	mov	r0, r8
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	47d0      	blx	sl
 800519e:	3001      	adds	r0, #1
 80051a0:	d0ad      	beq.n	80050fe <_printf_i+0x162>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	079b      	lsls	r3, r3, #30
 80051a6:	d413      	bmi.n	80051d0 <_printf_i+0x234>
 80051a8:	68e0      	ldr	r0, [r4, #12]
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	4298      	cmp	r0, r3
 80051ae:	bfb8      	it	lt
 80051b0:	4618      	movlt	r0, r3
 80051b2:	e7a6      	b.n	8005102 <_printf_i+0x166>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4632      	mov	r2, r6
 80051b8:	4649      	mov	r1, r9
 80051ba:	4640      	mov	r0, r8
 80051bc:	47d0      	blx	sl
 80051be:	3001      	adds	r0, #1
 80051c0:	d09d      	beq.n	80050fe <_printf_i+0x162>
 80051c2:	3501      	adds	r5, #1
 80051c4:	68e3      	ldr	r3, [r4, #12]
 80051c6:	9903      	ldr	r1, [sp, #12]
 80051c8:	1a5b      	subs	r3, r3, r1
 80051ca:	42ab      	cmp	r3, r5
 80051cc:	dcf2      	bgt.n	80051b4 <_printf_i+0x218>
 80051ce:	e7eb      	b.n	80051a8 <_printf_i+0x20c>
 80051d0:	2500      	movs	r5, #0
 80051d2:	f104 0619 	add.w	r6, r4, #25
 80051d6:	e7f5      	b.n	80051c4 <_printf_i+0x228>
 80051d8:	0800ab68 	.word	0x0800ab68
 80051dc:	0800ab79 	.word	0x0800ab79

080051e0 <std>:
 80051e0:	2300      	movs	r3, #0
 80051e2:	b510      	push	{r4, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ee:	6083      	str	r3, [r0, #8]
 80051f0:	8181      	strh	r1, [r0, #12]
 80051f2:	6643      	str	r3, [r0, #100]	; 0x64
 80051f4:	81c2      	strh	r2, [r0, #14]
 80051f6:	6183      	str	r3, [r0, #24]
 80051f8:	4619      	mov	r1, r3
 80051fa:	2208      	movs	r2, #8
 80051fc:	305c      	adds	r0, #92	; 0x5c
 80051fe:	f000 fa05 	bl	800560c <memset>
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <std+0x58>)
 8005204:	6224      	str	r4, [r4, #32]
 8005206:	6263      	str	r3, [r4, #36]	; 0x24
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <std+0x5c>)
 800520a:	62a3      	str	r3, [r4, #40]	; 0x28
 800520c:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <std+0x60>)
 800520e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <std+0x64>)
 8005212:	6323      	str	r3, [r4, #48]	; 0x30
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <std+0x68>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d006      	beq.n	8005228 <std+0x48>
 800521a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800521e:	4294      	cmp	r4, r2
 8005220:	d002      	beq.n	8005228 <std+0x48>
 8005222:	33d0      	adds	r3, #208	; 0xd0
 8005224:	429c      	cmp	r4, r3
 8005226:	d105      	bne.n	8005234 <std+0x54>
 8005228:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005230:	f000 ba68 	b.w	8005704 <__retarget_lock_init_recursive>
 8005234:	bd10      	pop	{r4, pc}
 8005236:	bf00      	nop
 8005238:	0800545d 	.word	0x0800545d
 800523c:	0800547f 	.word	0x0800547f
 8005240:	080054b7 	.word	0x080054b7
 8005244:	080054db 	.word	0x080054db
 8005248:	200002f8 	.word	0x200002f8

0800524c <stdio_exit_handler>:
 800524c:	4a02      	ldr	r2, [pc, #8]	; (8005258 <stdio_exit_handler+0xc>)
 800524e:	4903      	ldr	r1, [pc, #12]	; (800525c <stdio_exit_handler+0x10>)
 8005250:	4803      	ldr	r0, [pc, #12]	; (8005260 <stdio_exit_handler+0x14>)
 8005252:	f000 b869 	b.w	8005328 <_fwalk_sglue>
 8005256:	bf00      	nop
 8005258:	2000000c 	.word	0x2000000c
 800525c:	0800709d 	.word	0x0800709d
 8005260:	20000018 	.word	0x20000018

08005264 <cleanup_stdio>:
 8005264:	6841      	ldr	r1, [r0, #4]
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <cleanup_stdio+0x34>)
 8005268:	b510      	push	{r4, lr}
 800526a:	4299      	cmp	r1, r3
 800526c:	4604      	mov	r4, r0
 800526e:	d001      	beq.n	8005274 <cleanup_stdio+0x10>
 8005270:	f001 ff14 	bl	800709c <_fflush_r>
 8005274:	68a1      	ldr	r1, [r4, #8]
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <cleanup_stdio+0x38>)
 8005278:	4299      	cmp	r1, r3
 800527a:	d002      	beq.n	8005282 <cleanup_stdio+0x1e>
 800527c:	4620      	mov	r0, r4
 800527e:	f001 ff0d 	bl	800709c <_fflush_r>
 8005282:	68e1      	ldr	r1, [r4, #12]
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <cleanup_stdio+0x3c>)
 8005286:	4299      	cmp	r1, r3
 8005288:	d004      	beq.n	8005294 <cleanup_stdio+0x30>
 800528a:	4620      	mov	r0, r4
 800528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005290:	f001 bf04 	b.w	800709c <_fflush_r>
 8005294:	bd10      	pop	{r4, pc}
 8005296:	bf00      	nop
 8005298:	200002f8 	.word	0x200002f8
 800529c:	20000360 	.word	0x20000360
 80052a0:	200003c8 	.word	0x200003c8

080052a4 <global_stdio_init.part.0>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <global_stdio_init.part.0+0x30>)
 80052a8:	4c0b      	ldr	r4, [pc, #44]	; (80052d8 <global_stdio_init.part.0+0x34>)
 80052aa:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <global_stdio_init.part.0+0x38>)
 80052ac:	4620      	mov	r0, r4
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	2104      	movs	r1, #4
 80052b2:	2200      	movs	r2, #0
 80052b4:	f7ff ff94 	bl	80051e0 <std>
 80052b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052bc:	2201      	movs	r2, #1
 80052be:	2109      	movs	r1, #9
 80052c0:	f7ff ff8e 	bl	80051e0 <std>
 80052c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052c8:	2202      	movs	r2, #2
 80052ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ce:	2112      	movs	r1, #18
 80052d0:	f7ff bf86 	b.w	80051e0 <std>
 80052d4:	20000430 	.word	0x20000430
 80052d8:	200002f8 	.word	0x200002f8
 80052dc:	0800524d 	.word	0x0800524d

080052e0 <__sfp_lock_acquire>:
 80052e0:	4801      	ldr	r0, [pc, #4]	; (80052e8 <__sfp_lock_acquire+0x8>)
 80052e2:	f000 ba10 	b.w	8005706 <__retarget_lock_acquire_recursive>
 80052e6:	bf00      	nop
 80052e8:	20000439 	.word	0x20000439

080052ec <__sfp_lock_release>:
 80052ec:	4801      	ldr	r0, [pc, #4]	; (80052f4 <__sfp_lock_release+0x8>)
 80052ee:	f000 ba0b 	b.w	8005708 <__retarget_lock_release_recursive>
 80052f2:	bf00      	nop
 80052f4:	20000439 	.word	0x20000439

080052f8 <__sinit>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	4604      	mov	r4, r0
 80052fc:	f7ff fff0 	bl	80052e0 <__sfp_lock_acquire>
 8005300:	6a23      	ldr	r3, [r4, #32]
 8005302:	b11b      	cbz	r3, 800530c <__sinit+0x14>
 8005304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005308:	f7ff bff0 	b.w	80052ec <__sfp_lock_release>
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <__sinit+0x28>)
 800530e:	6223      	str	r3, [r4, #32]
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <__sinit+0x2c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f5      	bne.n	8005304 <__sinit+0xc>
 8005318:	f7ff ffc4 	bl	80052a4 <global_stdio_init.part.0>
 800531c:	e7f2      	b.n	8005304 <__sinit+0xc>
 800531e:	bf00      	nop
 8005320:	08005265 	.word	0x08005265
 8005324:	20000430 	.word	0x20000430

08005328 <_fwalk_sglue>:
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	4607      	mov	r7, r0
 800532e:	4688      	mov	r8, r1
 8005330:	4614      	mov	r4, r2
 8005332:	2600      	movs	r6, #0
 8005334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005338:	f1b9 0901 	subs.w	r9, r9, #1
 800533c:	d505      	bpl.n	800534a <_fwalk_sglue+0x22>
 800533e:	6824      	ldr	r4, [r4, #0]
 8005340:	2c00      	cmp	r4, #0
 8005342:	d1f7      	bne.n	8005334 <_fwalk_sglue+0xc>
 8005344:	4630      	mov	r0, r6
 8005346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534a:	89ab      	ldrh	r3, [r5, #12]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d907      	bls.n	8005360 <_fwalk_sglue+0x38>
 8005350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005354:	3301      	adds	r3, #1
 8005356:	d003      	beq.n	8005360 <_fwalk_sglue+0x38>
 8005358:	4629      	mov	r1, r5
 800535a:	4638      	mov	r0, r7
 800535c:	47c0      	blx	r8
 800535e:	4306      	orrs	r6, r0
 8005360:	3568      	adds	r5, #104	; 0x68
 8005362:	e7e9      	b.n	8005338 <_fwalk_sglue+0x10>

08005364 <_puts_r>:
 8005364:	6a03      	ldr	r3, [r0, #32]
 8005366:	b570      	push	{r4, r5, r6, lr}
 8005368:	4605      	mov	r5, r0
 800536a:	460e      	mov	r6, r1
 800536c:	6884      	ldr	r4, [r0, #8]
 800536e:	b90b      	cbnz	r3, 8005374 <_puts_r+0x10>
 8005370:	f7ff ffc2 	bl	80052f8 <__sinit>
 8005374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005376:	07db      	lsls	r3, r3, #31
 8005378:	d405      	bmi.n	8005386 <_puts_r+0x22>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	0598      	lsls	r0, r3, #22
 800537e:	d402      	bmi.n	8005386 <_puts_r+0x22>
 8005380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005382:	f000 f9c0 	bl	8005706 <__retarget_lock_acquire_recursive>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	0719      	lsls	r1, r3, #28
 800538a:	d513      	bpl.n	80053b4 <_puts_r+0x50>
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	b18b      	cbz	r3, 80053b4 <_puts_r+0x50>
 8005390:	3e01      	subs	r6, #1
 8005392:	68a3      	ldr	r3, [r4, #8]
 8005394:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005398:	3b01      	subs	r3, #1
 800539a:	60a3      	str	r3, [r4, #8]
 800539c:	b9e9      	cbnz	r1, 80053da <_puts_r+0x76>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da2e      	bge.n	8005400 <_puts_r+0x9c>
 80053a2:	4622      	mov	r2, r4
 80053a4:	210a      	movs	r1, #10
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 f89b 	bl	80054e2 <__swbuf_r>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d007      	beq.n	80053c0 <_puts_r+0x5c>
 80053b0:	250a      	movs	r5, #10
 80053b2:	e007      	b.n	80053c4 <_puts_r+0x60>
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f8d0 	bl	800555c <__swsetup_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0e7      	beq.n	8005390 <_puts_r+0x2c>
 80053c0:	f04f 35ff 	mov.w	r5, #4294967295
 80053c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053c6:	07da      	lsls	r2, r3, #31
 80053c8:	d405      	bmi.n	80053d6 <_puts_r+0x72>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	059b      	lsls	r3, r3, #22
 80053ce:	d402      	bmi.n	80053d6 <_puts_r+0x72>
 80053d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d2:	f000 f999 	bl	8005708 <__retarget_lock_release_recursive>
 80053d6:	4628      	mov	r0, r5
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	2b00      	cmp	r3, #0
 80053dc:	da04      	bge.n	80053e8 <_puts_r+0x84>
 80053de:	69a2      	ldr	r2, [r4, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	dc06      	bgt.n	80053f2 <_puts_r+0x8e>
 80053e4:	290a      	cmp	r1, #10
 80053e6:	d004      	beq.n	80053f2 <_puts_r+0x8e>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	6022      	str	r2, [r4, #0]
 80053ee:	7019      	strb	r1, [r3, #0]
 80053f0:	e7cf      	b.n	8005392 <_puts_r+0x2e>
 80053f2:	4622      	mov	r2, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 f874 	bl	80054e2 <__swbuf_r>
 80053fa:	3001      	adds	r0, #1
 80053fc:	d1c9      	bne.n	8005392 <_puts_r+0x2e>
 80053fe:	e7df      	b.n	80053c0 <_puts_r+0x5c>
 8005400:	250a      	movs	r5, #10
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	6022      	str	r2, [r4, #0]
 8005408:	701d      	strb	r5, [r3, #0]
 800540a:	e7db      	b.n	80053c4 <_puts_r+0x60>

0800540c <puts>:
 800540c:	4b02      	ldr	r3, [pc, #8]	; (8005418 <puts+0xc>)
 800540e:	4601      	mov	r1, r0
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	f7ff bfa7 	b.w	8005364 <_puts_r>
 8005416:	bf00      	nop
 8005418:	20000064 	.word	0x20000064

0800541c <siprintf>:
 800541c:	b40e      	push	{r1, r2, r3}
 800541e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005422:	b500      	push	{lr}
 8005424:	b09c      	sub	sp, #112	; 0x70
 8005426:	ab1d      	add	r3, sp, #116	; 0x74
 8005428:	9002      	str	r0, [sp, #8]
 800542a:	9006      	str	r0, [sp, #24]
 800542c:	9107      	str	r1, [sp, #28]
 800542e:	9104      	str	r1, [sp, #16]
 8005430:	4808      	ldr	r0, [pc, #32]	; (8005454 <siprintf+0x38>)
 8005432:	4909      	ldr	r1, [pc, #36]	; (8005458 <siprintf+0x3c>)
 8005434:	f853 2b04 	ldr.w	r2, [r3], #4
 8005438:	9105      	str	r1, [sp, #20]
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	a902      	add	r1, sp, #8
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	f001 fcac 	bl	8006d9c <_svfiprintf_r>
 8005444:	2200      	movs	r2, #0
 8005446:	9b02      	ldr	r3, [sp, #8]
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	b01c      	add	sp, #112	; 0x70
 800544c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005450:	b003      	add	sp, #12
 8005452:	4770      	bx	lr
 8005454:	20000064 	.word	0x20000064
 8005458:	ffff0208 	.word	0xffff0208

0800545c <__sread>:
 800545c:	b510      	push	{r4, lr}
 800545e:	460c      	mov	r4, r1
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	f000 f900 	bl	8005668 <_read_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	bfab      	itete	ge
 800546c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800546e:	89a3      	ldrhlt	r3, [r4, #12]
 8005470:	181b      	addge	r3, r3, r0
 8005472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005476:	bfac      	ite	ge
 8005478:	6563      	strge	r3, [r4, #84]	; 0x54
 800547a:	81a3      	strhlt	r3, [r4, #12]
 800547c:	bd10      	pop	{r4, pc}

0800547e <__swrite>:
 800547e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005482:	461f      	mov	r7, r3
 8005484:	898b      	ldrh	r3, [r1, #12]
 8005486:	4605      	mov	r5, r0
 8005488:	05db      	lsls	r3, r3, #23
 800548a:	460c      	mov	r4, r1
 800548c:	4616      	mov	r6, r2
 800548e:	d505      	bpl.n	800549c <__swrite+0x1e>
 8005490:	2302      	movs	r3, #2
 8005492:	2200      	movs	r2, #0
 8005494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005498:	f000 f8d4 	bl	8005644 <_lseek_r>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	4632      	mov	r2, r6
 80054a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	4628      	mov	r0, r5
 80054a8:	463b      	mov	r3, r7
 80054aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b2:	f000 b8eb 	b.w	800568c <_write_r>

080054b6 <__sseek>:
 80054b6:	b510      	push	{r4, lr}
 80054b8:	460c      	mov	r4, r1
 80054ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054be:	f000 f8c1 	bl	8005644 <_lseek_r>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	bf15      	itete	ne
 80054c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054d2:	81a3      	strheq	r3, [r4, #12]
 80054d4:	bf18      	it	ne
 80054d6:	81a3      	strhne	r3, [r4, #12]
 80054d8:	bd10      	pop	{r4, pc}

080054da <__sclose>:
 80054da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054de:	f000 b8a1 	b.w	8005624 <_close_r>

080054e2 <__swbuf_r>:
 80054e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e4:	460e      	mov	r6, r1
 80054e6:	4614      	mov	r4, r2
 80054e8:	4605      	mov	r5, r0
 80054ea:	b118      	cbz	r0, 80054f4 <__swbuf_r+0x12>
 80054ec:	6a03      	ldr	r3, [r0, #32]
 80054ee:	b90b      	cbnz	r3, 80054f4 <__swbuf_r+0x12>
 80054f0:	f7ff ff02 	bl	80052f8 <__sinit>
 80054f4:	69a3      	ldr	r3, [r4, #24]
 80054f6:	60a3      	str	r3, [r4, #8]
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	071a      	lsls	r2, r3, #28
 80054fc:	d525      	bpl.n	800554a <__swbuf_r+0x68>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	b31b      	cbz	r3, 800554a <__swbuf_r+0x68>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	6922      	ldr	r2, [r4, #16]
 8005506:	b2f6      	uxtb	r6, r6
 8005508:	1a98      	subs	r0, r3, r2
 800550a:	6963      	ldr	r3, [r4, #20]
 800550c:	4637      	mov	r7, r6
 800550e:	4283      	cmp	r3, r0
 8005510:	dc04      	bgt.n	800551c <__swbuf_r+0x3a>
 8005512:	4621      	mov	r1, r4
 8005514:	4628      	mov	r0, r5
 8005516:	f001 fdc1 	bl	800709c <_fflush_r>
 800551a:	b9e0      	cbnz	r0, 8005556 <__swbuf_r+0x74>
 800551c:	68a3      	ldr	r3, [r4, #8]
 800551e:	3b01      	subs	r3, #1
 8005520:	60a3      	str	r3, [r4, #8]
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	6022      	str	r2, [r4, #0]
 8005528:	701e      	strb	r6, [r3, #0]
 800552a:	6962      	ldr	r2, [r4, #20]
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	429a      	cmp	r2, r3
 8005530:	d004      	beq.n	800553c <__swbuf_r+0x5a>
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	07db      	lsls	r3, r3, #31
 8005536:	d506      	bpl.n	8005546 <__swbuf_r+0x64>
 8005538:	2e0a      	cmp	r6, #10
 800553a:	d104      	bne.n	8005546 <__swbuf_r+0x64>
 800553c:	4621      	mov	r1, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f001 fdac 	bl	800709c <_fflush_r>
 8005544:	b938      	cbnz	r0, 8005556 <__swbuf_r+0x74>
 8005546:	4638      	mov	r0, r7
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554a:	4621      	mov	r1, r4
 800554c:	4628      	mov	r0, r5
 800554e:	f000 f805 	bl	800555c <__swsetup_r>
 8005552:	2800      	cmp	r0, #0
 8005554:	d0d5      	beq.n	8005502 <__swbuf_r+0x20>
 8005556:	f04f 37ff 	mov.w	r7, #4294967295
 800555a:	e7f4      	b.n	8005546 <__swbuf_r+0x64>

0800555c <__swsetup_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4b2a      	ldr	r3, [pc, #168]	; (8005608 <__swsetup_r+0xac>)
 8005560:	4605      	mov	r5, r0
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	460c      	mov	r4, r1
 8005566:	b118      	cbz	r0, 8005570 <__swsetup_r+0x14>
 8005568:	6a03      	ldr	r3, [r0, #32]
 800556a:	b90b      	cbnz	r3, 8005570 <__swsetup_r+0x14>
 800556c:	f7ff fec4 	bl	80052f8 <__sinit>
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005576:	0718      	lsls	r0, r3, #28
 8005578:	d422      	bmi.n	80055c0 <__swsetup_r+0x64>
 800557a:	06d9      	lsls	r1, r3, #27
 800557c:	d407      	bmi.n	800558e <__swsetup_r+0x32>
 800557e:	2309      	movs	r3, #9
 8005580:	602b      	str	r3, [r5, #0]
 8005582:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005586:	f04f 30ff 	mov.w	r0, #4294967295
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	e034      	b.n	80055f8 <__swsetup_r+0x9c>
 800558e:	0758      	lsls	r0, r3, #29
 8005590:	d512      	bpl.n	80055b8 <__swsetup_r+0x5c>
 8005592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005594:	b141      	cbz	r1, 80055a8 <__swsetup_r+0x4c>
 8005596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559a:	4299      	cmp	r1, r3
 800559c:	d002      	beq.n	80055a4 <__swsetup_r+0x48>
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 ff2e 	bl	8006400 <_free_r>
 80055a4:	2300      	movs	r3, #0
 80055a6:	6363      	str	r3, [r4, #52]	; 0x34
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	2300      	movs	r3, #0
 80055b2:	6063      	str	r3, [r4, #4]
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	f043 0308 	orr.w	r3, r3, #8
 80055be:	81a3      	strh	r3, [r4, #12]
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	b94b      	cbnz	r3, 80055d8 <__swsetup_r+0x7c>
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ce:	d003      	beq.n	80055d8 <__swsetup_r+0x7c>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	f001 fdaf 	bl	8007136 <__smakebuf_r>
 80055d8:	89a0      	ldrh	r0, [r4, #12]
 80055da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055de:	f010 0301 	ands.w	r3, r0, #1
 80055e2:	d00a      	beq.n	80055fa <__swsetup_r+0x9e>
 80055e4:	2300      	movs	r3, #0
 80055e6:	60a3      	str	r3, [r4, #8]
 80055e8:	6963      	ldr	r3, [r4, #20]
 80055ea:	425b      	negs	r3, r3
 80055ec:	61a3      	str	r3, [r4, #24]
 80055ee:	6923      	ldr	r3, [r4, #16]
 80055f0:	b943      	cbnz	r3, 8005604 <__swsetup_r+0xa8>
 80055f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055f6:	d1c4      	bne.n	8005582 <__swsetup_r+0x26>
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	0781      	lsls	r1, r0, #30
 80055fc:	bf58      	it	pl
 80055fe:	6963      	ldrpl	r3, [r4, #20]
 8005600:	60a3      	str	r3, [r4, #8]
 8005602:	e7f4      	b.n	80055ee <__swsetup_r+0x92>
 8005604:	2000      	movs	r0, #0
 8005606:	e7f7      	b.n	80055f8 <__swsetup_r+0x9c>
 8005608:	20000064 	.word	0x20000064

0800560c <memset>:
 800560c:	4603      	mov	r3, r0
 800560e:	4402      	add	r2, r0
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	f803 1b01 	strb.w	r1, [r3], #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <_localeconv_r>:
 800561c:	4800      	ldr	r0, [pc, #0]	; (8005620 <_localeconv_r+0x4>)
 800561e:	4770      	bx	lr
 8005620:	20000158 	.word	0x20000158

08005624 <_close_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	2300      	movs	r3, #0
 8005628:	4d05      	ldr	r5, [pc, #20]	; (8005640 <_close_r+0x1c>)
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	602b      	str	r3, [r5, #0]
 8005630:	f7fb fe4a 	bl	80012c8 <_close>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_close_r+0x1a>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_close_r+0x1a>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	20000434 	.word	0x20000434

08005644 <_lseek_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	4611      	mov	r1, r2
 800564c:	2200      	movs	r2, #0
 800564e:	4d05      	ldr	r5, [pc, #20]	; (8005664 <_lseek_r+0x20>)
 8005650:	602a      	str	r2, [r5, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f7fb fe5c 	bl	8001310 <_lseek>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_lseek_r+0x1e>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_lseek_r+0x1e>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	20000434 	.word	0x20000434

08005668 <_read_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	2200      	movs	r2, #0
 8005672:	4d05      	ldr	r5, [pc, #20]	; (8005688 <_read_r+0x20>)
 8005674:	602a      	str	r2, [r5, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f7fb fded 	bl	8001256 <_read>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_read_r+0x1e>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_read_r+0x1e>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	20000434 	.word	0x20000434

0800568c <_write_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	4611      	mov	r1, r2
 8005694:	2200      	movs	r2, #0
 8005696:	4d05      	ldr	r5, [pc, #20]	; (80056ac <_write_r+0x20>)
 8005698:	602a      	str	r2, [r5, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f7fb fdf8 	bl	8001290 <_write>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_write_r+0x1e>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_write_r+0x1e>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000434 	.word	0x20000434

080056b0 <__errno>:
 80056b0:	4b01      	ldr	r3, [pc, #4]	; (80056b8 <__errno+0x8>)
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20000064 	.word	0x20000064

080056bc <__libc_init_array>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	2600      	movs	r6, #0
 80056c0:	4d0c      	ldr	r5, [pc, #48]	; (80056f4 <__libc_init_array+0x38>)
 80056c2:	4c0d      	ldr	r4, [pc, #52]	; (80056f8 <__libc_init_array+0x3c>)
 80056c4:	1b64      	subs	r4, r4, r5
 80056c6:	10a4      	asrs	r4, r4, #2
 80056c8:	42a6      	cmp	r6, r4
 80056ca:	d109      	bne.n	80056e0 <__libc_init_array+0x24>
 80056cc:	f001 fff0 	bl	80076b0 <_init>
 80056d0:	2600      	movs	r6, #0
 80056d2:	4d0a      	ldr	r5, [pc, #40]	; (80056fc <__libc_init_array+0x40>)
 80056d4:	4c0a      	ldr	r4, [pc, #40]	; (8005700 <__libc_init_array+0x44>)
 80056d6:	1b64      	subs	r4, r4, r5
 80056d8:	10a4      	asrs	r4, r4, #2
 80056da:	42a6      	cmp	r6, r4
 80056dc:	d105      	bne.n	80056ea <__libc_init_array+0x2e>
 80056de:	bd70      	pop	{r4, r5, r6, pc}
 80056e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e4:	4798      	blx	r3
 80056e6:	3601      	adds	r6, #1
 80056e8:	e7ee      	b.n	80056c8 <__libc_init_array+0xc>
 80056ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ee:	4798      	blx	r3
 80056f0:	3601      	adds	r6, #1
 80056f2:	e7f2      	b.n	80056da <__libc_init_array+0x1e>
 80056f4:	0800aec4 	.word	0x0800aec4
 80056f8:	0800aec4 	.word	0x0800aec4
 80056fc:	0800aec4 	.word	0x0800aec4
 8005700:	0800aec8 	.word	0x0800aec8

08005704 <__retarget_lock_init_recursive>:
 8005704:	4770      	bx	lr

08005706 <__retarget_lock_acquire_recursive>:
 8005706:	4770      	bx	lr

08005708 <__retarget_lock_release_recursive>:
 8005708:	4770      	bx	lr

0800570a <memchr>:
 800570a:	4603      	mov	r3, r0
 800570c:	b510      	push	{r4, lr}
 800570e:	b2c9      	uxtb	r1, r1
 8005710:	4402      	add	r2, r0
 8005712:	4293      	cmp	r3, r2
 8005714:	4618      	mov	r0, r3
 8005716:	d101      	bne.n	800571c <memchr+0x12>
 8005718:	2000      	movs	r0, #0
 800571a:	e003      	b.n	8005724 <memchr+0x1a>
 800571c:	7804      	ldrb	r4, [r0, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	428c      	cmp	r4, r1
 8005722:	d1f6      	bne.n	8005712 <memchr+0x8>
 8005724:	bd10      	pop	{r4, pc}

08005726 <quorem>:
 8005726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572a:	6903      	ldr	r3, [r0, #16]
 800572c:	690c      	ldr	r4, [r1, #16]
 800572e:	4607      	mov	r7, r0
 8005730:	42a3      	cmp	r3, r4
 8005732:	db7f      	blt.n	8005834 <quorem+0x10e>
 8005734:	3c01      	subs	r4, #1
 8005736:	f100 0514 	add.w	r5, r0, #20
 800573a:	f101 0814 	add.w	r8, r1, #20
 800573e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800574c:	3301      	adds	r3, #1
 800574e:	429a      	cmp	r2, r3
 8005750:	fbb2 f6f3 	udiv	r6, r2, r3
 8005754:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800575c:	d331      	bcc.n	80057c2 <quorem+0x9c>
 800575e:	f04f 0e00 	mov.w	lr, #0
 8005762:	4640      	mov	r0, r8
 8005764:	46ac      	mov	ip, r5
 8005766:	46f2      	mov	sl, lr
 8005768:	f850 2b04 	ldr.w	r2, [r0], #4
 800576c:	b293      	uxth	r3, r2
 800576e:	fb06 e303 	mla	r3, r6, r3, lr
 8005772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005776:	0c1a      	lsrs	r2, r3, #16
 8005778:	b29b      	uxth	r3, r3
 800577a:	fb06 220e 	mla	r2, r6, lr, r2
 800577e:	ebaa 0303 	sub.w	r3, sl, r3
 8005782:	f8dc a000 	ldr.w	sl, [ip]
 8005786:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800578a:	fa1f fa8a 	uxth.w	sl, sl
 800578e:	4453      	add	r3, sl
 8005790:	f8dc a000 	ldr.w	sl, [ip]
 8005794:	b292      	uxth	r2, r2
 8005796:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800579a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800579e:	b29b      	uxth	r3, r3
 80057a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057a4:	4581      	cmp	r9, r0
 80057a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057aa:	f84c 3b04 	str.w	r3, [ip], #4
 80057ae:	d2db      	bcs.n	8005768 <quorem+0x42>
 80057b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80057b4:	b92b      	cbnz	r3, 80057c2 <quorem+0x9c>
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	3b04      	subs	r3, #4
 80057ba:	429d      	cmp	r5, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	d32d      	bcc.n	800581c <quorem+0xf6>
 80057c0:	613c      	str	r4, [r7, #16]
 80057c2:	4638      	mov	r0, r7
 80057c4:	f001 f992 	bl	8006aec <__mcmp>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	db23      	blt.n	8005814 <quorem+0xee>
 80057cc:	4629      	mov	r1, r5
 80057ce:	2000      	movs	r0, #0
 80057d0:	3601      	adds	r6, #1
 80057d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80057d6:	f8d1 c000 	ldr.w	ip, [r1]
 80057da:	b293      	uxth	r3, r2
 80057dc:	1ac3      	subs	r3, r0, r3
 80057de:	0c12      	lsrs	r2, r2, #16
 80057e0:	fa1f f08c 	uxth.w	r0, ip
 80057e4:	4403      	add	r3, r0
 80057e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80057ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f4:	45c1      	cmp	r9, r8
 80057f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057fa:	f841 3b04 	str.w	r3, [r1], #4
 80057fe:	d2e8      	bcs.n	80057d2 <quorem+0xac>
 8005800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005808:	b922      	cbnz	r2, 8005814 <quorem+0xee>
 800580a:	3b04      	subs	r3, #4
 800580c:	429d      	cmp	r5, r3
 800580e:	461a      	mov	r2, r3
 8005810:	d30a      	bcc.n	8005828 <quorem+0x102>
 8005812:	613c      	str	r4, [r7, #16]
 8005814:	4630      	mov	r0, r6
 8005816:	b003      	add	sp, #12
 8005818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	3b04      	subs	r3, #4
 8005820:	2a00      	cmp	r2, #0
 8005822:	d1cd      	bne.n	80057c0 <quorem+0x9a>
 8005824:	3c01      	subs	r4, #1
 8005826:	e7c8      	b.n	80057ba <quorem+0x94>
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	3b04      	subs	r3, #4
 800582c:	2a00      	cmp	r2, #0
 800582e:	d1f0      	bne.n	8005812 <quorem+0xec>
 8005830:	3c01      	subs	r4, #1
 8005832:	e7eb      	b.n	800580c <quorem+0xe6>
 8005834:	2000      	movs	r0, #0
 8005836:	e7ee      	b.n	8005816 <quorem+0xf0>

08005838 <_dtoa_r>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	4616      	mov	r6, r2
 800583e:	461f      	mov	r7, r3
 8005840:	69c4      	ldr	r4, [r0, #28]
 8005842:	b099      	sub	sp, #100	; 0x64
 8005844:	4605      	mov	r5, r0
 8005846:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800584a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800584e:	b974      	cbnz	r4, 800586e <_dtoa_r+0x36>
 8005850:	2010      	movs	r0, #16
 8005852:	f000 fe1d 	bl	8006490 <malloc>
 8005856:	4602      	mov	r2, r0
 8005858:	61e8      	str	r0, [r5, #28]
 800585a:	b920      	cbnz	r0, 8005866 <_dtoa_r+0x2e>
 800585c:	21ef      	movs	r1, #239	; 0xef
 800585e:	4bac      	ldr	r3, [pc, #688]	; (8005b10 <_dtoa_r+0x2d8>)
 8005860:	48ac      	ldr	r0, [pc, #688]	; (8005b14 <_dtoa_r+0x2dc>)
 8005862:	f001 fcff 	bl	8007264 <__assert_func>
 8005866:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800586a:	6004      	str	r4, [r0, #0]
 800586c:	60c4      	str	r4, [r0, #12]
 800586e:	69eb      	ldr	r3, [r5, #28]
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	b151      	cbz	r1, 800588a <_dtoa_r+0x52>
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	2301      	movs	r3, #1
 8005878:	4093      	lsls	r3, r2
 800587a:	604a      	str	r2, [r1, #4]
 800587c:	608b      	str	r3, [r1, #8]
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fefa 	bl	8006678 <_Bfree>
 8005884:	2200      	movs	r2, #0
 8005886:	69eb      	ldr	r3, [r5, #28]
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	1e3b      	subs	r3, r7, #0
 800588c:	bfaf      	iteee	ge
 800588e:	2300      	movge	r3, #0
 8005890:	2201      	movlt	r2, #1
 8005892:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005896:	9305      	strlt	r3, [sp, #20]
 8005898:	bfa8      	it	ge
 800589a:	f8c8 3000 	strge.w	r3, [r8]
 800589e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80058a2:	4b9d      	ldr	r3, [pc, #628]	; (8005b18 <_dtoa_r+0x2e0>)
 80058a4:	bfb8      	it	lt
 80058a6:	f8c8 2000 	strlt.w	r2, [r8]
 80058aa:	ea33 0309 	bics.w	r3, r3, r9
 80058ae:	d119      	bne.n	80058e4 <_dtoa_r+0xac>
 80058b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80058b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058bc:	4333      	orrs	r3, r6
 80058be:	f000 8589 	beq.w	80063d4 <_dtoa_r+0xb9c>
 80058c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058c4:	b953      	cbnz	r3, 80058dc <_dtoa_r+0xa4>
 80058c6:	4b95      	ldr	r3, [pc, #596]	; (8005b1c <_dtoa_r+0x2e4>)
 80058c8:	e023      	b.n	8005912 <_dtoa_r+0xda>
 80058ca:	4b95      	ldr	r3, [pc, #596]	; (8005b20 <_dtoa_r+0x2e8>)
 80058cc:	9303      	str	r3, [sp, #12]
 80058ce:	3308      	adds	r3, #8
 80058d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	9803      	ldr	r0, [sp, #12]
 80058d6:	b019      	add	sp, #100	; 0x64
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	4b8f      	ldr	r3, [pc, #572]	; (8005b1c <_dtoa_r+0x2e4>)
 80058de:	9303      	str	r3, [sp, #12]
 80058e0:	3303      	adds	r3, #3
 80058e2:	e7f5      	b.n	80058d0 <_dtoa_r+0x98>
 80058e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80058ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058f0:	2200      	movs	r2, #0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f7fb f8c4 	bl	8000a80 <__aeabi_dcmpeq>
 80058f8:	4680      	mov	r8, r0
 80058fa:	b160      	cbz	r0, 8005916 <_dtoa_r+0xde>
 80058fc:	2301      	movs	r3, #1
 80058fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8562 	beq.w	80063ce <_dtoa_r+0xb96>
 800590a:	4b86      	ldr	r3, [pc, #536]	; (8005b24 <_dtoa_r+0x2ec>)
 800590c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	3b01      	subs	r3, #1
 8005912:	9303      	str	r3, [sp, #12]
 8005914:	e7de      	b.n	80058d4 <_dtoa_r+0x9c>
 8005916:	ab16      	add	r3, sp, #88	; 0x58
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	ab17      	add	r3, sp, #92	; 0x5c
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	4628      	mov	r0, r5
 8005920:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005924:	f001 f98a 	bl	8006c3c <__d2b>
 8005928:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800592c:	4682      	mov	sl, r0
 800592e:	2c00      	cmp	r4, #0
 8005930:	d07e      	beq.n	8005a30 <_dtoa_r+0x1f8>
 8005932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005938:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800593c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005940:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005944:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005948:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800594c:	4619      	mov	r1, r3
 800594e:	2200      	movs	r2, #0
 8005950:	4b75      	ldr	r3, [pc, #468]	; (8005b28 <_dtoa_r+0x2f0>)
 8005952:	f7fa fc75 	bl	8000240 <__aeabi_dsub>
 8005956:	a368      	add	r3, pc, #416	; (adr r3, 8005af8 <_dtoa_r+0x2c0>)
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f7fa fe28 	bl	80005b0 <__aeabi_dmul>
 8005960:	a367      	add	r3, pc, #412	; (adr r3, 8005b00 <_dtoa_r+0x2c8>)
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f7fa fc6d 	bl	8000244 <__adddf3>
 800596a:	4606      	mov	r6, r0
 800596c:	4620      	mov	r0, r4
 800596e:	460f      	mov	r7, r1
 8005970:	f7fa fdb4 	bl	80004dc <__aeabi_i2d>
 8005974:	a364      	add	r3, pc, #400	; (adr r3, 8005b08 <_dtoa_r+0x2d0>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fe19 	bl	80005b0 <__aeabi_dmul>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4630      	mov	r0, r6
 8005984:	4639      	mov	r1, r7
 8005986:	f7fa fc5d 	bl	8000244 <__adddf3>
 800598a:	4606      	mov	r6, r0
 800598c:	460f      	mov	r7, r1
 800598e:	f7fb f8bf 	bl	8000b10 <__aeabi_d2iz>
 8005992:	2200      	movs	r2, #0
 8005994:	4683      	mov	fp, r0
 8005996:	2300      	movs	r3, #0
 8005998:	4630      	mov	r0, r6
 800599a:	4639      	mov	r1, r7
 800599c:	f7fb f87a 	bl	8000a94 <__aeabi_dcmplt>
 80059a0:	b148      	cbz	r0, 80059b6 <_dtoa_r+0x17e>
 80059a2:	4658      	mov	r0, fp
 80059a4:	f7fa fd9a 	bl	80004dc <__aeabi_i2d>
 80059a8:	4632      	mov	r2, r6
 80059aa:	463b      	mov	r3, r7
 80059ac:	f7fb f868 	bl	8000a80 <__aeabi_dcmpeq>
 80059b0:	b908      	cbnz	r0, 80059b6 <_dtoa_r+0x17e>
 80059b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059b6:	f1bb 0f16 	cmp.w	fp, #22
 80059ba:	d857      	bhi.n	8005a6c <_dtoa_r+0x234>
 80059bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059c0:	4b5a      	ldr	r3, [pc, #360]	; (8005b2c <_dtoa_r+0x2f4>)
 80059c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f7fb f863 	bl	8000a94 <__aeabi_dcmplt>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d04e      	beq.n	8005a70 <_dtoa_r+0x238>
 80059d2:	2300      	movs	r3, #0
 80059d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80059da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059dc:	1b1b      	subs	r3, r3, r4
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	bf46      	itte	mi
 80059e2:	f1c3 0901 	rsbmi	r9, r3, #1
 80059e6:	2300      	movmi	r3, #0
 80059e8:	f04f 0900 	movpl.w	r9, #0
 80059ec:	9209      	str	r2, [sp, #36]	; 0x24
 80059ee:	bf48      	it	mi
 80059f0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80059f2:	f1bb 0f00 	cmp.w	fp, #0
 80059f6:	db3d      	blt.n	8005a74 <_dtoa_r+0x23c>
 80059f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80059fe:	445b      	add	r3, fp
 8005a00:	9309      	str	r3, [sp, #36]	; 0x24
 8005a02:	2300      	movs	r3, #0
 8005a04:	930a      	str	r3, [sp, #40]	; 0x28
 8005a06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a08:	2b09      	cmp	r3, #9
 8005a0a:	d867      	bhi.n	8005adc <_dtoa_r+0x2a4>
 8005a0c:	2b05      	cmp	r3, #5
 8005a0e:	bfc4      	itt	gt
 8005a10:	3b04      	subgt	r3, #4
 8005a12:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a16:	bfc8      	it	gt
 8005a18:	2400      	movgt	r4, #0
 8005a1a:	f1a3 0302 	sub.w	r3, r3, #2
 8005a1e:	bfd8      	it	le
 8005a20:	2401      	movle	r4, #1
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	f200 8086 	bhi.w	8005b34 <_dtoa_r+0x2fc>
 8005a28:	e8df f003 	tbb	[pc, r3]
 8005a2c:	5637392c 	.word	0x5637392c
 8005a30:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005a34:	441c      	add	r4, r3
 8005a36:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	bfc1      	itttt	gt
 8005a3e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a42:	fa09 f903 	lslgt.w	r9, r9, r3
 8005a46:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005a4a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005a4e:	bfd6      	itet	le
 8005a50:	f1c3 0320 	rsble	r3, r3, #32
 8005a54:	ea49 0003 	orrgt.w	r0, r9, r3
 8005a58:	fa06 f003 	lslle.w	r0, r6, r3
 8005a5c:	f7fa fd2e 	bl	80004bc <__aeabi_ui2d>
 8005a60:	2201      	movs	r2, #1
 8005a62:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005a66:	3c01      	subs	r4, #1
 8005a68:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a6a:	e76f      	b.n	800594c <_dtoa_r+0x114>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e7b3      	b.n	80059d8 <_dtoa_r+0x1a0>
 8005a70:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a72:	e7b2      	b.n	80059da <_dtoa_r+0x1a2>
 8005a74:	f1cb 0300 	rsb	r3, fp, #0
 8005a78:	930a      	str	r3, [sp, #40]	; 0x28
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	eba9 090b 	sub.w	r9, r9, fp
 8005a80:	930e      	str	r3, [sp, #56]	; 0x38
 8005a82:	e7c0      	b.n	8005a06 <_dtoa_r+0x1ce>
 8005a84:	2300      	movs	r3, #0
 8005a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dc55      	bgt.n	8005b3a <_dtoa_r+0x302>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	461a      	mov	r2, r3
 8005a92:	9306      	str	r3, [sp, #24]
 8005a94:	9308      	str	r3, [sp, #32]
 8005a96:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a98:	e00b      	b.n	8005ab2 <_dtoa_r+0x27a>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e7f3      	b.n	8005a86 <_dtoa_r+0x24e>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aa4:	445b      	add	r3, fp
 8005aa6:	9306      	str	r3, [sp, #24]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	9308      	str	r3, [sp, #32]
 8005aae:	bfb8      	it	lt
 8005ab0:	2301      	movlt	r3, #1
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	69e8      	ldr	r0, [r5, #28]
 8005ab8:	f102 0614 	add.w	r6, r2, #20
 8005abc:	429e      	cmp	r6, r3
 8005abe:	d940      	bls.n	8005b42 <_dtoa_r+0x30a>
 8005ac0:	6041      	str	r1, [r0, #4]
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f000 fd98 	bl	80065f8 <_Balloc>
 8005ac8:	9003      	str	r0, [sp, #12]
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d13c      	bne.n	8005b48 <_dtoa_r+0x310>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	f240 11af 	movw	r1, #431	; 0x1af
 8005ad4:	4b16      	ldr	r3, [pc, #88]	; (8005b30 <_dtoa_r+0x2f8>)
 8005ad6:	e6c3      	b.n	8005860 <_dtoa_r+0x28>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e7e1      	b.n	8005aa0 <_dtoa_r+0x268>
 8005adc:	2401      	movs	r4, #1
 8005ade:	2300      	movs	r3, #0
 8005ae0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ae2:	9322      	str	r3, [sp, #136]	; 0x88
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae8:	2200      	movs	r2, #0
 8005aea:	9306      	str	r3, [sp, #24]
 8005aec:	9308      	str	r3, [sp, #32]
 8005aee:	2312      	movs	r3, #18
 8005af0:	e7d1      	b.n	8005a96 <_dtoa_r+0x25e>
 8005af2:	bf00      	nop
 8005af4:	f3af 8000 	nop.w
 8005af8:	636f4361 	.word	0x636f4361
 8005afc:	3fd287a7 	.word	0x3fd287a7
 8005b00:	8b60c8b3 	.word	0x8b60c8b3
 8005b04:	3fc68a28 	.word	0x3fc68a28
 8005b08:	509f79fb 	.word	0x509f79fb
 8005b0c:	3fd34413 	.word	0x3fd34413
 8005b10:	0800ab97 	.word	0x0800ab97
 8005b14:	0800abae 	.word	0x0800abae
 8005b18:	7ff00000 	.word	0x7ff00000
 8005b1c:	0800ab93 	.word	0x0800ab93
 8005b20:	0800ab8a 	.word	0x0800ab8a
 8005b24:	0800ab67 	.word	0x0800ab67
 8005b28:	3ff80000 	.word	0x3ff80000
 8005b2c:	0800ac98 	.word	0x0800ac98
 8005b30:	0800ac06 	.word	0x0800ac06
 8005b34:	2301      	movs	r3, #1
 8005b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b38:	e7d4      	b.n	8005ae4 <_dtoa_r+0x2ac>
 8005b3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b3c:	9306      	str	r3, [sp, #24]
 8005b3e:	9308      	str	r3, [sp, #32]
 8005b40:	e7b7      	b.n	8005ab2 <_dtoa_r+0x27a>
 8005b42:	3101      	adds	r1, #1
 8005b44:	0052      	lsls	r2, r2, #1
 8005b46:	e7b7      	b.n	8005ab8 <_dtoa_r+0x280>
 8005b48:	69eb      	ldr	r3, [r5, #28]
 8005b4a:	9a03      	ldr	r2, [sp, #12]
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	9b08      	ldr	r3, [sp, #32]
 8005b50:	2b0e      	cmp	r3, #14
 8005b52:	f200 80a8 	bhi.w	8005ca6 <_dtoa_r+0x46e>
 8005b56:	2c00      	cmp	r4, #0
 8005b58:	f000 80a5 	beq.w	8005ca6 <_dtoa_r+0x46e>
 8005b5c:	f1bb 0f00 	cmp.w	fp, #0
 8005b60:	dd34      	ble.n	8005bcc <_dtoa_r+0x394>
 8005b62:	4b9a      	ldr	r3, [pc, #616]	; (8005dcc <_dtoa_r+0x594>)
 8005b64:	f00b 020f 	and.w	r2, fp, #15
 8005b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005b70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b74:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b78:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005b7c:	d016      	beq.n	8005bac <_dtoa_r+0x374>
 8005b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b82:	4b93      	ldr	r3, [pc, #588]	; (8005dd0 <_dtoa_r+0x598>)
 8005b84:	2703      	movs	r7, #3
 8005b86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b8a:	f7fa fe3b 	bl	8000804 <__aeabi_ddiv>
 8005b8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b92:	f004 040f 	and.w	r4, r4, #15
 8005b96:	4e8e      	ldr	r6, [pc, #568]	; (8005dd0 <_dtoa_r+0x598>)
 8005b98:	b954      	cbnz	r4, 8005bb0 <_dtoa_r+0x378>
 8005b9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba2:	f7fa fe2f 	bl	8000804 <__aeabi_ddiv>
 8005ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005baa:	e029      	b.n	8005c00 <_dtoa_r+0x3c8>
 8005bac:	2702      	movs	r7, #2
 8005bae:	e7f2      	b.n	8005b96 <_dtoa_r+0x35e>
 8005bb0:	07e1      	lsls	r1, r4, #31
 8005bb2:	d508      	bpl.n	8005bc6 <_dtoa_r+0x38e>
 8005bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bbc:	f7fa fcf8 	bl	80005b0 <__aeabi_dmul>
 8005bc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bc4:	3701      	adds	r7, #1
 8005bc6:	1064      	asrs	r4, r4, #1
 8005bc8:	3608      	adds	r6, #8
 8005bca:	e7e5      	b.n	8005b98 <_dtoa_r+0x360>
 8005bcc:	f000 80a5 	beq.w	8005d1a <_dtoa_r+0x4e2>
 8005bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd4:	f1cb 0400 	rsb	r4, fp, #0
 8005bd8:	4b7c      	ldr	r3, [pc, #496]	; (8005dcc <_dtoa_r+0x594>)
 8005bda:	f004 020f 	and.w	r2, r4, #15
 8005bde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa fce3 	bl	80005b0 <__aeabi_dmul>
 8005bea:	2702      	movs	r7, #2
 8005bec:	2300      	movs	r3, #0
 8005bee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bf2:	4e77      	ldr	r6, [pc, #476]	; (8005dd0 <_dtoa_r+0x598>)
 8005bf4:	1124      	asrs	r4, r4, #4
 8005bf6:	2c00      	cmp	r4, #0
 8005bf8:	f040 8084 	bne.w	8005d04 <_dtoa_r+0x4cc>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1d2      	bne.n	8005ba6 <_dtoa_r+0x36e>
 8005c00:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8087 	beq.w	8005d1e <_dtoa_r+0x4e6>
 8005c10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c14:	2200      	movs	r2, #0
 8005c16:	4b6f      	ldr	r3, [pc, #444]	; (8005dd4 <_dtoa_r+0x59c>)
 8005c18:	f7fa ff3c 	bl	8000a94 <__aeabi_dcmplt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d07e      	beq.n	8005d1e <_dtoa_r+0x4e6>
 8005c20:	9b08      	ldr	r3, [sp, #32]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d07b      	beq.n	8005d1e <_dtoa_r+0x4e6>
 8005c26:	9b06      	ldr	r3, [sp, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dd38      	ble.n	8005c9e <_dtoa_r+0x466>
 8005c2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c30:	2200      	movs	r2, #0
 8005c32:	4b69      	ldr	r3, [pc, #420]	; (8005dd8 <_dtoa_r+0x5a0>)
 8005c34:	f7fa fcbc 	bl	80005b0 <__aeabi_dmul>
 8005c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c3c:	9c06      	ldr	r4, [sp, #24]
 8005c3e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005c42:	3701      	adds	r7, #1
 8005c44:	4638      	mov	r0, r7
 8005c46:	f7fa fc49 	bl	80004dc <__aeabi_i2d>
 8005c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c4e:	f7fa fcaf 	bl	80005b0 <__aeabi_dmul>
 8005c52:	2200      	movs	r2, #0
 8005c54:	4b61      	ldr	r3, [pc, #388]	; (8005ddc <_dtoa_r+0x5a4>)
 8005c56:	f7fa faf5 	bl	8000244 <__adddf3>
 8005c5a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c62:	9611      	str	r6, [sp, #68]	; 0x44
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	d15d      	bne.n	8005d24 <_dtoa_r+0x4ec>
 8005c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4b5c      	ldr	r3, [pc, #368]	; (8005de0 <_dtoa_r+0x5a8>)
 8005c70:	f7fa fae6 	bl	8000240 <__aeabi_dsub>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c7c:	4633      	mov	r3, r6
 8005c7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c80:	f7fa ff26 	bl	8000ad0 <__aeabi_dcmpgt>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	f040 8295 	bne.w	80061b4 <_dtoa_r+0x97c>
 8005c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c94:	f7fa fefe 	bl	8000a94 <__aeabi_dcmplt>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f040 8289 	bne.w	80061b0 <_dtoa_r+0x978>
 8005c9e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ca2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f2c0 8151 	blt.w	8005f50 <_dtoa_r+0x718>
 8005cae:	f1bb 0f0e 	cmp.w	fp, #14
 8005cb2:	f300 814d 	bgt.w	8005f50 <_dtoa_r+0x718>
 8005cb6:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <_dtoa_r+0x594>)
 8005cb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005cbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cc0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005cc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f280 80da 	bge.w	8005e80 <_dtoa_r+0x648>
 8005ccc:	9b08      	ldr	r3, [sp, #32]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f300 80d6 	bgt.w	8005e80 <_dtoa_r+0x648>
 8005cd4:	f040 826b 	bne.w	80061ae <_dtoa_r+0x976>
 8005cd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4b40      	ldr	r3, [pc, #256]	; (8005de0 <_dtoa_r+0x5a8>)
 8005ce0:	f7fa fc66 	bl	80005b0 <__aeabi_dmul>
 8005ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce8:	f7fa fee8 	bl	8000abc <__aeabi_dcmpge>
 8005cec:	9c08      	ldr	r4, [sp, #32]
 8005cee:	4626      	mov	r6, r4
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f040 8241 	bne.w	8006178 <_dtoa_r+0x940>
 8005cf6:	2331      	movs	r3, #49	; 0x31
 8005cf8:	9f03      	ldr	r7, [sp, #12]
 8005cfa:	f10b 0b01 	add.w	fp, fp, #1
 8005cfe:	f807 3b01 	strb.w	r3, [r7], #1
 8005d02:	e23d      	b.n	8006180 <_dtoa_r+0x948>
 8005d04:	07e2      	lsls	r2, r4, #31
 8005d06:	d505      	bpl.n	8005d14 <_dtoa_r+0x4dc>
 8005d08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d0c:	f7fa fc50 	bl	80005b0 <__aeabi_dmul>
 8005d10:	2301      	movs	r3, #1
 8005d12:	3701      	adds	r7, #1
 8005d14:	1064      	asrs	r4, r4, #1
 8005d16:	3608      	adds	r6, #8
 8005d18:	e76d      	b.n	8005bf6 <_dtoa_r+0x3be>
 8005d1a:	2702      	movs	r7, #2
 8005d1c:	e770      	b.n	8005c00 <_dtoa_r+0x3c8>
 8005d1e:	46d8      	mov	r8, fp
 8005d20:	9c08      	ldr	r4, [sp, #32]
 8005d22:	e78f      	b.n	8005c44 <_dtoa_r+0x40c>
 8005d24:	9903      	ldr	r1, [sp, #12]
 8005d26:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <_dtoa_r+0x594>)
 8005d28:	4421      	add	r1, r4
 8005d2a:	9112      	str	r1, [sp, #72]	; 0x48
 8005d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d32:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d054      	beq.n	8005de8 <_dtoa_r+0x5b0>
 8005d3e:	2000      	movs	r0, #0
 8005d40:	4928      	ldr	r1, [pc, #160]	; (8005de4 <_dtoa_r+0x5ac>)
 8005d42:	f7fa fd5f 	bl	8000804 <__aeabi_ddiv>
 8005d46:	463b      	mov	r3, r7
 8005d48:	4632      	mov	r2, r6
 8005d4a:	f7fa fa79 	bl	8000240 <__aeabi_dsub>
 8005d4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d52:	9f03      	ldr	r7, [sp, #12]
 8005d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d58:	f7fa feda 	bl	8000b10 <__aeabi_d2iz>
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	f7fa fbbd 	bl	80004dc <__aeabi_i2d>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d6a:	f7fa fa69 	bl	8000240 <__aeabi_dsub>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	3430      	adds	r4, #48	; 0x30
 8005d74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d7c:	f807 4b01 	strb.w	r4, [r7], #1
 8005d80:	f7fa fe88 	bl	8000a94 <__aeabi_dcmplt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d173      	bne.n	8005e70 <_dtoa_r+0x638>
 8005d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	4911      	ldr	r1, [pc, #68]	; (8005dd4 <_dtoa_r+0x59c>)
 8005d90:	f7fa fa56 	bl	8000240 <__aeabi_dsub>
 8005d94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d98:	f7fa fe7c 	bl	8000a94 <__aeabi_dcmplt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f040 80b6 	bne.w	8005f0e <_dtoa_r+0x6d6>
 8005da2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da4:	429f      	cmp	r7, r3
 8005da6:	f43f af7a 	beq.w	8005c9e <_dtoa_r+0x466>
 8005daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dae:	2200      	movs	r2, #0
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <_dtoa_r+0x5a0>)
 8005db2:	f7fa fbfd 	bl	80005b0 <__aeabi_dmul>
 8005db6:	2200      	movs	r2, #0
 8005db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <_dtoa_r+0x5a0>)
 8005dc2:	f7fa fbf5 	bl	80005b0 <__aeabi_dmul>
 8005dc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dca:	e7c3      	b.n	8005d54 <_dtoa_r+0x51c>
 8005dcc:	0800ac98 	.word	0x0800ac98
 8005dd0:	0800ac70 	.word	0x0800ac70
 8005dd4:	3ff00000 	.word	0x3ff00000
 8005dd8:	40240000 	.word	0x40240000
 8005ddc:	401c0000 	.word	0x401c0000
 8005de0:	40140000 	.word	0x40140000
 8005de4:	3fe00000 	.word	0x3fe00000
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa fbe0 	bl	80005b0 <__aeabi_dmul>
 8005df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005df2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005df6:	9c03      	ldr	r4, [sp, #12]
 8005df8:	9314      	str	r3, [sp, #80]	; 0x50
 8005dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dfe:	f7fa fe87 	bl	8000b10 <__aeabi_d2iz>
 8005e02:	9015      	str	r0, [sp, #84]	; 0x54
 8005e04:	f7fa fb6a 	bl	80004dc <__aeabi_i2d>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e10:	f7fa fa16 	bl	8000240 <__aeabi_dsub>
 8005e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e16:	4606      	mov	r6, r0
 8005e18:	3330      	adds	r3, #48	; 0x30
 8005e1a:	f804 3b01 	strb.w	r3, [r4], #1
 8005e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e20:	460f      	mov	r7, r1
 8005e22:	429c      	cmp	r4, r3
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	d124      	bne.n	8005e74 <_dtoa_r+0x63c>
 8005e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e2e:	4baf      	ldr	r3, [pc, #700]	; (80060ec <_dtoa_r+0x8b4>)
 8005e30:	f7fa fa08 	bl	8000244 <__adddf3>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4630      	mov	r0, r6
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f7fa fe48 	bl	8000ad0 <__aeabi_dcmpgt>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d163      	bne.n	8005f0c <_dtoa_r+0x6d4>
 8005e44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e48:	2000      	movs	r0, #0
 8005e4a:	49a8      	ldr	r1, [pc, #672]	; (80060ec <_dtoa_r+0x8b4>)
 8005e4c:	f7fa f9f8 	bl	8000240 <__aeabi_dsub>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4630      	mov	r0, r6
 8005e56:	4639      	mov	r1, r7
 8005e58:	f7fa fe1c 	bl	8000a94 <__aeabi_dcmplt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f43f af1e 	beq.w	8005c9e <_dtoa_r+0x466>
 8005e62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e64:	1e7b      	subs	r3, r7, #1
 8005e66:	9314      	str	r3, [sp, #80]	; 0x50
 8005e68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d0f8      	beq.n	8005e62 <_dtoa_r+0x62a>
 8005e70:	46c3      	mov	fp, r8
 8005e72:	e03b      	b.n	8005eec <_dtoa_r+0x6b4>
 8005e74:	4b9e      	ldr	r3, [pc, #632]	; (80060f0 <_dtoa_r+0x8b8>)
 8005e76:	f7fa fb9b 	bl	80005b0 <__aeabi_dmul>
 8005e7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e7e:	e7bc      	b.n	8005dfa <_dtoa_r+0x5c2>
 8005e80:	9f03      	ldr	r7, [sp, #12]
 8005e82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	f7fa fcb9 	bl	8000804 <__aeabi_ddiv>
 8005e92:	f7fa fe3d 	bl	8000b10 <__aeabi_d2iz>
 8005e96:	4604      	mov	r4, r0
 8005e98:	f7fa fb20 	bl	80004dc <__aeabi_i2d>
 8005e9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ea0:	f7fa fb86 	bl	80005b0 <__aeabi_dmul>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	4649      	mov	r1, r9
 8005eac:	f7fa f9c8 	bl	8000240 <__aeabi_dsub>
 8005eb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005eb4:	f807 6b01 	strb.w	r6, [r7], #1
 8005eb8:	9e03      	ldr	r6, [sp, #12]
 8005eba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ebe:	1bbe      	subs	r6, r7, r6
 8005ec0:	45b4      	cmp	ip, r6
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	d136      	bne.n	8005f36 <_dtoa_r+0x6fe>
 8005ec8:	f7fa f9bc 	bl	8000244 <__adddf3>
 8005ecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	4689      	mov	r9, r1
 8005ed4:	f7fa fdfc 	bl	8000ad0 <__aeabi_dcmpgt>
 8005ed8:	bb58      	cbnz	r0, 8005f32 <_dtoa_r+0x6fa>
 8005eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ede:	4640      	mov	r0, r8
 8005ee0:	4649      	mov	r1, r9
 8005ee2:	f7fa fdcd 	bl	8000a80 <__aeabi_dcmpeq>
 8005ee6:	b108      	cbz	r0, 8005eec <_dtoa_r+0x6b4>
 8005ee8:	07e3      	lsls	r3, r4, #31
 8005eea:	d422      	bmi.n	8005f32 <_dtoa_r+0x6fa>
 8005eec:	4651      	mov	r1, sl
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f000 fbc2 	bl	8006678 <_Bfree>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ef8:	703b      	strb	r3, [r7, #0]
 8005efa:	f10b 0301 	add.w	r3, fp, #1
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f43f ace6 	beq.w	80058d4 <_dtoa_r+0x9c>
 8005f08:	601f      	str	r7, [r3, #0]
 8005f0a:	e4e3      	b.n	80058d4 <_dtoa_r+0x9c>
 8005f0c:	4627      	mov	r7, r4
 8005f0e:	463b      	mov	r3, r7
 8005f10:	461f      	mov	r7, r3
 8005f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f16:	2a39      	cmp	r2, #57	; 0x39
 8005f18:	d107      	bne.n	8005f2a <_dtoa_r+0x6f2>
 8005f1a:	9a03      	ldr	r2, [sp, #12]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d1f7      	bne.n	8005f10 <_dtoa_r+0x6d8>
 8005f20:	2230      	movs	r2, #48	; 0x30
 8005f22:	9903      	ldr	r1, [sp, #12]
 8005f24:	f108 0801 	add.w	r8, r8, #1
 8005f28:	700a      	strb	r2, [r1, #0]
 8005f2a:	781a      	ldrb	r2, [r3, #0]
 8005f2c:	3201      	adds	r2, #1
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	e79e      	b.n	8005e70 <_dtoa_r+0x638>
 8005f32:	46d8      	mov	r8, fp
 8005f34:	e7eb      	b.n	8005f0e <_dtoa_r+0x6d6>
 8005f36:	2200      	movs	r2, #0
 8005f38:	4b6d      	ldr	r3, [pc, #436]	; (80060f0 <_dtoa_r+0x8b8>)
 8005f3a:	f7fa fb39 	bl	80005b0 <__aeabi_dmul>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	4680      	mov	r8, r0
 8005f44:	4689      	mov	r9, r1
 8005f46:	f7fa fd9b 	bl	8000a80 <__aeabi_dcmpeq>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d09b      	beq.n	8005e86 <_dtoa_r+0x64e>
 8005f4e:	e7cd      	b.n	8005eec <_dtoa_r+0x6b4>
 8005f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	f000 80c4 	beq.w	80060e0 <_dtoa_r+0x8a8>
 8005f58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f5a:	2a01      	cmp	r2, #1
 8005f5c:	f300 80a8 	bgt.w	80060b0 <_dtoa_r+0x878>
 8005f60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	f000 80a0 	beq.w	80060a8 <_dtoa_r+0x870>
 8005f68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f6c:	464f      	mov	r7, r9
 8005f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f72:	2101      	movs	r1, #1
 8005f74:	441a      	add	r2, r3
 8005f76:	4628      	mov	r0, r5
 8005f78:	4499      	add	r9, r3
 8005f7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f7c:	f000 fc32 	bl	80067e4 <__i2b>
 8005f80:	4606      	mov	r6, r0
 8005f82:	b15f      	cbz	r7, 8005f9c <_dtoa_r+0x764>
 8005f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd08      	ble.n	8005f9c <_dtoa_r+0x764>
 8005f8a:	42bb      	cmp	r3, r7
 8005f8c:	bfa8      	it	ge
 8005f8e:	463b      	movge	r3, r7
 8005f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f92:	eba9 0903 	sub.w	r9, r9, r3
 8005f96:	1aff      	subs	r7, r7, r3
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9e:	b1f3      	cbz	r3, 8005fde <_dtoa_r+0x7a6>
 8005fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 80a0 	beq.w	80060e8 <_dtoa_r+0x8b0>
 8005fa8:	2c00      	cmp	r4, #0
 8005faa:	dd10      	ble.n	8005fce <_dtoa_r+0x796>
 8005fac:	4631      	mov	r1, r6
 8005fae:	4622      	mov	r2, r4
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 fcd5 	bl	8006960 <__pow5mult>
 8005fb6:	4652      	mov	r2, sl
 8005fb8:	4601      	mov	r1, r0
 8005fba:	4606      	mov	r6, r0
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 fc27 	bl	8006810 <__multiply>
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	4651      	mov	r1, sl
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 fb56 	bl	8006678 <_Bfree>
 8005fcc:	46c2      	mov	sl, r8
 8005fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd0:	1b1a      	subs	r2, r3, r4
 8005fd2:	d004      	beq.n	8005fde <_dtoa_r+0x7a6>
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fcc2 	bl	8006960 <__pow5mult>
 8005fdc:	4682      	mov	sl, r0
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 fbff 	bl	80067e4 <__i2b>
 8005fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fe8:	4604      	mov	r4, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f340 8082 	ble.w	80060f4 <_dtoa_r+0x8bc>
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 fcb3 	bl	8006960 <__pow5mult>
 8005ffa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	dd7b      	ble.n	80060fa <_dtoa_r+0x8c2>
 8006002:	f04f 0800 	mov.w	r8, #0
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800600c:	6918      	ldr	r0, [r3, #16]
 800600e:	f000 fb9b 	bl	8006748 <__hi0bits>
 8006012:	f1c0 0020 	rsb	r0, r0, #32
 8006016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006018:	4418      	add	r0, r3
 800601a:	f010 001f 	ands.w	r0, r0, #31
 800601e:	f000 8092 	beq.w	8006146 <_dtoa_r+0x90e>
 8006022:	f1c0 0320 	rsb	r3, r0, #32
 8006026:	2b04      	cmp	r3, #4
 8006028:	f340 8085 	ble.w	8006136 <_dtoa_r+0x8fe>
 800602c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602e:	f1c0 001c 	rsb	r0, r0, #28
 8006032:	4403      	add	r3, r0
 8006034:	4481      	add	r9, r0
 8006036:	4407      	add	r7, r0
 8006038:	9309      	str	r3, [sp, #36]	; 0x24
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	dd05      	ble.n	800604c <_dtoa_r+0x814>
 8006040:	4651      	mov	r1, sl
 8006042:	464a      	mov	r2, r9
 8006044:	4628      	mov	r0, r5
 8006046:	f000 fce5 	bl	8006a14 <__lshift>
 800604a:	4682      	mov	sl, r0
 800604c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	dd05      	ble.n	800605e <_dtoa_r+0x826>
 8006052:	4621      	mov	r1, r4
 8006054:	461a      	mov	r2, r3
 8006056:	4628      	mov	r0, r5
 8006058:	f000 fcdc 	bl	8006a14 <__lshift>
 800605c:	4604      	mov	r4, r0
 800605e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d072      	beq.n	800614a <_dtoa_r+0x912>
 8006064:	4621      	mov	r1, r4
 8006066:	4650      	mov	r0, sl
 8006068:	f000 fd40 	bl	8006aec <__mcmp>
 800606c:	2800      	cmp	r0, #0
 800606e:	da6c      	bge.n	800614a <_dtoa_r+0x912>
 8006070:	2300      	movs	r3, #0
 8006072:	4651      	mov	r1, sl
 8006074:	220a      	movs	r2, #10
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fb20 	bl	80066bc <__multadd>
 800607c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800607e:	4682      	mov	sl, r0
 8006080:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 81ac 	beq.w	80063e2 <_dtoa_r+0xbaa>
 800608a:	2300      	movs	r3, #0
 800608c:	4631      	mov	r1, r6
 800608e:	220a      	movs	r2, #10
 8006090:	4628      	mov	r0, r5
 8006092:	f000 fb13 	bl	80066bc <__multadd>
 8006096:	9b06      	ldr	r3, [sp, #24]
 8006098:	4606      	mov	r6, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	f300 8093 	bgt.w	80061c6 <_dtoa_r+0x98e>
 80060a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	dc59      	bgt.n	800615a <_dtoa_r+0x922>
 80060a6:	e08e      	b.n	80061c6 <_dtoa_r+0x98e>
 80060a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060ae:	e75d      	b.n	8005f6c <_dtoa_r+0x734>
 80060b0:	9b08      	ldr	r3, [sp, #32]
 80060b2:	1e5c      	subs	r4, r3, #1
 80060b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	bfbf      	itttt	lt
 80060ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80060be:	1ae3      	sublt	r3, r4, r3
 80060c0:	18d2      	addlt	r2, r2, r3
 80060c2:	bfa8      	it	ge
 80060c4:	1b1c      	subge	r4, r3, r4
 80060c6:	9b08      	ldr	r3, [sp, #32]
 80060c8:	bfbe      	ittt	lt
 80060ca:	940a      	strlt	r4, [sp, #40]	; 0x28
 80060cc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80060ce:	2400      	movlt	r4, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bfb5      	itete	lt
 80060d4:	eba9 0703 	sublt.w	r7, r9, r3
 80060d8:	464f      	movge	r7, r9
 80060da:	2300      	movlt	r3, #0
 80060dc:	9b08      	ldrge	r3, [sp, #32]
 80060de:	e747      	b.n	8005f70 <_dtoa_r+0x738>
 80060e0:	464f      	mov	r7, r9
 80060e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80060e6:	e74c      	b.n	8005f82 <_dtoa_r+0x74a>
 80060e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ea:	e773      	b.n	8005fd4 <_dtoa_r+0x79c>
 80060ec:	3fe00000 	.word	0x3fe00000
 80060f0:	40240000 	.word	0x40240000
 80060f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	dc18      	bgt.n	800612c <_dtoa_r+0x8f4>
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	b9b3      	cbnz	r3, 800612c <_dtoa_r+0x8f4>
 80060fe:	9b05      	ldr	r3, [sp, #20]
 8006100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006104:	b993      	cbnz	r3, 800612c <_dtoa_r+0x8f4>
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800610c:	0d1b      	lsrs	r3, r3, #20
 800610e:	051b      	lsls	r3, r3, #20
 8006110:	b17b      	cbz	r3, 8006132 <_dtoa_r+0x8fa>
 8006112:	f04f 0801 	mov.w	r8, #1
 8006116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006118:	f109 0901 	add.w	r9, r9, #1
 800611c:	3301      	adds	r3, #1
 800611e:	9309      	str	r3, [sp, #36]	; 0x24
 8006120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	f47f af6f 	bne.w	8006006 <_dtoa_r+0x7ce>
 8006128:	2001      	movs	r0, #1
 800612a:	e774      	b.n	8006016 <_dtoa_r+0x7de>
 800612c:	f04f 0800 	mov.w	r8, #0
 8006130:	e7f6      	b.n	8006120 <_dtoa_r+0x8e8>
 8006132:	4698      	mov	r8, r3
 8006134:	e7f4      	b.n	8006120 <_dtoa_r+0x8e8>
 8006136:	d080      	beq.n	800603a <_dtoa_r+0x802>
 8006138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613a:	331c      	adds	r3, #28
 800613c:	441a      	add	r2, r3
 800613e:	4499      	add	r9, r3
 8006140:	441f      	add	r7, r3
 8006142:	9209      	str	r2, [sp, #36]	; 0x24
 8006144:	e779      	b.n	800603a <_dtoa_r+0x802>
 8006146:	4603      	mov	r3, r0
 8006148:	e7f6      	b.n	8006138 <_dtoa_r+0x900>
 800614a:	9b08      	ldr	r3, [sp, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	dc34      	bgt.n	80061ba <_dtoa_r+0x982>
 8006150:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006152:	2b02      	cmp	r3, #2
 8006154:	dd31      	ble.n	80061ba <_dtoa_r+0x982>
 8006156:	9b08      	ldr	r3, [sp, #32]
 8006158:	9306      	str	r3, [sp, #24]
 800615a:	9b06      	ldr	r3, [sp, #24]
 800615c:	b963      	cbnz	r3, 8006178 <_dtoa_r+0x940>
 800615e:	4621      	mov	r1, r4
 8006160:	2205      	movs	r2, #5
 8006162:	4628      	mov	r0, r5
 8006164:	f000 faaa 	bl	80066bc <__multadd>
 8006168:	4601      	mov	r1, r0
 800616a:	4604      	mov	r4, r0
 800616c:	4650      	mov	r0, sl
 800616e:	f000 fcbd 	bl	8006aec <__mcmp>
 8006172:	2800      	cmp	r0, #0
 8006174:	f73f adbf 	bgt.w	8005cf6 <_dtoa_r+0x4be>
 8006178:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800617a:	9f03      	ldr	r7, [sp, #12]
 800617c:	ea6f 0b03 	mvn.w	fp, r3
 8006180:	f04f 0800 	mov.w	r8, #0
 8006184:	4621      	mov	r1, r4
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fa76 	bl	8006678 <_Bfree>
 800618c:	2e00      	cmp	r6, #0
 800618e:	f43f aead 	beq.w	8005eec <_dtoa_r+0x6b4>
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	d005      	beq.n	80061a4 <_dtoa_r+0x96c>
 8006198:	45b0      	cmp	r8, r6
 800619a:	d003      	beq.n	80061a4 <_dtoa_r+0x96c>
 800619c:	4641      	mov	r1, r8
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 fa6a 	bl	8006678 <_Bfree>
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 fa66 	bl	8006678 <_Bfree>
 80061ac:	e69e      	b.n	8005eec <_dtoa_r+0x6b4>
 80061ae:	2400      	movs	r4, #0
 80061b0:	4626      	mov	r6, r4
 80061b2:	e7e1      	b.n	8006178 <_dtoa_r+0x940>
 80061b4:	46c3      	mov	fp, r8
 80061b6:	4626      	mov	r6, r4
 80061b8:	e59d      	b.n	8005cf6 <_dtoa_r+0x4be>
 80061ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80c8 	beq.w	8006352 <_dtoa_r+0xb1a>
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	9306      	str	r3, [sp, #24]
 80061c6:	2f00      	cmp	r7, #0
 80061c8:	dd05      	ble.n	80061d6 <_dtoa_r+0x99e>
 80061ca:	4631      	mov	r1, r6
 80061cc:	463a      	mov	r2, r7
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 fc20 	bl	8006a14 <__lshift>
 80061d4:	4606      	mov	r6, r0
 80061d6:	f1b8 0f00 	cmp.w	r8, #0
 80061da:	d05b      	beq.n	8006294 <_dtoa_r+0xa5c>
 80061dc:	4628      	mov	r0, r5
 80061de:	6871      	ldr	r1, [r6, #4]
 80061e0:	f000 fa0a 	bl	80065f8 <_Balloc>
 80061e4:	4607      	mov	r7, r0
 80061e6:	b928      	cbnz	r0, 80061f4 <_dtoa_r+0x9bc>
 80061e8:	4602      	mov	r2, r0
 80061ea:	f240 21ef 	movw	r1, #751	; 0x2ef
 80061ee:	4b81      	ldr	r3, [pc, #516]	; (80063f4 <_dtoa_r+0xbbc>)
 80061f0:	f7ff bb36 	b.w	8005860 <_dtoa_r+0x28>
 80061f4:	6932      	ldr	r2, [r6, #16]
 80061f6:	f106 010c 	add.w	r1, r6, #12
 80061fa:	3202      	adds	r2, #2
 80061fc:	0092      	lsls	r2, r2, #2
 80061fe:	300c      	adds	r0, #12
 8006200:	f001 f822 	bl	8007248 <memcpy>
 8006204:	2201      	movs	r2, #1
 8006206:	4639      	mov	r1, r7
 8006208:	4628      	mov	r0, r5
 800620a:	f000 fc03 	bl	8006a14 <__lshift>
 800620e:	46b0      	mov	r8, r6
 8006210:	4606      	mov	r6, r0
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	9a03      	ldr	r2, [sp, #12]
 8006216:	3301      	adds	r3, #1
 8006218:	9308      	str	r3, [sp, #32]
 800621a:	9b06      	ldr	r3, [sp, #24]
 800621c:	4413      	add	r3, r2
 800621e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	930a      	str	r3, [sp, #40]	; 0x28
 8006228:	9b08      	ldr	r3, [sp, #32]
 800622a:	4621      	mov	r1, r4
 800622c:	3b01      	subs	r3, #1
 800622e:	4650      	mov	r0, sl
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	f7ff fa78 	bl	8005726 <quorem>
 8006236:	4641      	mov	r1, r8
 8006238:	9006      	str	r0, [sp, #24]
 800623a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800623e:	4650      	mov	r0, sl
 8006240:	f000 fc54 	bl	8006aec <__mcmp>
 8006244:	4632      	mov	r2, r6
 8006246:	9009      	str	r0, [sp, #36]	; 0x24
 8006248:	4621      	mov	r1, r4
 800624a:	4628      	mov	r0, r5
 800624c:	f000 fc6a 	bl	8006b24 <__mdiff>
 8006250:	68c2      	ldr	r2, [r0, #12]
 8006252:	4607      	mov	r7, r0
 8006254:	bb02      	cbnz	r2, 8006298 <_dtoa_r+0xa60>
 8006256:	4601      	mov	r1, r0
 8006258:	4650      	mov	r0, sl
 800625a:	f000 fc47 	bl	8006aec <__mcmp>
 800625e:	4602      	mov	r2, r0
 8006260:	4639      	mov	r1, r7
 8006262:	4628      	mov	r0, r5
 8006264:	920c      	str	r2, [sp, #48]	; 0x30
 8006266:	f000 fa07 	bl	8006678 <_Bfree>
 800626a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800626c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800626e:	9f08      	ldr	r7, [sp, #32]
 8006270:	ea43 0102 	orr.w	r1, r3, r2
 8006274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006276:	4319      	orrs	r1, r3
 8006278:	d110      	bne.n	800629c <_dtoa_r+0xa64>
 800627a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800627e:	d029      	beq.n	80062d4 <_dtoa_r+0xa9c>
 8006280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	dd02      	ble.n	800628c <_dtoa_r+0xa54>
 8006286:	9b06      	ldr	r3, [sp, #24]
 8006288:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	f883 9000 	strb.w	r9, [r3]
 8006292:	e777      	b.n	8006184 <_dtoa_r+0x94c>
 8006294:	4630      	mov	r0, r6
 8006296:	e7ba      	b.n	800620e <_dtoa_r+0x9d6>
 8006298:	2201      	movs	r2, #1
 800629a:	e7e1      	b.n	8006260 <_dtoa_r+0xa28>
 800629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	db04      	blt.n	80062ac <_dtoa_r+0xa74>
 80062a2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80062a4:	430b      	orrs	r3, r1
 80062a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062a8:	430b      	orrs	r3, r1
 80062aa:	d120      	bne.n	80062ee <_dtoa_r+0xab6>
 80062ac:	2a00      	cmp	r2, #0
 80062ae:	dded      	ble.n	800628c <_dtoa_r+0xa54>
 80062b0:	4651      	mov	r1, sl
 80062b2:	2201      	movs	r2, #1
 80062b4:	4628      	mov	r0, r5
 80062b6:	f000 fbad 	bl	8006a14 <__lshift>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4682      	mov	sl, r0
 80062be:	f000 fc15 	bl	8006aec <__mcmp>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	dc03      	bgt.n	80062ce <_dtoa_r+0xa96>
 80062c6:	d1e1      	bne.n	800628c <_dtoa_r+0xa54>
 80062c8:	f019 0f01 	tst.w	r9, #1
 80062cc:	d0de      	beq.n	800628c <_dtoa_r+0xa54>
 80062ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062d2:	d1d8      	bne.n	8006286 <_dtoa_r+0xa4e>
 80062d4:	2339      	movs	r3, #57	; 0x39
 80062d6:	9a04      	ldr	r2, [sp, #16]
 80062d8:	7013      	strb	r3, [r2, #0]
 80062da:	463b      	mov	r3, r7
 80062dc:	461f      	mov	r7, r3
 80062de:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	2a39      	cmp	r2, #57	; 0x39
 80062e6:	d06b      	beq.n	80063c0 <_dtoa_r+0xb88>
 80062e8:	3201      	adds	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e74a      	b.n	8006184 <_dtoa_r+0x94c>
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	dd07      	ble.n	8006302 <_dtoa_r+0xaca>
 80062f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062f6:	d0ed      	beq.n	80062d4 <_dtoa_r+0xa9c>
 80062f8:	9a04      	ldr	r2, [sp, #16]
 80062fa:	f109 0301 	add.w	r3, r9, #1
 80062fe:	7013      	strb	r3, [r2, #0]
 8006300:	e740      	b.n	8006184 <_dtoa_r+0x94c>
 8006302:	9b08      	ldr	r3, [sp, #32]
 8006304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006306:	f803 9c01 	strb.w	r9, [r3, #-1]
 800630a:	4293      	cmp	r3, r2
 800630c:	d042      	beq.n	8006394 <_dtoa_r+0xb5c>
 800630e:	4651      	mov	r1, sl
 8006310:	2300      	movs	r3, #0
 8006312:	220a      	movs	r2, #10
 8006314:	4628      	mov	r0, r5
 8006316:	f000 f9d1 	bl	80066bc <__multadd>
 800631a:	45b0      	cmp	r8, r6
 800631c:	4682      	mov	sl, r0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 020a 	mov.w	r2, #10
 8006326:	4641      	mov	r1, r8
 8006328:	4628      	mov	r0, r5
 800632a:	d107      	bne.n	800633c <_dtoa_r+0xb04>
 800632c:	f000 f9c6 	bl	80066bc <__multadd>
 8006330:	4680      	mov	r8, r0
 8006332:	4606      	mov	r6, r0
 8006334:	9b08      	ldr	r3, [sp, #32]
 8006336:	3301      	adds	r3, #1
 8006338:	9308      	str	r3, [sp, #32]
 800633a:	e775      	b.n	8006228 <_dtoa_r+0x9f0>
 800633c:	f000 f9be 	bl	80066bc <__multadd>
 8006340:	4631      	mov	r1, r6
 8006342:	4680      	mov	r8, r0
 8006344:	2300      	movs	r3, #0
 8006346:	220a      	movs	r2, #10
 8006348:	4628      	mov	r0, r5
 800634a:	f000 f9b7 	bl	80066bc <__multadd>
 800634e:	4606      	mov	r6, r0
 8006350:	e7f0      	b.n	8006334 <_dtoa_r+0xafc>
 8006352:	9b08      	ldr	r3, [sp, #32]
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	9f03      	ldr	r7, [sp, #12]
 8006358:	4621      	mov	r1, r4
 800635a:	4650      	mov	r0, sl
 800635c:	f7ff f9e3 	bl	8005726 <quorem>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006366:	f807 9b01 	strb.w	r9, [r7], #1
 800636a:	1afa      	subs	r2, r7, r3
 800636c:	9b06      	ldr	r3, [sp, #24]
 800636e:	4293      	cmp	r3, r2
 8006370:	dd07      	ble.n	8006382 <_dtoa_r+0xb4a>
 8006372:	4651      	mov	r1, sl
 8006374:	2300      	movs	r3, #0
 8006376:	220a      	movs	r2, #10
 8006378:	4628      	mov	r0, r5
 800637a:	f000 f99f 	bl	80066bc <__multadd>
 800637e:	4682      	mov	sl, r0
 8006380:	e7ea      	b.n	8006358 <_dtoa_r+0xb20>
 8006382:	9b06      	ldr	r3, [sp, #24]
 8006384:	f04f 0800 	mov.w	r8, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	bfcc      	ite	gt
 800638c:	461f      	movgt	r7, r3
 800638e:	2701      	movle	r7, #1
 8006390:	9b03      	ldr	r3, [sp, #12]
 8006392:	441f      	add	r7, r3
 8006394:	4651      	mov	r1, sl
 8006396:	2201      	movs	r2, #1
 8006398:	4628      	mov	r0, r5
 800639a:	f000 fb3b 	bl	8006a14 <__lshift>
 800639e:	4621      	mov	r1, r4
 80063a0:	4682      	mov	sl, r0
 80063a2:	f000 fba3 	bl	8006aec <__mcmp>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	dc97      	bgt.n	80062da <_dtoa_r+0xaa2>
 80063aa:	d102      	bne.n	80063b2 <_dtoa_r+0xb7a>
 80063ac:	f019 0f01 	tst.w	r9, #1
 80063b0:	d193      	bne.n	80062da <_dtoa_r+0xaa2>
 80063b2:	463b      	mov	r3, r7
 80063b4:	461f      	mov	r7, r3
 80063b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ba:	2a30      	cmp	r2, #48	; 0x30
 80063bc:	d0fa      	beq.n	80063b4 <_dtoa_r+0xb7c>
 80063be:	e6e1      	b.n	8006184 <_dtoa_r+0x94c>
 80063c0:	9a03      	ldr	r2, [sp, #12]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d18a      	bne.n	80062dc <_dtoa_r+0xaa4>
 80063c6:	2331      	movs	r3, #49	; 0x31
 80063c8:	f10b 0b01 	add.w	fp, fp, #1
 80063cc:	e797      	b.n	80062fe <_dtoa_r+0xac6>
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <_dtoa_r+0xbc0>)
 80063d0:	f7ff ba9f 	b.w	8005912 <_dtoa_r+0xda>
 80063d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f47f aa77 	bne.w	80058ca <_dtoa_r+0x92>
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <_dtoa_r+0xbc4>)
 80063de:	f7ff ba98 	b.w	8005912 <_dtoa_r+0xda>
 80063e2:	9b06      	ldr	r3, [sp, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dcb6      	bgt.n	8006356 <_dtoa_r+0xb1e>
 80063e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	f73f aeb5 	bgt.w	800615a <_dtoa_r+0x922>
 80063f0:	e7b1      	b.n	8006356 <_dtoa_r+0xb1e>
 80063f2:	bf00      	nop
 80063f4:	0800ac06 	.word	0x0800ac06
 80063f8:	0800ab66 	.word	0x0800ab66
 80063fc:	0800ab8a 	.word	0x0800ab8a

08006400 <_free_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4605      	mov	r5, r0
 8006404:	2900      	cmp	r1, #0
 8006406:	d040      	beq.n	800648a <_free_r+0x8a>
 8006408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800640c:	1f0c      	subs	r4, r1, #4
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfb8      	it	lt
 8006412:	18e4      	addlt	r4, r4, r3
 8006414:	f000 f8e4 	bl	80065e0 <__malloc_lock>
 8006418:	4a1c      	ldr	r2, [pc, #112]	; (800648c <_free_r+0x8c>)
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	b933      	cbnz	r3, 800642c <_free_r+0x2c>
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	6014      	str	r4, [r2, #0]
 8006422:	4628      	mov	r0, r5
 8006424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006428:	f000 b8e0 	b.w	80065ec <__malloc_unlock>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d908      	bls.n	8006442 <_free_r+0x42>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	1821      	adds	r1, r4, r0
 8006434:	428b      	cmp	r3, r1
 8006436:	bf01      	itttt	eq
 8006438:	6819      	ldreq	r1, [r3, #0]
 800643a:	685b      	ldreq	r3, [r3, #4]
 800643c:	1809      	addeq	r1, r1, r0
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	e7ed      	b.n	800641e <_free_r+0x1e>
 8006442:	461a      	mov	r2, r3
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	b10b      	cbz	r3, 800644c <_free_r+0x4c>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d9fa      	bls.n	8006442 <_free_r+0x42>
 800644c:	6811      	ldr	r1, [r2, #0]
 800644e:	1850      	adds	r0, r2, r1
 8006450:	42a0      	cmp	r0, r4
 8006452:	d10b      	bne.n	800646c <_free_r+0x6c>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	4401      	add	r1, r0
 8006458:	1850      	adds	r0, r2, r1
 800645a:	4283      	cmp	r3, r0
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	d1e0      	bne.n	8006422 <_free_r+0x22>
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4408      	add	r0, r1
 8006466:	6010      	str	r0, [r2, #0]
 8006468:	6053      	str	r3, [r2, #4]
 800646a:	e7da      	b.n	8006422 <_free_r+0x22>
 800646c:	d902      	bls.n	8006474 <_free_r+0x74>
 800646e:	230c      	movs	r3, #12
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	e7d6      	b.n	8006422 <_free_r+0x22>
 8006474:	6820      	ldr	r0, [r4, #0]
 8006476:	1821      	adds	r1, r4, r0
 8006478:	428b      	cmp	r3, r1
 800647a:	bf01      	itttt	eq
 800647c:	6819      	ldreq	r1, [r3, #0]
 800647e:	685b      	ldreq	r3, [r3, #4]
 8006480:	1809      	addeq	r1, r1, r0
 8006482:	6021      	streq	r1, [r4, #0]
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6054      	str	r4, [r2, #4]
 8006488:	e7cb      	b.n	8006422 <_free_r+0x22>
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	2000043c 	.word	0x2000043c

08006490 <malloc>:
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <malloc+0xc>)
 8006492:	4601      	mov	r1, r0
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	f000 b823 	b.w	80064e0 <_malloc_r>
 800649a:	bf00      	nop
 800649c:	20000064 	.word	0x20000064

080064a0 <sbrk_aligned>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4e0e      	ldr	r6, [pc, #56]	; (80064dc <sbrk_aligned+0x3c>)
 80064a4:	460c      	mov	r4, r1
 80064a6:	6831      	ldr	r1, [r6, #0]
 80064a8:	4605      	mov	r5, r0
 80064aa:	b911      	cbnz	r1, 80064b2 <sbrk_aligned+0x12>
 80064ac:	f000 febc 	bl	8007228 <_sbrk_r>
 80064b0:	6030      	str	r0, [r6, #0]
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 feb7 	bl	8007228 <_sbrk_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d00a      	beq.n	80064d4 <sbrk_aligned+0x34>
 80064be:	1cc4      	adds	r4, r0, #3
 80064c0:	f024 0403 	bic.w	r4, r4, #3
 80064c4:	42a0      	cmp	r0, r4
 80064c6:	d007      	beq.n	80064d8 <sbrk_aligned+0x38>
 80064c8:	1a21      	subs	r1, r4, r0
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 feac 	bl	8007228 <_sbrk_r>
 80064d0:	3001      	adds	r0, #1
 80064d2:	d101      	bne.n	80064d8 <sbrk_aligned+0x38>
 80064d4:	f04f 34ff 	mov.w	r4, #4294967295
 80064d8:	4620      	mov	r0, r4
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	20000440 	.word	0x20000440

080064e0 <_malloc_r>:
 80064e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	1ccd      	adds	r5, r1, #3
 80064e6:	f025 0503 	bic.w	r5, r5, #3
 80064ea:	3508      	adds	r5, #8
 80064ec:	2d0c      	cmp	r5, #12
 80064ee:	bf38      	it	cc
 80064f0:	250c      	movcc	r5, #12
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	4607      	mov	r7, r0
 80064f6:	db01      	blt.n	80064fc <_malloc_r+0x1c>
 80064f8:	42a9      	cmp	r1, r5
 80064fa:	d905      	bls.n	8006508 <_malloc_r+0x28>
 80064fc:	230c      	movs	r3, #12
 80064fe:	2600      	movs	r6, #0
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4630      	mov	r0, r6
 8006504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006508:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065dc <_malloc_r+0xfc>
 800650c:	f000 f868 	bl	80065e0 <__malloc_lock>
 8006510:	f8d8 3000 	ldr.w	r3, [r8]
 8006514:	461c      	mov	r4, r3
 8006516:	bb5c      	cbnz	r4, 8006570 <_malloc_r+0x90>
 8006518:	4629      	mov	r1, r5
 800651a:	4638      	mov	r0, r7
 800651c:	f7ff ffc0 	bl	80064a0 <sbrk_aligned>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	4604      	mov	r4, r0
 8006524:	d155      	bne.n	80065d2 <_malloc_r+0xf2>
 8006526:	f8d8 4000 	ldr.w	r4, [r8]
 800652a:	4626      	mov	r6, r4
 800652c:	2e00      	cmp	r6, #0
 800652e:	d145      	bne.n	80065bc <_malloc_r+0xdc>
 8006530:	2c00      	cmp	r4, #0
 8006532:	d048      	beq.n	80065c6 <_malloc_r+0xe6>
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	4631      	mov	r1, r6
 8006538:	4638      	mov	r0, r7
 800653a:	eb04 0903 	add.w	r9, r4, r3
 800653e:	f000 fe73 	bl	8007228 <_sbrk_r>
 8006542:	4581      	cmp	r9, r0
 8006544:	d13f      	bne.n	80065c6 <_malloc_r+0xe6>
 8006546:	6821      	ldr	r1, [r4, #0]
 8006548:	4638      	mov	r0, r7
 800654a:	1a6d      	subs	r5, r5, r1
 800654c:	4629      	mov	r1, r5
 800654e:	f7ff ffa7 	bl	80064a0 <sbrk_aligned>
 8006552:	3001      	adds	r0, #1
 8006554:	d037      	beq.n	80065c6 <_malloc_r+0xe6>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	442b      	add	r3, r5
 800655a:	6023      	str	r3, [r4, #0]
 800655c:	f8d8 3000 	ldr.w	r3, [r8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d038      	beq.n	80065d6 <_malloc_r+0xf6>
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	42a2      	cmp	r2, r4
 8006568:	d12b      	bne.n	80065c2 <_malloc_r+0xe2>
 800656a:	2200      	movs	r2, #0
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	e00f      	b.n	8006590 <_malloc_r+0xb0>
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	1b52      	subs	r2, r2, r5
 8006574:	d41f      	bmi.n	80065b6 <_malloc_r+0xd6>
 8006576:	2a0b      	cmp	r2, #11
 8006578:	d917      	bls.n	80065aa <_malloc_r+0xca>
 800657a:	1961      	adds	r1, r4, r5
 800657c:	42a3      	cmp	r3, r4
 800657e:	6025      	str	r5, [r4, #0]
 8006580:	bf18      	it	ne
 8006582:	6059      	strne	r1, [r3, #4]
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	bf08      	it	eq
 8006588:	f8c8 1000 	streq.w	r1, [r8]
 800658c:	5162      	str	r2, [r4, r5]
 800658e:	604b      	str	r3, [r1, #4]
 8006590:	4638      	mov	r0, r7
 8006592:	f104 060b 	add.w	r6, r4, #11
 8006596:	f000 f829 	bl	80065ec <__malloc_unlock>
 800659a:	f026 0607 	bic.w	r6, r6, #7
 800659e:	1d23      	adds	r3, r4, #4
 80065a0:	1af2      	subs	r2, r6, r3
 80065a2:	d0ae      	beq.n	8006502 <_malloc_r+0x22>
 80065a4:	1b9b      	subs	r3, r3, r6
 80065a6:	50a3      	str	r3, [r4, r2]
 80065a8:	e7ab      	b.n	8006502 <_malloc_r+0x22>
 80065aa:	42a3      	cmp	r3, r4
 80065ac:	6862      	ldr	r2, [r4, #4]
 80065ae:	d1dd      	bne.n	800656c <_malloc_r+0x8c>
 80065b0:	f8c8 2000 	str.w	r2, [r8]
 80065b4:	e7ec      	b.n	8006590 <_malloc_r+0xb0>
 80065b6:	4623      	mov	r3, r4
 80065b8:	6864      	ldr	r4, [r4, #4]
 80065ba:	e7ac      	b.n	8006516 <_malloc_r+0x36>
 80065bc:	4634      	mov	r4, r6
 80065be:	6876      	ldr	r6, [r6, #4]
 80065c0:	e7b4      	b.n	800652c <_malloc_r+0x4c>
 80065c2:	4613      	mov	r3, r2
 80065c4:	e7cc      	b.n	8006560 <_malloc_r+0x80>
 80065c6:	230c      	movs	r3, #12
 80065c8:	4638      	mov	r0, r7
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	f000 f80e 	bl	80065ec <__malloc_unlock>
 80065d0:	e797      	b.n	8006502 <_malloc_r+0x22>
 80065d2:	6025      	str	r5, [r4, #0]
 80065d4:	e7dc      	b.n	8006590 <_malloc_r+0xb0>
 80065d6:	605b      	str	r3, [r3, #4]
 80065d8:	deff      	udf	#255	; 0xff
 80065da:	bf00      	nop
 80065dc:	2000043c 	.word	0x2000043c

080065e0 <__malloc_lock>:
 80065e0:	4801      	ldr	r0, [pc, #4]	; (80065e8 <__malloc_lock+0x8>)
 80065e2:	f7ff b890 	b.w	8005706 <__retarget_lock_acquire_recursive>
 80065e6:	bf00      	nop
 80065e8:	20000438 	.word	0x20000438

080065ec <__malloc_unlock>:
 80065ec:	4801      	ldr	r0, [pc, #4]	; (80065f4 <__malloc_unlock+0x8>)
 80065ee:	f7ff b88b 	b.w	8005708 <__retarget_lock_release_recursive>
 80065f2:	bf00      	nop
 80065f4:	20000438 	.word	0x20000438

080065f8 <_Balloc>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	69c6      	ldr	r6, [r0, #28]
 80065fc:	4604      	mov	r4, r0
 80065fe:	460d      	mov	r5, r1
 8006600:	b976      	cbnz	r6, 8006620 <_Balloc+0x28>
 8006602:	2010      	movs	r0, #16
 8006604:	f7ff ff44 	bl	8006490 <malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	61e0      	str	r0, [r4, #28]
 800660c:	b920      	cbnz	r0, 8006618 <_Balloc+0x20>
 800660e:	216b      	movs	r1, #107	; 0x6b
 8006610:	4b17      	ldr	r3, [pc, #92]	; (8006670 <_Balloc+0x78>)
 8006612:	4818      	ldr	r0, [pc, #96]	; (8006674 <_Balloc+0x7c>)
 8006614:	f000 fe26 	bl	8007264 <__assert_func>
 8006618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800661c:	6006      	str	r6, [r0, #0]
 800661e:	60c6      	str	r6, [r0, #12]
 8006620:	69e6      	ldr	r6, [r4, #28]
 8006622:	68f3      	ldr	r3, [r6, #12]
 8006624:	b183      	cbz	r3, 8006648 <_Balloc+0x50>
 8006626:	69e3      	ldr	r3, [r4, #28]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800662e:	b9b8      	cbnz	r0, 8006660 <_Balloc+0x68>
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f605 	lsl.w	r6, r1, r5
 8006636:	1d72      	adds	r2, r6, #5
 8006638:	4620      	mov	r0, r4
 800663a:	0092      	lsls	r2, r2, #2
 800663c:	f000 fe30 	bl	80072a0 <_calloc_r>
 8006640:	b160      	cbz	r0, 800665c <_Balloc+0x64>
 8006642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006646:	e00e      	b.n	8006666 <_Balloc+0x6e>
 8006648:	2221      	movs	r2, #33	; 0x21
 800664a:	2104      	movs	r1, #4
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fe27 	bl	80072a0 <_calloc_r>
 8006652:	69e3      	ldr	r3, [r4, #28]
 8006654:	60f0      	str	r0, [r6, #12]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e4      	bne.n	8006626 <_Balloc+0x2e>
 800665c:	2000      	movs	r0, #0
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	6802      	ldr	r2, [r0, #0]
 8006662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006666:	2300      	movs	r3, #0
 8006668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800666c:	e7f7      	b.n	800665e <_Balloc+0x66>
 800666e:	bf00      	nop
 8006670:	0800ab97 	.word	0x0800ab97
 8006674:	0800ac17 	.word	0x0800ac17

08006678 <_Bfree>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	69c6      	ldr	r6, [r0, #28]
 800667c:	4605      	mov	r5, r0
 800667e:	460c      	mov	r4, r1
 8006680:	b976      	cbnz	r6, 80066a0 <_Bfree+0x28>
 8006682:	2010      	movs	r0, #16
 8006684:	f7ff ff04 	bl	8006490 <malloc>
 8006688:	4602      	mov	r2, r0
 800668a:	61e8      	str	r0, [r5, #28]
 800668c:	b920      	cbnz	r0, 8006698 <_Bfree+0x20>
 800668e:	218f      	movs	r1, #143	; 0x8f
 8006690:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <_Bfree+0x3c>)
 8006692:	4809      	ldr	r0, [pc, #36]	; (80066b8 <_Bfree+0x40>)
 8006694:	f000 fde6 	bl	8007264 <__assert_func>
 8006698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800669c:	6006      	str	r6, [r0, #0]
 800669e:	60c6      	str	r6, [r0, #12]
 80066a0:	b13c      	cbz	r4, 80066b2 <_Bfree+0x3a>
 80066a2:	69eb      	ldr	r3, [r5, #28]
 80066a4:	6862      	ldr	r2, [r4, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066ac:	6021      	str	r1, [r4, #0]
 80066ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	0800ab97 	.word	0x0800ab97
 80066b8:	0800ac17 	.word	0x0800ac17

080066bc <__multadd>:
 80066bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	461e      	mov	r6, r3
 80066c6:	2000      	movs	r0, #0
 80066c8:	690d      	ldr	r5, [r1, #16]
 80066ca:	f101 0c14 	add.w	ip, r1, #20
 80066ce:	f8dc 3000 	ldr.w	r3, [ip]
 80066d2:	3001      	adds	r0, #1
 80066d4:	b299      	uxth	r1, r3
 80066d6:	fb02 6101 	mla	r1, r2, r1, r6
 80066da:	0c1e      	lsrs	r6, r3, #16
 80066dc:	0c0b      	lsrs	r3, r1, #16
 80066de:	fb02 3306 	mla	r3, r2, r6, r3
 80066e2:	b289      	uxth	r1, r1
 80066e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066e8:	4285      	cmp	r5, r0
 80066ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066ee:	f84c 1b04 	str.w	r1, [ip], #4
 80066f2:	dcec      	bgt.n	80066ce <__multadd+0x12>
 80066f4:	b30e      	cbz	r6, 800673a <__multadd+0x7e>
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dc19      	bgt.n	8006730 <__multadd+0x74>
 80066fc:	6861      	ldr	r1, [r4, #4]
 80066fe:	4638      	mov	r0, r7
 8006700:	3101      	adds	r1, #1
 8006702:	f7ff ff79 	bl	80065f8 <_Balloc>
 8006706:	4680      	mov	r8, r0
 8006708:	b928      	cbnz	r0, 8006716 <__multadd+0x5a>
 800670a:	4602      	mov	r2, r0
 800670c:	21ba      	movs	r1, #186	; 0xba
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <__multadd+0x84>)
 8006710:	480c      	ldr	r0, [pc, #48]	; (8006744 <__multadd+0x88>)
 8006712:	f000 fda7 	bl	8007264 <__assert_func>
 8006716:	6922      	ldr	r2, [r4, #16]
 8006718:	f104 010c 	add.w	r1, r4, #12
 800671c:	3202      	adds	r2, #2
 800671e:	0092      	lsls	r2, r2, #2
 8006720:	300c      	adds	r0, #12
 8006722:	f000 fd91 	bl	8007248 <memcpy>
 8006726:	4621      	mov	r1, r4
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ffa5 	bl	8006678 <_Bfree>
 800672e:	4644      	mov	r4, r8
 8006730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006734:	3501      	adds	r5, #1
 8006736:	615e      	str	r6, [r3, #20]
 8006738:	6125      	str	r5, [r4, #16]
 800673a:	4620      	mov	r0, r4
 800673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006740:	0800ac06 	.word	0x0800ac06
 8006744:	0800ac17 	.word	0x0800ac17

08006748 <__hi0bits>:
 8006748:	0c02      	lsrs	r2, r0, #16
 800674a:	0412      	lsls	r2, r2, #16
 800674c:	4603      	mov	r3, r0
 800674e:	b9ca      	cbnz	r2, 8006784 <__hi0bits+0x3c>
 8006750:	0403      	lsls	r3, r0, #16
 8006752:	2010      	movs	r0, #16
 8006754:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006758:	bf04      	itt	eq
 800675a:	021b      	lsleq	r3, r3, #8
 800675c:	3008      	addeq	r0, #8
 800675e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006762:	bf04      	itt	eq
 8006764:	011b      	lsleq	r3, r3, #4
 8006766:	3004      	addeq	r0, #4
 8006768:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800676c:	bf04      	itt	eq
 800676e:	009b      	lsleq	r3, r3, #2
 8006770:	3002      	addeq	r0, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	db05      	blt.n	8006782 <__hi0bits+0x3a>
 8006776:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800677a:	f100 0001 	add.w	r0, r0, #1
 800677e:	bf08      	it	eq
 8006780:	2020      	moveq	r0, #32
 8006782:	4770      	bx	lr
 8006784:	2000      	movs	r0, #0
 8006786:	e7e5      	b.n	8006754 <__hi0bits+0xc>

08006788 <__lo0bits>:
 8006788:	6803      	ldr	r3, [r0, #0]
 800678a:	4602      	mov	r2, r0
 800678c:	f013 0007 	ands.w	r0, r3, #7
 8006790:	d00b      	beq.n	80067aa <__lo0bits+0x22>
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d421      	bmi.n	80067da <__lo0bits+0x52>
 8006796:	0798      	lsls	r0, r3, #30
 8006798:	bf49      	itett	mi
 800679a:	085b      	lsrmi	r3, r3, #1
 800679c:	089b      	lsrpl	r3, r3, #2
 800679e:	2001      	movmi	r0, #1
 80067a0:	6013      	strmi	r3, [r2, #0]
 80067a2:	bf5c      	itt	pl
 80067a4:	2002      	movpl	r0, #2
 80067a6:	6013      	strpl	r3, [r2, #0]
 80067a8:	4770      	bx	lr
 80067aa:	b299      	uxth	r1, r3
 80067ac:	b909      	cbnz	r1, 80067b2 <__lo0bits+0x2a>
 80067ae:	2010      	movs	r0, #16
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	b2d9      	uxtb	r1, r3
 80067b4:	b909      	cbnz	r1, 80067ba <__lo0bits+0x32>
 80067b6:	3008      	adds	r0, #8
 80067b8:	0a1b      	lsrs	r3, r3, #8
 80067ba:	0719      	lsls	r1, r3, #28
 80067bc:	bf04      	itt	eq
 80067be:	091b      	lsreq	r3, r3, #4
 80067c0:	3004      	addeq	r0, #4
 80067c2:	0799      	lsls	r1, r3, #30
 80067c4:	bf04      	itt	eq
 80067c6:	089b      	lsreq	r3, r3, #2
 80067c8:	3002      	addeq	r0, #2
 80067ca:	07d9      	lsls	r1, r3, #31
 80067cc:	d403      	bmi.n	80067d6 <__lo0bits+0x4e>
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	f100 0001 	add.w	r0, r0, #1
 80067d4:	d003      	beq.n	80067de <__lo0bits+0x56>
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	4770      	bx	lr
 80067da:	2000      	movs	r0, #0
 80067dc:	4770      	bx	lr
 80067de:	2020      	movs	r0, #32
 80067e0:	4770      	bx	lr
	...

080067e4 <__i2b>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	460c      	mov	r4, r1
 80067e8:	2101      	movs	r1, #1
 80067ea:	f7ff ff05 	bl	80065f8 <_Balloc>
 80067ee:	4602      	mov	r2, r0
 80067f0:	b928      	cbnz	r0, 80067fe <__i2b+0x1a>
 80067f2:	f240 1145 	movw	r1, #325	; 0x145
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <__i2b+0x24>)
 80067f8:	4804      	ldr	r0, [pc, #16]	; (800680c <__i2b+0x28>)
 80067fa:	f000 fd33 	bl	8007264 <__assert_func>
 80067fe:	2301      	movs	r3, #1
 8006800:	6144      	str	r4, [r0, #20]
 8006802:	6103      	str	r3, [r0, #16]
 8006804:	bd10      	pop	{r4, pc}
 8006806:	bf00      	nop
 8006808:	0800ac06 	.word	0x0800ac06
 800680c:	0800ac17 	.word	0x0800ac17

08006810 <__multiply>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	4691      	mov	r9, r2
 8006816:	690a      	ldr	r2, [r1, #16]
 8006818:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800681c:	460c      	mov	r4, r1
 800681e:	429a      	cmp	r2, r3
 8006820:	bfbe      	ittt	lt
 8006822:	460b      	movlt	r3, r1
 8006824:	464c      	movlt	r4, r9
 8006826:	4699      	movlt	r9, r3
 8006828:	6927      	ldr	r7, [r4, #16]
 800682a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800682e:	68a3      	ldr	r3, [r4, #8]
 8006830:	6861      	ldr	r1, [r4, #4]
 8006832:	eb07 060a 	add.w	r6, r7, sl
 8006836:	42b3      	cmp	r3, r6
 8006838:	b085      	sub	sp, #20
 800683a:	bfb8      	it	lt
 800683c:	3101      	addlt	r1, #1
 800683e:	f7ff fedb 	bl	80065f8 <_Balloc>
 8006842:	b930      	cbnz	r0, 8006852 <__multiply+0x42>
 8006844:	4602      	mov	r2, r0
 8006846:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800684a:	4b43      	ldr	r3, [pc, #268]	; (8006958 <__multiply+0x148>)
 800684c:	4843      	ldr	r0, [pc, #268]	; (800695c <__multiply+0x14c>)
 800684e:	f000 fd09 	bl	8007264 <__assert_func>
 8006852:	f100 0514 	add.w	r5, r0, #20
 8006856:	462b      	mov	r3, r5
 8006858:	2200      	movs	r2, #0
 800685a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800685e:	4543      	cmp	r3, r8
 8006860:	d321      	bcc.n	80068a6 <__multiply+0x96>
 8006862:	f104 0314 	add.w	r3, r4, #20
 8006866:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800686a:	f109 0314 	add.w	r3, r9, #20
 800686e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006872:	9202      	str	r2, [sp, #8]
 8006874:	1b3a      	subs	r2, r7, r4
 8006876:	3a15      	subs	r2, #21
 8006878:	f022 0203 	bic.w	r2, r2, #3
 800687c:	3204      	adds	r2, #4
 800687e:	f104 0115 	add.w	r1, r4, #21
 8006882:	428f      	cmp	r7, r1
 8006884:	bf38      	it	cc
 8006886:	2204      	movcc	r2, #4
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9a02      	ldr	r2, [sp, #8]
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	429a      	cmp	r2, r3
 8006890:	d80c      	bhi.n	80068ac <__multiply+0x9c>
 8006892:	2e00      	cmp	r6, #0
 8006894:	dd03      	ble.n	800689e <__multiply+0x8e>
 8006896:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800689a:	2b00      	cmp	r3, #0
 800689c:	d05a      	beq.n	8006954 <__multiply+0x144>
 800689e:	6106      	str	r6, [r0, #16]
 80068a0:	b005      	add	sp, #20
 80068a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a6:	f843 2b04 	str.w	r2, [r3], #4
 80068aa:	e7d8      	b.n	800685e <__multiply+0x4e>
 80068ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80068b0:	f1ba 0f00 	cmp.w	sl, #0
 80068b4:	d023      	beq.n	80068fe <__multiply+0xee>
 80068b6:	46a9      	mov	r9, r5
 80068b8:	f04f 0c00 	mov.w	ip, #0
 80068bc:	f104 0e14 	add.w	lr, r4, #20
 80068c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068c4:	f8d9 1000 	ldr.w	r1, [r9]
 80068c8:	fa1f fb82 	uxth.w	fp, r2
 80068cc:	b289      	uxth	r1, r1
 80068ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80068d2:	4461      	add	r1, ip
 80068d4:	f8d9 c000 	ldr.w	ip, [r9]
 80068d8:	0c12      	lsrs	r2, r2, #16
 80068da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068de:	fb0a c202 	mla	r2, sl, r2, ip
 80068e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068e6:	b289      	uxth	r1, r1
 80068e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068ec:	4577      	cmp	r7, lr
 80068ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068f2:	f849 1b04 	str.w	r1, [r9], #4
 80068f6:	d8e3      	bhi.n	80068c0 <__multiply+0xb0>
 80068f8:	9a01      	ldr	r2, [sp, #4]
 80068fa:	f845 c002 	str.w	ip, [r5, r2]
 80068fe:	9a03      	ldr	r2, [sp, #12]
 8006900:	3304      	adds	r3, #4
 8006902:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006906:	f1b9 0f00 	cmp.w	r9, #0
 800690a:	d021      	beq.n	8006950 <__multiply+0x140>
 800690c:	46ae      	mov	lr, r5
 800690e:	f04f 0a00 	mov.w	sl, #0
 8006912:	6829      	ldr	r1, [r5, #0]
 8006914:	f104 0c14 	add.w	ip, r4, #20
 8006918:	f8bc b000 	ldrh.w	fp, [ip]
 800691c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006920:	b289      	uxth	r1, r1
 8006922:	fb09 220b 	mla	r2, r9, fp, r2
 8006926:	4452      	add	r2, sl
 8006928:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800692c:	f84e 1b04 	str.w	r1, [lr], #4
 8006930:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006934:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006938:	f8be 1000 	ldrh.w	r1, [lr]
 800693c:	4567      	cmp	r7, ip
 800693e:	fb09 110a 	mla	r1, r9, sl, r1
 8006942:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006946:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800694a:	d8e5      	bhi.n	8006918 <__multiply+0x108>
 800694c:	9a01      	ldr	r2, [sp, #4]
 800694e:	50a9      	str	r1, [r5, r2]
 8006950:	3504      	adds	r5, #4
 8006952:	e79a      	b.n	800688a <__multiply+0x7a>
 8006954:	3e01      	subs	r6, #1
 8006956:	e79c      	b.n	8006892 <__multiply+0x82>
 8006958:	0800ac06 	.word	0x0800ac06
 800695c:	0800ac17 	.word	0x0800ac17

08006960 <__pow5mult>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4615      	mov	r5, r2
 8006966:	f012 0203 	ands.w	r2, r2, #3
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	d007      	beq.n	8006980 <__pow5mult+0x20>
 8006970:	4c25      	ldr	r4, [pc, #148]	; (8006a08 <__pow5mult+0xa8>)
 8006972:	3a01      	subs	r2, #1
 8006974:	2300      	movs	r3, #0
 8006976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800697a:	f7ff fe9f 	bl	80066bc <__multadd>
 800697e:	4607      	mov	r7, r0
 8006980:	10ad      	asrs	r5, r5, #2
 8006982:	d03d      	beq.n	8006a00 <__pow5mult+0xa0>
 8006984:	69f4      	ldr	r4, [r6, #28]
 8006986:	b97c      	cbnz	r4, 80069a8 <__pow5mult+0x48>
 8006988:	2010      	movs	r0, #16
 800698a:	f7ff fd81 	bl	8006490 <malloc>
 800698e:	4602      	mov	r2, r0
 8006990:	61f0      	str	r0, [r6, #28]
 8006992:	b928      	cbnz	r0, 80069a0 <__pow5mult+0x40>
 8006994:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006998:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <__pow5mult+0xac>)
 800699a:	481d      	ldr	r0, [pc, #116]	; (8006a10 <__pow5mult+0xb0>)
 800699c:	f000 fc62 	bl	8007264 <__assert_func>
 80069a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069a4:	6004      	str	r4, [r0, #0]
 80069a6:	60c4      	str	r4, [r0, #12]
 80069a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80069ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069b0:	b94c      	cbnz	r4, 80069c6 <__pow5mult+0x66>
 80069b2:	f240 2171 	movw	r1, #625	; 0x271
 80069b6:	4630      	mov	r0, r6
 80069b8:	f7ff ff14 	bl	80067e4 <__i2b>
 80069bc:	2300      	movs	r3, #0
 80069be:	4604      	mov	r4, r0
 80069c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	f04f 0900 	mov.w	r9, #0
 80069ca:	07eb      	lsls	r3, r5, #31
 80069cc:	d50a      	bpl.n	80069e4 <__pow5mult+0x84>
 80069ce:	4639      	mov	r1, r7
 80069d0:	4622      	mov	r2, r4
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ff1c 	bl	8006810 <__multiply>
 80069d8:	4680      	mov	r8, r0
 80069da:	4639      	mov	r1, r7
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff fe4b 	bl	8006678 <_Bfree>
 80069e2:	4647      	mov	r7, r8
 80069e4:	106d      	asrs	r5, r5, #1
 80069e6:	d00b      	beq.n	8006a00 <__pow5mult+0xa0>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	b938      	cbnz	r0, 80069fc <__pow5mult+0x9c>
 80069ec:	4622      	mov	r2, r4
 80069ee:	4621      	mov	r1, r4
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff ff0d 	bl	8006810 <__multiply>
 80069f6:	6020      	str	r0, [r4, #0]
 80069f8:	f8c0 9000 	str.w	r9, [r0]
 80069fc:	4604      	mov	r4, r0
 80069fe:	e7e4      	b.n	80069ca <__pow5mult+0x6a>
 8006a00:	4638      	mov	r0, r7
 8006a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a06:	bf00      	nop
 8006a08:	0800ad60 	.word	0x0800ad60
 8006a0c:	0800ab97 	.word	0x0800ab97
 8006a10:	0800ac17 	.word	0x0800ac17

08006a14 <__lshift>:
 8006a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	460c      	mov	r4, r1
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	4691      	mov	r9, r2
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	6849      	ldr	r1, [r1, #4]
 8006a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a2c:	f108 0601 	add.w	r6, r8, #1
 8006a30:	42b3      	cmp	r3, r6
 8006a32:	db0b      	blt.n	8006a4c <__lshift+0x38>
 8006a34:	4638      	mov	r0, r7
 8006a36:	f7ff fddf 	bl	80065f8 <_Balloc>
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	b948      	cbnz	r0, 8006a52 <__lshift+0x3e>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006a44:	4b27      	ldr	r3, [pc, #156]	; (8006ae4 <__lshift+0xd0>)
 8006a46:	4828      	ldr	r0, [pc, #160]	; (8006ae8 <__lshift+0xd4>)
 8006a48:	f000 fc0c 	bl	8007264 <__assert_func>
 8006a4c:	3101      	adds	r1, #1
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	e7ee      	b.n	8006a30 <__lshift+0x1c>
 8006a52:	2300      	movs	r3, #0
 8006a54:	f100 0114 	add.w	r1, r0, #20
 8006a58:	f100 0210 	add.w	r2, r0, #16
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	4553      	cmp	r3, sl
 8006a60:	db33      	blt.n	8006aca <__lshift+0xb6>
 8006a62:	6920      	ldr	r0, [r4, #16]
 8006a64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a68:	f104 0314 	add.w	r3, r4, #20
 8006a6c:	f019 091f 	ands.w	r9, r9, #31
 8006a70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a78:	d02b      	beq.n	8006ad2 <__lshift+0xbe>
 8006a7a:	468a      	mov	sl, r1
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f1c9 0e20 	rsb	lr, r9, #32
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	fa00 f009 	lsl.w	r0, r0, r9
 8006a88:	4310      	orrs	r0, r2
 8006a8a:	f84a 0b04 	str.w	r0, [sl], #4
 8006a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a92:	459c      	cmp	ip, r3
 8006a94:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a98:	d8f3      	bhi.n	8006a82 <__lshift+0x6e>
 8006a9a:	ebac 0304 	sub.w	r3, ip, r4
 8006a9e:	3b15      	subs	r3, #21
 8006aa0:	f023 0303 	bic.w	r3, r3, #3
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	f104 0015 	add.w	r0, r4, #21
 8006aaa:	4584      	cmp	ip, r0
 8006aac:	bf38      	it	cc
 8006aae:	2304      	movcc	r3, #4
 8006ab0:	50ca      	str	r2, [r1, r3]
 8006ab2:	b10a      	cbz	r2, 8006ab8 <__lshift+0xa4>
 8006ab4:	f108 0602 	add.w	r6, r8, #2
 8006ab8:	3e01      	subs	r6, #1
 8006aba:	4638      	mov	r0, r7
 8006abc:	4621      	mov	r1, r4
 8006abe:	612e      	str	r6, [r5, #16]
 8006ac0:	f7ff fdda 	bl	8006678 <_Bfree>
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aca:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ace:	3301      	adds	r3, #1
 8006ad0:	e7c5      	b.n	8006a5e <__lshift+0x4a>
 8006ad2:	3904      	subs	r1, #4
 8006ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad8:	459c      	cmp	ip, r3
 8006ada:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ade:	d8f9      	bhi.n	8006ad4 <__lshift+0xc0>
 8006ae0:	e7ea      	b.n	8006ab8 <__lshift+0xa4>
 8006ae2:	bf00      	nop
 8006ae4:	0800ac06 	.word	0x0800ac06
 8006ae8:	0800ac17 	.word	0x0800ac17

08006aec <__mcmp>:
 8006aec:	4603      	mov	r3, r0
 8006aee:	690a      	ldr	r2, [r1, #16]
 8006af0:	6900      	ldr	r0, [r0, #16]
 8006af2:	b530      	push	{r4, r5, lr}
 8006af4:	1a80      	subs	r0, r0, r2
 8006af6:	d10d      	bne.n	8006b14 <__mcmp+0x28>
 8006af8:	3314      	adds	r3, #20
 8006afa:	3114      	adds	r1, #20
 8006afc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b0c:	4295      	cmp	r5, r2
 8006b0e:	d002      	beq.n	8006b16 <__mcmp+0x2a>
 8006b10:	d304      	bcc.n	8006b1c <__mcmp+0x30>
 8006b12:	2001      	movs	r0, #1
 8006b14:	bd30      	pop	{r4, r5, pc}
 8006b16:	42a3      	cmp	r3, r4
 8006b18:	d3f4      	bcc.n	8006b04 <__mcmp+0x18>
 8006b1a:	e7fb      	b.n	8006b14 <__mcmp+0x28>
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	e7f8      	b.n	8006b14 <__mcmp+0x28>
	...

08006b24 <__mdiff>:
 8006b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	460d      	mov	r5, r1
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4628      	mov	r0, r5
 8006b30:	4614      	mov	r4, r2
 8006b32:	f7ff ffdb 	bl	8006aec <__mcmp>
 8006b36:	1e06      	subs	r6, r0, #0
 8006b38:	d111      	bne.n	8006b5e <__mdiff+0x3a>
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f7ff fd5b 	bl	80065f8 <_Balloc>
 8006b42:	4602      	mov	r2, r0
 8006b44:	b928      	cbnz	r0, 8006b52 <__mdiff+0x2e>
 8006b46:	f240 2137 	movw	r1, #567	; 0x237
 8006b4a:	4b3a      	ldr	r3, [pc, #232]	; (8006c34 <__mdiff+0x110>)
 8006b4c:	483a      	ldr	r0, [pc, #232]	; (8006c38 <__mdiff+0x114>)
 8006b4e:	f000 fb89 	bl	8007264 <__assert_func>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b58:	4610      	mov	r0, r2
 8006b5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	bfa4      	itt	ge
 8006b60:	4623      	movge	r3, r4
 8006b62:	462c      	movge	r4, r5
 8006b64:	4638      	mov	r0, r7
 8006b66:	6861      	ldr	r1, [r4, #4]
 8006b68:	bfa6      	itte	ge
 8006b6a:	461d      	movge	r5, r3
 8006b6c:	2600      	movge	r6, #0
 8006b6e:	2601      	movlt	r6, #1
 8006b70:	f7ff fd42 	bl	80065f8 <_Balloc>
 8006b74:	4602      	mov	r2, r0
 8006b76:	b918      	cbnz	r0, 8006b80 <__mdiff+0x5c>
 8006b78:	f240 2145 	movw	r1, #581	; 0x245
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <__mdiff+0x110>)
 8006b7e:	e7e5      	b.n	8006b4c <__mdiff+0x28>
 8006b80:	f102 0814 	add.w	r8, r2, #20
 8006b84:	46c2      	mov	sl, r8
 8006b86:	f04f 0c00 	mov.w	ip, #0
 8006b8a:	6927      	ldr	r7, [r4, #16]
 8006b8c:	60c6      	str	r6, [r0, #12]
 8006b8e:	692e      	ldr	r6, [r5, #16]
 8006b90:	f104 0014 	add.w	r0, r4, #20
 8006b94:	f105 0914 	add.w	r9, r5, #20
 8006b98:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006b9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ba0:	3410      	adds	r4, #16
 8006ba2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006ba6:	f859 3b04 	ldr.w	r3, [r9], #4
 8006baa:	fa1f f18b 	uxth.w	r1, fp
 8006bae:	4461      	add	r1, ip
 8006bb0:	fa1f fc83 	uxth.w	ip, r3
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	eba1 010c 	sub.w	r1, r1, ip
 8006bba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bc2:	b289      	uxth	r1, r1
 8006bc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006bc8:	454e      	cmp	r6, r9
 8006bca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bce:	f84a 1b04 	str.w	r1, [sl], #4
 8006bd2:	d8e6      	bhi.n	8006ba2 <__mdiff+0x7e>
 8006bd4:	1b73      	subs	r3, r6, r5
 8006bd6:	3b15      	subs	r3, #21
 8006bd8:	f023 0303 	bic.w	r3, r3, #3
 8006bdc:	3515      	adds	r5, #21
 8006bde:	3304      	adds	r3, #4
 8006be0:	42ae      	cmp	r6, r5
 8006be2:	bf38      	it	cc
 8006be4:	2304      	movcc	r3, #4
 8006be6:	4418      	add	r0, r3
 8006be8:	4443      	add	r3, r8
 8006bea:	461e      	mov	r6, r3
 8006bec:	4605      	mov	r5, r0
 8006bee:	4575      	cmp	r5, lr
 8006bf0:	d30e      	bcc.n	8006c10 <__mdiff+0xec>
 8006bf2:	f10e 0103 	add.w	r1, lr, #3
 8006bf6:	1a09      	subs	r1, r1, r0
 8006bf8:	f021 0103 	bic.w	r1, r1, #3
 8006bfc:	3803      	subs	r0, #3
 8006bfe:	4586      	cmp	lr, r0
 8006c00:	bf38      	it	cc
 8006c02:	2100      	movcc	r1, #0
 8006c04:	440b      	add	r3, r1
 8006c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c0a:	b189      	cbz	r1, 8006c30 <__mdiff+0x10c>
 8006c0c:	6117      	str	r7, [r2, #16]
 8006c0e:	e7a3      	b.n	8006b58 <__mdiff+0x34>
 8006c10:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c14:	fa1f f188 	uxth.w	r1, r8
 8006c18:	4461      	add	r1, ip
 8006c1a:	140c      	asrs	r4, r1, #16
 8006c1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c20:	b289      	uxth	r1, r1
 8006c22:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c26:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c2a:	f846 1b04 	str.w	r1, [r6], #4
 8006c2e:	e7de      	b.n	8006bee <__mdiff+0xca>
 8006c30:	3f01      	subs	r7, #1
 8006c32:	e7e8      	b.n	8006c06 <__mdiff+0xe2>
 8006c34:	0800ac06 	.word	0x0800ac06
 8006c38:	0800ac17 	.word	0x0800ac17

08006c3c <__d2b>:
 8006c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4617      	mov	r7, r2
 8006c42:	461c      	mov	r4, r3
 8006c44:	9e08      	ldr	r6, [sp, #32]
 8006c46:	f7ff fcd7 	bl	80065f8 <_Balloc>
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	b930      	cbnz	r0, 8006c5c <__d2b+0x20>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	f240 310f 	movw	r1, #783	; 0x30f
 8006c54:	4b22      	ldr	r3, [pc, #136]	; (8006ce0 <__d2b+0xa4>)
 8006c56:	4823      	ldr	r0, [pc, #140]	; (8006ce4 <__d2b+0xa8>)
 8006c58:	f000 fb04 	bl	8007264 <__assert_func>
 8006c5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006c60:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006c64:	bb24      	cbnz	r4, 8006cb0 <__d2b+0x74>
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	d026      	beq.n	8006cba <__d2b+0x7e>
 8006c6c:	4668      	mov	r0, sp
 8006c6e:	9700      	str	r7, [sp, #0]
 8006c70:	f7ff fd8a 	bl	8006788 <__lo0bits>
 8006c74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c78:	b1e8      	cbz	r0, 8006cb6 <__d2b+0x7a>
 8006c7a:	f1c0 0320 	rsb	r3, r0, #32
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	430b      	orrs	r3, r1
 8006c84:	40c2      	lsrs	r2, r0
 8006c86:	616b      	str	r3, [r5, #20]
 8006c88:	9201      	str	r2, [sp, #4]
 8006c8a:	9b01      	ldr	r3, [sp, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	bf14      	ite	ne
 8006c90:	2102      	movne	r1, #2
 8006c92:	2101      	moveq	r1, #1
 8006c94:	61ab      	str	r3, [r5, #24]
 8006c96:	6129      	str	r1, [r5, #16]
 8006c98:	b1bc      	cbz	r4, 8006cca <__d2b+0x8e>
 8006c9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c9e:	4404      	add	r4, r0
 8006ca0:	6034      	str	r4, [r6, #0]
 8006ca2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca8:	6018      	str	r0, [r3, #0]
 8006caa:	4628      	mov	r0, r5
 8006cac:	b003      	add	sp, #12
 8006cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb4:	e7d7      	b.n	8006c66 <__d2b+0x2a>
 8006cb6:	6169      	str	r1, [r5, #20]
 8006cb8:	e7e7      	b.n	8006c8a <__d2b+0x4e>
 8006cba:	a801      	add	r0, sp, #4
 8006cbc:	f7ff fd64 	bl	8006788 <__lo0bits>
 8006cc0:	9b01      	ldr	r3, [sp, #4]
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	616b      	str	r3, [r5, #20]
 8006cc6:	3020      	adds	r0, #32
 8006cc8:	e7e5      	b.n	8006c96 <__d2b+0x5a>
 8006cca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cce:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006cd2:	6030      	str	r0, [r6, #0]
 8006cd4:	6918      	ldr	r0, [r3, #16]
 8006cd6:	f7ff fd37 	bl	8006748 <__hi0bits>
 8006cda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006cde:	e7e2      	b.n	8006ca6 <__d2b+0x6a>
 8006ce0:	0800ac06 	.word	0x0800ac06
 8006ce4:	0800ac17 	.word	0x0800ac17

08006ce8 <__ssputs_r>:
 8006ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	461f      	mov	r7, r3
 8006cee:	688e      	ldr	r6, [r1, #8]
 8006cf0:	4682      	mov	sl, r0
 8006cf2:	42be      	cmp	r6, r7
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	4690      	mov	r8, r2
 8006cf8:	680b      	ldr	r3, [r1, #0]
 8006cfa:	d82c      	bhi.n	8006d56 <__ssputs_r+0x6e>
 8006cfc:	898a      	ldrh	r2, [r1, #12]
 8006cfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d02:	d026      	beq.n	8006d52 <__ssputs_r+0x6a>
 8006d04:	6965      	ldr	r5, [r4, #20]
 8006d06:	6909      	ldr	r1, [r1, #16]
 8006d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d0c:	eba3 0901 	sub.w	r9, r3, r1
 8006d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d14:	1c7b      	adds	r3, r7, #1
 8006d16:	444b      	add	r3, r9
 8006d18:	106d      	asrs	r5, r5, #1
 8006d1a:	429d      	cmp	r5, r3
 8006d1c:	bf38      	it	cc
 8006d1e:	461d      	movcc	r5, r3
 8006d20:	0553      	lsls	r3, r2, #21
 8006d22:	d527      	bpl.n	8006d74 <__ssputs_r+0x8c>
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7ff fbdb 	bl	80064e0 <_malloc_r>
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	b360      	cbz	r0, 8006d88 <__ssputs_r+0xa0>
 8006d2e:	464a      	mov	r2, r9
 8006d30:	6921      	ldr	r1, [r4, #16]
 8006d32:	f000 fa89 	bl	8007248 <memcpy>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	6126      	str	r6, [r4, #16]
 8006d44:	444e      	add	r6, r9
 8006d46:	6026      	str	r6, [r4, #0]
 8006d48:	463e      	mov	r6, r7
 8006d4a:	6165      	str	r5, [r4, #20]
 8006d4c:	eba5 0509 	sub.w	r5, r5, r9
 8006d50:	60a5      	str	r5, [r4, #8]
 8006d52:	42be      	cmp	r6, r7
 8006d54:	d900      	bls.n	8006d58 <__ssputs_r+0x70>
 8006d56:	463e      	mov	r6, r7
 8006d58:	4632      	mov	r2, r6
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	f000 fa26 	bl	80071ae <memmove>
 8006d62:	2000      	movs	r0, #0
 8006d64:	68a3      	ldr	r3, [r4, #8]
 8006d66:	1b9b      	subs	r3, r3, r6
 8006d68:	60a3      	str	r3, [r4, #8]
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	4433      	add	r3, r6
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	462a      	mov	r2, r5
 8006d76:	f000 fab9 	bl	80072ec <_realloc_r>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1e0      	bne.n	8006d42 <__ssputs_r+0x5a>
 8006d80:	4650      	mov	r0, sl
 8006d82:	6921      	ldr	r1, [r4, #16]
 8006d84:	f7ff fb3c 	bl	8006400 <_free_r>
 8006d88:	230c      	movs	r3, #12
 8006d8a:	f8ca 3000 	str.w	r3, [sl]
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f04f 30ff 	mov.w	r0, #4294967295
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	e7e9      	b.n	8006d70 <__ssputs_r+0x88>

08006d9c <_svfiprintf_r>:
 8006d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	4698      	mov	r8, r3
 8006da2:	898b      	ldrh	r3, [r1, #12]
 8006da4:	4607      	mov	r7, r0
 8006da6:	061b      	lsls	r3, r3, #24
 8006da8:	460d      	mov	r5, r1
 8006daa:	4614      	mov	r4, r2
 8006dac:	b09d      	sub	sp, #116	; 0x74
 8006dae:	d50e      	bpl.n	8006dce <_svfiprintf_r+0x32>
 8006db0:	690b      	ldr	r3, [r1, #16]
 8006db2:	b963      	cbnz	r3, 8006dce <_svfiprintf_r+0x32>
 8006db4:	2140      	movs	r1, #64	; 0x40
 8006db6:	f7ff fb93 	bl	80064e0 <_malloc_r>
 8006dba:	6028      	str	r0, [r5, #0]
 8006dbc:	6128      	str	r0, [r5, #16]
 8006dbe:	b920      	cbnz	r0, 8006dca <_svfiprintf_r+0x2e>
 8006dc0:	230c      	movs	r3, #12
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	e0d0      	b.n	8006f6c <_svfiprintf_r+0x1d0>
 8006dca:	2340      	movs	r3, #64	; 0x40
 8006dcc:	616b      	str	r3, [r5, #20]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd2:	2320      	movs	r3, #32
 8006dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dd8:	2330      	movs	r3, #48	; 0x30
 8006dda:	f04f 0901 	mov.w	r9, #1
 8006dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006f84 <_svfiprintf_r+0x1e8>
 8006de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dea:	4623      	mov	r3, r4
 8006dec:	469a      	mov	sl, r3
 8006dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df2:	b10a      	cbz	r2, 8006df8 <_svfiprintf_r+0x5c>
 8006df4:	2a25      	cmp	r2, #37	; 0x25
 8006df6:	d1f9      	bne.n	8006dec <_svfiprintf_r+0x50>
 8006df8:	ebba 0b04 	subs.w	fp, sl, r4
 8006dfc:	d00b      	beq.n	8006e16 <_svfiprintf_r+0x7a>
 8006dfe:	465b      	mov	r3, fp
 8006e00:	4622      	mov	r2, r4
 8006e02:	4629      	mov	r1, r5
 8006e04:	4638      	mov	r0, r7
 8006e06:	f7ff ff6f 	bl	8006ce8 <__ssputs_r>
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	f000 80a9 	beq.w	8006f62 <_svfiprintf_r+0x1c6>
 8006e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e12:	445a      	add	r2, fp
 8006e14:	9209      	str	r2, [sp, #36]	; 0x24
 8006e16:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80a1 	beq.w	8006f62 <_svfiprintf_r+0x1c6>
 8006e20:	2300      	movs	r3, #0
 8006e22:	f04f 32ff 	mov.w	r2, #4294967295
 8006e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e2a:	f10a 0a01 	add.w	sl, sl, #1
 8006e2e:	9304      	str	r3, [sp, #16]
 8006e30:	9307      	str	r3, [sp, #28]
 8006e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e36:	931a      	str	r3, [sp, #104]	; 0x68
 8006e38:	4654      	mov	r4, sl
 8006e3a:	2205      	movs	r2, #5
 8006e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e40:	4850      	ldr	r0, [pc, #320]	; (8006f84 <_svfiprintf_r+0x1e8>)
 8006e42:	f7fe fc62 	bl	800570a <memchr>
 8006e46:	9a04      	ldr	r2, [sp, #16]
 8006e48:	b9d8      	cbnz	r0, 8006e82 <_svfiprintf_r+0xe6>
 8006e4a:	06d0      	lsls	r0, r2, #27
 8006e4c:	bf44      	itt	mi
 8006e4e:	2320      	movmi	r3, #32
 8006e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e54:	0711      	lsls	r1, r2, #28
 8006e56:	bf44      	itt	mi
 8006e58:	232b      	movmi	r3, #43	; 0x2b
 8006e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e62:	2b2a      	cmp	r3, #42	; 0x2a
 8006e64:	d015      	beq.n	8006e92 <_svfiprintf_r+0xf6>
 8006e66:	4654      	mov	r4, sl
 8006e68:	2000      	movs	r0, #0
 8006e6a:	f04f 0c0a 	mov.w	ip, #10
 8006e6e:	9a07      	ldr	r2, [sp, #28]
 8006e70:	4621      	mov	r1, r4
 8006e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e76:	3b30      	subs	r3, #48	; 0x30
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d94d      	bls.n	8006f18 <_svfiprintf_r+0x17c>
 8006e7c:	b1b0      	cbz	r0, 8006eac <_svfiprintf_r+0x110>
 8006e7e:	9207      	str	r2, [sp, #28]
 8006e80:	e014      	b.n	8006eac <_svfiprintf_r+0x110>
 8006e82:	eba0 0308 	sub.w	r3, r0, r8
 8006e86:	fa09 f303 	lsl.w	r3, r9, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	46a2      	mov	sl, r4
 8006e8e:	9304      	str	r3, [sp, #16]
 8006e90:	e7d2      	b.n	8006e38 <_svfiprintf_r+0x9c>
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	1d19      	adds	r1, r3, #4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	9103      	str	r1, [sp, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bfbb      	ittet	lt
 8006e9e:	425b      	neglt	r3, r3
 8006ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ea4:	9307      	strge	r3, [sp, #28]
 8006ea6:	9307      	strlt	r3, [sp, #28]
 8006ea8:	bfb8      	it	lt
 8006eaa:	9204      	strlt	r2, [sp, #16]
 8006eac:	7823      	ldrb	r3, [r4, #0]
 8006eae:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb0:	d10c      	bne.n	8006ecc <_svfiprintf_r+0x130>
 8006eb2:	7863      	ldrb	r3, [r4, #1]
 8006eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb6:	d134      	bne.n	8006f22 <_svfiprintf_r+0x186>
 8006eb8:	9b03      	ldr	r3, [sp, #12]
 8006eba:	3402      	adds	r4, #2
 8006ebc:	1d1a      	adds	r2, r3, #4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	9203      	str	r2, [sp, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bfb8      	it	lt
 8006ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006f88 <_svfiprintf_r+0x1ec>
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	7821      	ldrb	r1, [r4, #0]
 8006ed6:	f7fe fc18 	bl	800570a <memchr>
 8006eda:	b138      	cbz	r0, 8006eec <_svfiprintf_r+0x150>
 8006edc:	2240      	movs	r2, #64	; 0x40
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	eba0 000a 	sub.w	r0, r0, sl
 8006ee4:	4082      	lsls	r2, r0
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	3401      	adds	r4, #1
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef0:	2206      	movs	r2, #6
 8006ef2:	4826      	ldr	r0, [pc, #152]	; (8006f8c <_svfiprintf_r+0x1f0>)
 8006ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ef8:	f7fe fc07 	bl	800570a <memchr>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d038      	beq.n	8006f72 <_svfiprintf_r+0x1d6>
 8006f00:	4b23      	ldr	r3, [pc, #140]	; (8006f90 <_svfiprintf_r+0x1f4>)
 8006f02:	bb1b      	cbnz	r3, 8006f4c <_svfiprintf_r+0x1b0>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	3307      	adds	r3, #7
 8006f08:	f023 0307 	bic.w	r3, r3, #7
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	9303      	str	r3, [sp, #12]
 8006f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f12:	4433      	add	r3, r6
 8006f14:	9309      	str	r3, [sp, #36]	; 0x24
 8006f16:	e768      	b.n	8006dea <_svfiprintf_r+0x4e>
 8006f18:	460c      	mov	r4, r1
 8006f1a:	2001      	movs	r0, #1
 8006f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f20:	e7a6      	b.n	8006e70 <_svfiprintf_r+0xd4>
 8006f22:	2300      	movs	r3, #0
 8006f24:	f04f 0c0a 	mov.w	ip, #10
 8006f28:	4619      	mov	r1, r3
 8006f2a:	3401      	adds	r4, #1
 8006f2c:	9305      	str	r3, [sp, #20]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f34:	3a30      	subs	r2, #48	; 0x30
 8006f36:	2a09      	cmp	r2, #9
 8006f38:	d903      	bls.n	8006f42 <_svfiprintf_r+0x1a6>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0c6      	beq.n	8006ecc <_svfiprintf_r+0x130>
 8006f3e:	9105      	str	r1, [sp, #20]
 8006f40:	e7c4      	b.n	8006ecc <_svfiprintf_r+0x130>
 8006f42:	4604      	mov	r4, r0
 8006f44:	2301      	movs	r3, #1
 8006f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f4a:	e7f0      	b.n	8006f2e <_svfiprintf_r+0x192>
 8006f4c:	ab03      	add	r3, sp, #12
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	462a      	mov	r2, r5
 8006f52:	4638      	mov	r0, r7
 8006f54:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <_svfiprintf_r+0x1f8>)
 8006f56:	a904      	add	r1, sp, #16
 8006f58:	f7fd fd80 	bl	8004a5c <_printf_float>
 8006f5c:	1c42      	adds	r2, r0, #1
 8006f5e:	4606      	mov	r6, r0
 8006f60:	d1d6      	bne.n	8006f10 <_svfiprintf_r+0x174>
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	065b      	lsls	r3, r3, #25
 8006f66:	f53f af2d 	bmi.w	8006dc4 <_svfiprintf_r+0x28>
 8006f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f6c:	b01d      	add	sp, #116	; 0x74
 8006f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f72:	ab03      	add	r3, sp, #12
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	462a      	mov	r2, r5
 8006f78:	4638      	mov	r0, r7
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <_svfiprintf_r+0x1f8>)
 8006f7c:	a904      	add	r1, sp, #16
 8006f7e:	f7fe f80d 	bl	8004f9c <_printf_i>
 8006f82:	e7eb      	b.n	8006f5c <_svfiprintf_r+0x1c0>
 8006f84:	0800ad6c 	.word	0x0800ad6c
 8006f88:	0800ad72 	.word	0x0800ad72
 8006f8c:	0800ad76 	.word	0x0800ad76
 8006f90:	08004a5d 	.word	0x08004a5d
 8006f94:	08006ce9 	.word	0x08006ce9

08006f98 <__sflush_r>:
 8006f98:	898a      	ldrh	r2, [r1, #12]
 8006f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	0710      	lsls	r0, r2, #28
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	d457      	bmi.n	8007054 <__sflush_r+0xbc>
 8006fa4:	684b      	ldr	r3, [r1, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dc04      	bgt.n	8006fb4 <__sflush_r+0x1c>
 8006faa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dc01      	bgt.n	8006fb4 <__sflush_r+0x1c>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	d0fa      	beq.n	8006fb0 <__sflush_r+0x18>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fc0:	682f      	ldr	r7, [r5, #0]
 8006fc2:	6a21      	ldr	r1, [r4, #32]
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	d032      	beq.n	800702e <__sflush_r+0x96>
 8006fc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	075a      	lsls	r2, r3, #29
 8006fce:	d505      	bpl.n	8006fdc <__sflush_r+0x44>
 8006fd0:	6863      	ldr	r3, [r4, #4]
 8006fd2:	1ac0      	subs	r0, r0, r3
 8006fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fd6:	b10b      	cbz	r3, 8006fdc <__sflush_r+0x44>
 8006fd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fda:	1ac0      	subs	r0, r0, r3
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	6a21      	ldr	r1, [r4, #32]
 8006fe6:	47b0      	blx	r6
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	d106      	bne.n	8006ffc <__sflush_r+0x64>
 8006fee:	6829      	ldr	r1, [r5, #0]
 8006ff0:	291d      	cmp	r1, #29
 8006ff2:	d82b      	bhi.n	800704c <__sflush_r+0xb4>
 8006ff4:	4a28      	ldr	r2, [pc, #160]	; (8007098 <__sflush_r+0x100>)
 8006ff6:	410a      	asrs	r2, r1
 8006ff8:	07d6      	lsls	r6, r2, #31
 8006ffa:	d427      	bmi.n	800704c <__sflush_r+0xb4>
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	6062      	str	r2, [r4, #4]
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	04d9      	lsls	r1, r3, #19
 8007004:	6022      	str	r2, [r4, #0]
 8007006:	d504      	bpl.n	8007012 <__sflush_r+0x7a>
 8007008:	1c42      	adds	r2, r0, #1
 800700a:	d101      	bne.n	8007010 <__sflush_r+0x78>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b903      	cbnz	r3, 8007012 <__sflush_r+0x7a>
 8007010:	6560      	str	r0, [r4, #84]	; 0x54
 8007012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007014:	602f      	str	r7, [r5, #0]
 8007016:	2900      	cmp	r1, #0
 8007018:	d0ca      	beq.n	8006fb0 <__sflush_r+0x18>
 800701a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800701e:	4299      	cmp	r1, r3
 8007020:	d002      	beq.n	8007028 <__sflush_r+0x90>
 8007022:	4628      	mov	r0, r5
 8007024:	f7ff f9ec 	bl	8006400 <_free_r>
 8007028:	2000      	movs	r0, #0
 800702a:	6360      	str	r0, [r4, #52]	; 0x34
 800702c:	e7c1      	b.n	8006fb2 <__sflush_r+0x1a>
 800702e:	2301      	movs	r3, #1
 8007030:	4628      	mov	r0, r5
 8007032:	47b0      	blx	r6
 8007034:	1c41      	adds	r1, r0, #1
 8007036:	d1c8      	bne.n	8006fca <__sflush_r+0x32>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0c5      	beq.n	8006fca <__sflush_r+0x32>
 800703e:	2b1d      	cmp	r3, #29
 8007040:	d001      	beq.n	8007046 <__sflush_r+0xae>
 8007042:	2b16      	cmp	r3, #22
 8007044:	d101      	bne.n	800704a <__sflush_r+0xb2>
 8007046:	602f      	str	r7, [r5, #0]
 8007048:	e7b2      	b.n	8006fb0 <__sflush_r+0x18>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007050:	81a3      	strh	r3, [r4, #12]
 8007052:	e7ae      	b.n	8006fb2 <__sflush_r+0x1a>
 8007054:	690f      	ldr	r7, [r1, #16]
 8007056:	2f00      	cmp	r7, #0
 8007058:	d0aa      	beq.n	8006fb0 <__sflush_r+0x18>
 800705a:	0793      	lsls	r3, r2, #30
 800705c:	bf18      	it	ne
 800705e:	2300      	movne	r3, #0
 8007060:	680e      	ldr	r6, [r1, #0]
 8007062:	bf08      	it	eq
 8007064:	694b      	ldreq	r3, [r1, #20]
 8007066:	1bf6      	subs	r6, r6, r7
 8007068:	600f      	str	r7, [r1, #0]
 800706a:	608b      	str	r3, [r1, #8]
 800706c:	2e00      	cmp	r6, #0
 800706e:	dd9f      	ble.n	8006fb0 <__sflush_r+0x18>
 8007070:	4633      	mov	r3, r6
 8007072:	463a      	mov	r2, r7
 8007074:	4628      	mov	r0, r5
 8007076:	6a21      	ldr	r1, [r4, #32]
 8007078:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800707c:	47e0      	blx	ip
 800707e:	2800      	cmp	r0, #0
 8007080:	dc06      	bgt.n	8007090 <__sflush_r+0xf8>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	e790      	b.n	8006fb2 <__sflush_r+0x1a>
 8007090:	4407      	add	r7, r0
 8007092:	1a36      	subs	r6, r6, r0
 8007094:	e7ea      	b.n	800706c <__sflush_r+0xd4>
 8007096:	bf00      	nop
 8007098:	dfbffffe 	.word	0xdfbffffe

0800709c <_fflush_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	690b      	ldr	r3, [r1, #16]
 80070a0:	4605      	mov	r5, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	b913      	cbnz	r3, 80070ac <_fflush_r+0x10>
 80070a6:	2500      	movs	r5, #0
 80070a8:	4628      	mov	r0, r5
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	b118      	cbz	r0, 80070b6 <_fflush_r+0x1a>
 80070ae:	6a03      	ldr	r3, [r0, #32]
 80070b0:	b90b      	cbnz	r3, 80070b6 <_fflush_r+0x1a>
 80070b2:	f7fe f921 	bl	80052f8 <__sinit>
 80070b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f3      	beq.n	80070a6 <_fflush_r+0xa>
 80070be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070c0:	07d0      	lsls	r0, r2, #31
 80070c2:	d404      	bmi.n	80070ce <_fflush_r+0x32>
 80070c4:	0599      	lsls	r1, r3, #22
 80070c6:	d402      	bmi.n	80070ce <_fflush_r+0x32>
 80070c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ca:	f7fe fb1c 	bl	8005706 <__retarget_lock_acquire_recursive>
 80070ce:	4628      	mov	r0, r5
 80070d0:	4621      	mov	r1, r4
 80070d2:	f7ff ff61 	bl	8006f98 <__sflush_r>
 80070d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070d8:	4605      	mov	r5, r0
 80070da:	07da      	lsls	r2, r3, #31
 80070dc:	d4e4      	bmi.n	80070a8 <_fflush_r+0xc>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	059b      	lsls	r3, r3, #22
 80070e2:	d4e1      	bmi.n	80070a8 <_fflush_r+0xc>
 80070e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070e6:	f7fe fb0f 	bl	8005708 <__retarget_lock_release_recursive>
 80070ea:	e7dd      	b.n	80070a8 <_fflush_r+0xc>

080070ec <__swhatbuf_r>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	460c      	mov	r4, r1
 80070f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f4:	4615      	mov	r5, r2
 80070f6:	2900      	cmp	r1, #0
 80070f8:	461e      	mov	r6, r3
 80070fa:	b096      	sub	sp, #88	; 0x58
 80070fc:	da0c      	bge.n	8007118 <__swhatbuf_r+0x2c>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	2100      	movs	r1, #0
 8007102:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007106:	bf0c      	ite	eq
 8007108:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800710c:	2340      	movne	r3, #64	; 0x40
 800710e:	2000      	movs	r0, #0
 8007110:	6031      	str	r1, [r6, #0]
 8007112:	602b      	str	r3, [r5, #0]
 8007114:	b016      	add	sp, #88	; 0x58
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	466a      	mov	r2, sp
 800711a:	f000 f863 	bl	80071e4 <_fstat_r>
 800711e:	2800      	cmp	r0, #0
 8007120:	dbed      	blt.n	80070fe <__swhatbuf_r+0x12>
 8007122:	9901      	ldr	r1, [sp, #4]
 8007124:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007128:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800712c:	4259      	negs	r1, r3
 800712e:	4159      	adcs	r1, r3
 8007130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007134:	e7eb      	b.n	800710e <__swhatbuf_r+0x22>

08007136 <__smakebuf_r>:
 8007136:	898b      	ldrh	r3, [r1, #12]
 8007138:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800713a:	079d      	lsls	r5, r3, #30
 800713c:	4606      	mov	r6, r0
 800713e:	460c      	mov	r4, r1
 8007140:	d507      	bpl.n	8007152 <__smakebuf_r+0x1c>
 8007142:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	6123      	str	r3, [r4, #16]
 800714a:	2301      	movs	r3, #1
 800714c:	6163      	str	r3, [r4, #20]
 800714e:	b002      	add	sp, #8
 8007150:	bd70      	pop	{r4, r5, r6, pc}
 8007152:	466a      	mov	r2, sp
 8007154:	ab01      	add	r3, sp, #4
 8007156:	f7ff ffc9 	bl	80070ec <__swhatbuf_r>
 800715a:	9900      	ldr	r1, [sp, #0]
 800715c:	4605      	mov	r5, r0
 800715e:	4630      	mov	r0, r6
 8007160:	f7ff f9be 	bl	80064e0 <_malloc_r>
 8007164:	b948      	cbnz	r0, 800717a <__smakebuf_r+0x44>
 8007166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716a:	059a      	lsls	r2, r3, #22
 800716c:	d4ef      	bmi.n	800714e <__smakebuf_r+0x18>
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	f043 0302 	orr.w	r3, r3, #2
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	e7e3      	b.n	8007142 <__smakebuf_r+0xc>
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	6020      	str	r0, [r4, #0]
 800717e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	6120      	str	r0, [r4, #16]
 8007188:	6163      	str	r3, [r4, #20]
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	b15b      	cbz	r3, 80071a6 <__smakebuf_r+0x70>
 800718e:	4630      	mov	r0, r6
 8007190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007194:	f000 f838 	bl	8007208 <_isatty_r>
 8007198:	b128      	cbz	r0, 80071a6 <__smakebuf_r+0x70>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	f023 0303 	bic.w	r3, r3, #3
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	431d      	orrs	r5, r3
 80071aa:	81a5      	strh	r5, [r4, #12]
 80071ac:	e7cf      	b.n	800714e <__smakebuf_r+0x18>

080071ae <memmove>:
 80071ae:	4288      	cmp	r0, r1
 80071b0:	b510      	push	{r4, lr}
 80071b2:	eb01 0402 	add.w	r4, r1, r2
 80071b6:	d902      	bls.n	80071be <memmove+0x10>
 80071b8:	4284      	cmp	r4, r0
 80071ba:	4623      	mov	r3, r4
 80071bc:	d807      	bhi.n	80071ce <memmove+0x20>
 80071be:	1e43      	subs	r3, r0, #1
 80071c0:	42a1      	cmp	r1, r4
 80071c2:	d008      	beq.n	80071d6 <memmove+0x28>
 80071c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071cc:	e7f8      	b.n	80071c0 <memmove+0x12>
 80071ce:	4601      	mov	r1, r0
 80071d0:	4402      	add	r2, r0
 80071d2:	428a      	cmp	r2, r1
 80071d4:	d100      	bne.n	80071d8 <memmove+0x2a>
 80071d6:	bd10      	pop	{r4, pc}
 80071d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071e0:	e7f7      	b.n	80071d2 <memmove+0x24>
	...

080071e4 <_fstat_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	2300      	movs	r3, #0
 80071e8:	4d06      	ldr	r5, [pc, #24]	; (8007204 <_fstat_r+0x20>)
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f7fa f874 	bl	80012de <_fstat>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d102      	bne.n	8007200 <_fstat_r+0x1c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	b103      	cbz	r3, 8007200 <_fstat_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	20000434 	.word	0x20000434

08007208 <_isatty_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	2300      	movs	r3, #0
 800720c:	4d05      	ldr	r5, [pc, #20]	; (8007224 <_isatty_r+0x1c>)
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7fa f872 	bl	80012fc <_isatty>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_isatty_r+0x1a>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_isatty_r+0x1a>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20000434 	.word	0x20000434

08007228 <_sbrk_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	2300      	movs	r3, #0
 800722c:	4d05      	ldr	r5, [pc, #20]	; (8007244 <_sbrk_r+0x1c>)
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7fa f878 	bl	8001328 <_sbrk>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_sbrk_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_sbrk_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20000434 	.word	0x20000434

08007248 <memcpy>:
 8007248:	440a      	add	r2, r1
 800724a:	4291      	cmp	r1, r2
 800724c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007250:	d100      	bne.n	8007254 <memcpy+0xc>
 8007252:	4770      	bx	lr
 8007254:	b510      	push	{r4, lr}
 8007256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800725a:	4291      	cmp	r1, r2
 800725c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007260:	d1f9      	bne.n	8007256 <memcpy+0xe>
 8007262:	bd10      	pop	{r4, pc}

08007264 <__assert_func>:
 8007264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007266:	4614      	mov	r4, r2
 8007268:	461a      	mov	r2, r3
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <__assert_func+0x2c>)
 800726c:	4605      	mov	r5, r0
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68d8      	ldr	r0, [r3, #12]
 8007272:	b14c      	cbz	r4, 8007288 <__assert_func+0x24>
 8007274:	4b07      	ldr	r3, [pc, #28]	; (8007294 <__assert_func+0x30>)
 8007276:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800727a:	9100      	str	r1, [sp, #0]
 800727c:	462b      	mov	r3, r5
 800727e:	4906      	ldr	r1, [pc, #24]	; (8007298 <__assert_func+0x34>)
 8007280:	f000 f870 	bl	8007364 <fiprintf>
 8007284:	f000 f880 	bl	8007388 <abort>
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <__assert_func+0x38>)
 800728a:	461c      	mov	r4, r3
 800728c:	e7f3      	b.n	8007276 <__assert_func+0x12>
 800728e:	bf00      	nop
 8007290:	20000064 	.word	0x20000064
 8007294:	0800ad87 	.word	0x0800ad87
 8007298:	0800ad94 	.word	0x0800ad94
 800729c:	0800adc2 	.word	0x0800adc2

080072a0 <_calloc_r>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	fba1 5402 	umull	r5, r4, r1, r2
 80072a6:	b934      	cbnz	r4, 80072b6 <_calloc_r+0x16>
 80072a8:	4629      	mov	r1, r5
 80072aa:	f7ff f919 	bl	80064e0 <_malloc_r>
 80072ae:	4606      	mov	r6, r0
 80072b0:	b928      	cbnz	r0, 80072be <_calloc_r+0x1e>
 80072b2:	4630      	mov	r0, r6
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
 80072b6:	220c      	movs	r2, #12
 80072b8:	2600      	movs	r6, #0
 80072ba:	6002      	str	r2, [r0, #0]
 80072bc:	e7f9      	b.n	80072b2 <_calloc_r+0x12>
 80072be:	462a      	mov	r2, r5
 80072c0:	4621      	mov	r1, r4
 80072c2:	f7fe f9a3 	bl	800560c <memset>
 80072c6:	e7f4      	b.n	80072b2 <_calloc_r+0x12>

080072c8 <__ascii_mbtowc>:
 80072c8:	b082      	sub	sp, #8
 80072ca:	b901      	cbnz	r1, 80072ce <__ascii_mbtowc+0x6>
 80072cc:	a901      	add	r1, sp, #4
 80072ce:	b142      	cbz	r2, 80072e2 <__ascii_mbtowc+0x1a>
 80072d0:	b14b      	cbz	r3, 80072e6 <__ascii_mbtowc+0x1e>
 80072d2:	7813      	ldrb	r3, [r2, #0]
 80072d4:	600b      	str	r3, [r1, #0]
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	1e10      	subs	r0, r2, #0
 80072da:	bf18      	it	ne
 80072dc:	2001      	movne	r0, #1
 80072de:	b002      	add	sp, #8
 80072e0:	4770      	bx	lr
 80072e2:	4610      	mov	r0, r2
 80072e4:	e7fb      	b.n	80072de <__ascii_mbtowc+0x16>
 80072e6:	f06f 0001 	mvn.w	r0, #1
 80072ea:	e7f8      	b.n	80072de <__ascii_mbtowc+0x16>

080072ec <_realloc_r>:
 80072ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f0:	4680      	mov	r8, r0
 80072f2:	4614      	mov	r4, r2
 80072f4:	460e      	mov	r6, r1
 80072f6:	b921      	cbnz	r1, 8007302 <_realloc_r+0x16>
 80072f8:	4611      	mov	r1, r2
 80072fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072fe:	f7ff b8ef 	b.w	80064e0 <_malloc_r>
 8007302:	b92a      	cbnz	r2, 8007310 <_realloc_r+0x24>
 8007304:	f7ff f87c 	bl	8006400 <_free_r>
 8007308:	4625      	mov	r5, r4
 800730a:	4628      	mov	r0, r5
 800730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007310:	f000 f841 	bl	8007396 <_malloc_usable_size_r>
 8007314:	4284      	cmp	r4, r0
 8007316:	4607      	mov	r7, r0
 8007318:	d802      	bhi.n	8007320 <_realloc_r+0x34>
 800731a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800731e:	d812      	bhi.n	8007346 <_realloc_r+0x5a>
 8007320:	4621      	mov	r1, r4
 8007322:	4640      	mov	r0, r8
 8007324:	f7ff f8dc 	bl	80064e0 <_malloc_r>
 8007328:	4605      	mov	r5, r0
 800732a:	2800      	cmp	r0, #0
 800732c:	d0ed      	beq.n	800730a <_realloc_r+0x1e>
 800732e:	42bc      	cmp	r4, r7
 8007330:	4622      	mov	r2, r4
 8007332:	4631      	mov	r1, r6
 8007334:	bf28      	it	cs
 8007336:	463a      	movcs	r2, r7
 8007338:	f7ff ff86 	bl	8007248 <memcpy>
 800733c:	4631      	mov	r1, r6
 800733e:	4640      	mov	r0, r8
 8007340:	f7ff f85e 	bl	8006400 <_free_r>
 8007344:	e7e1      	b.n	800730a <_realloc_r+0x1e>
 8007346:	4635      	mov	r5, r6
 8007348:	e7df      	b.n	800730a <_realloc_r+0x1e>

0800734a <__ascii_wctomb>:
 800734a:	4603      	mov	r3, r0
 800734c:	4608      	mov	r0, r1
 800734e:	b141      	cbz	r1, 8007362 <__ascii_wctomb+0x18>
 8007350:	2aff      	cmp	r2, #255	; 0xff
 8007352:	d904      	bls.n	800735e <__ascii_wctomb+0x14>
 8007354:	228a      	movs	r2, #138	; 0x8a
 8007356:	f04f 30ff 	mov.w	r0, #4294967295
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	4770      	bx	lr
 800735e:	2001      	movs	r0, #1
 8007360:	700a      	strb	r2, [r1, #0]
 8007362:	4770      	bx	lr

08007364 <fiprintf>:
 8007364:	b40e      	push	{r1, r2, r3}
 8007366:	b503      	push	{r0, r1, lr}
 8007368:	4601      	mov	r1, r0
 800736a:	ab03      	add	r3, sp, #12
 800736c:	4805      	ldr	r0, [pc, #20]	; (8007384 <fiprintf+0x20>)
 800736e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	f000 f83d 	bl	80073f4 <_vfiprintf_r>
 800737a:	b002      	add	sp, #8
 800737c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007380:	b003      	add	sp, #12
 8007382:	4770      	bx	lr
 8007384:	20000064 	.word	0x20000064

08007388 <abort>:
 8007388:	2006      	movs	r0, #6
 800738a:	b508      	push	{r3, lr}
 800738c:	f000 f974 	bl	8007678 <raise>
 8007390:	2001      	movs	r0, #1
 8007392:	f7f9 ff56 	bl	8001242 <_exit>

08007396 <_malloc_usable_size_r>:
 8007396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739a:	1f18      	subs	r0, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfbc      	itt	lt
 80073a0:	580b      	ldrlt	r3, [r1, r0]
 80073a2:	18c0      	addlt	r0, r0, r3
 80073a4:	4770      	bx	lr

080073a6 <__sfputc_r>:
 80073a6:	6893      	ldr	r3, [r2, #8]
 80073a8:	b410      	push	{r4}
 80073aa:	3b01      	subs	r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	6093      	str	r3, [r2, #8]
 80073b0:	da07      	bge.n	80073c2 <__sfputc_r+0x1c>
 80073b2:	6994      	ldr	r4, [r2, #24]
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	db01      	blt.n	80073bc <__sfputc_r+0x16>
 80073b8:	290a      	cmp	r1, #10
 80073ba:	d102      	bne.n	80073c2 <__sfputc_r+0x1c>
 80073bc:	bc10      	pop	{r4}
 80073be:	f7fe b890 	b.w	80054e2 <__swbuf_r>
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	1c58      	adds	r0, r3, #1
 80073c6:	6010      	str	r0, [r2, #0]
 80073c8:	7019      	strb	r1, [r3, #0]
 80073ca:	4608      	mov	r0, r1
 80073cc:	bc10      	pop	{r4}
 80073ce:	4770      	bx	lr

080073d0 <__sfputs_r>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	4606      	mov	r6, r0
 80073d4:	460f      	mov	r7, r1
 80073d6:	4614      	mov	r4, r2
 80073d8:	18d5      	adds	r5, r2, r3
 80073da:	42ac      	cmp	r4, r5
 80073dc:	d101      	bne.n	80073e2 <__sfputs_r+0x12>
 80073de:	2000      	movs	r0, #0
 80073e0:	e007      	b.n	80073f2 <__sfputs_r+0x22>
 80073e2:	463a      	mov	r2, r7
 80073e4:	4630      	mov	r0, r6
 80073e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ea:	f7ff ffdc 	bl	80073a6 <__sfputc_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	d1f3      	bne.n	80073da <__sfputs_r+0xa>
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073f4 <_vfiprintf_r>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	460d      	mov	r5, r1
 80073fa:	4614      	mov	r4, r2
 80073fc:	4698      	mov	r8, r3
 80073fe:	4606      	mov	r6, r0
 8007400:	b09d      	sub	sp, #116	; 0x74
 8007402:	b118      	cbz	r0, 800740c <_vfiprintf_r+0x18>
 8007404:	6a03      	ldr	r3, [r0, #32]
 8007406:	b90b      	cbnz	r3, 800740c <_vfiprintf_r+0x18>
 8007408:	f7fd ff76 	bl	80052f8 <__sinit>
 800740c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800740e:	07d9      	lsls	r1, r3, #31
 8007410:	d405      	bmi.n	800741e <_vfiprintf_r+0x2a>
 8007412:	89ab      	ldrh	r3, [r5, #12]
 8007414:	059a      	lsls	r2, r3, #22
 8007416:	d402      	bmi.n	800741e <_vfiprintf_r+0x2a>
 8007418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800741a:	f7fe f974 	bl	8005706 <__retarget_lock_acquire_recursive>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	071b      	lsls	r3, r3, #28
 8007422:	d501      	bpl.n	8007428 <_vfiprintf_r+0x34>
 8007424:	692b      	ldr	r3, [r5, #16]
 8007426:	b99b      	cbnz	r3, 8007450 <_vfiprintf_r+0x5c>
 8007428:	4629      	mov	r1, r5
 800742a:	4630      	mov	r0, r6
 800742c:	f7fe f896 	bl	800555c <__swsetup_r>
 8007430:	b170      	cbz	r0, 8007450 <_vfiprintf_r+0x5c>
 8007432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007434:	07dc      	lsls	r4, r3, #31
 8007436:	d504      	bpl.n	8007442 <_vfiprintf_r+0x4e>
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	b01d      	add	sp, #116	; 0x74
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	0598      	lsls	r0, r3, #22
 8007446:	d4f7      	bmi.n	8007438 <_vfiprintf_r+0x44>
 8007448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800744a:	f7fe f95d 	bl	8005708 <__retarget_lock_release_recursive>
 800744e:	e7f3      	b.n	8007438 <_vfiprintf_r+0x44>
 8007450:	2300      	movs	r3, #0
 8007452:	9309      	str	r3, [sp, #36]	; 0x24
 8007454:	2320      	movs	r3, #32
 8007456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800745a:	2330      	movs	r3, #48	; 0x30
 800745c:	f04f 0901 	mov.w	r9, #1
 8007460:	f8cd 800c 	str.w	r8, [sp, #12]
 8007464:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007614 <_vfiprintf_r+0x220>
 8007468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800746c:	4623      	mov	r3, r4
 800746e:	469a      	mov	sl, r3
 8007470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007474:	b10a      	cbz	r2, 800747a <_vfiprintf_r+0x86>
 8007476:	2a25      	cmp	r2, #37	; 0x25
 8007478:	d1f9      	bne.n	800746e <_vfiprintf_r+0x7a>
 800747a:	ebba 0b04 	subs.w	fp, sl, r4
 800747e:	d00b      	beq.n	8007498 <_vfiprintf_r+0xa4>
 8007480:	465b      	mov	r3, fp
 8007482:	4622      	mov	r2, r4
 8007484:	4629      	mov	r1, r5
 8007486:	4630      	mov	r0, r6
 8007488:	f7ff ffa2 	bl	80073d0 <__sfputs_r>
 800748c:	3001      	adds	r0, #1
 800748e:	f000 80a9 	beq.w	80075e4 <_vfiprintf_r+0x1f0>
 8007492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007494:	445a      	add	r2, fp
 8007496:	9209      	str	r2, [sp, #36]	; 0x24
 8007498:	f89a 3000 	ldrb.w	r3, [sl]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80a1 	beq.w	80075e4 <_vfiprintf_r+0x1f0>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f04f 32ff 	mov.w	r2, #4294967295
 80074a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ac:	f10a 0a01 	add.w	sl, sl, #1
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	9307      	str	r3, [sp, #28]
 80074b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074b8:	931a      	str	r3, [sp, #104]	; 0x68
 80074ba:	4654      	mov	r4, sl
 80074bc:	2205      	movs	r2, #5
 80074be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c2:	4854      	ldr	r0, [pc, #336]	; (8007614 <_vfiprintf_r+0x220>)
 80074c4:	f7fe f921 	bl	800570a <memchr>
 80074c8:	9a04      	ldr	r2, [sp, #16]
 80074ca:	b9d8      	cbnz	r0, 8007504 <_vfiprintf_r+0x110>
 80074cc:	06d1      	lsls	r1, r2, #27
 80074ce:	bf44      	itt	mi
 80074d0:	2320      	movmi	r3, #32
 80074d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074d6:	0713      	lsls	r3, r2, #28
 80074d8:	bf44      	itt	mi
 80074da:	232b      	movmi	r3, #43	; 0x2b
 80074dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074e0:	f89a 3000 	ldrb.w	r3, [sl]
 80074e4:	2b2a      	cmp	r3, #42	; 0x2a
 80074e6:	d015      	beq.n	8007514 <_vfiprintf_r+0x120>
 80074e8:	4654      	mov	r4, sl
 80074ea:	2000      	movs	r0, #0
 80074ec:	f04f 0c0a 	mov.w	ip, #10
 80074f0:	9a07      	ldr	r2, [sp, #28]
 80074f2:	4621      	mov	r1, r4
 80074f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f8:	3b30      	subs	r3, #48	; 0x30
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d94d      	bls.n	800759a <_vfiprintf_r+0x1a6>
 80074fe:	b1b0      	cbz	r0, 800752e <_vfiprintf_r+0x13a>
 8007500:	9207      	str	r2, [sp, #28]
 8007502:	e014      	b.n	800752e <_vfiprintf_r+0x13a>
 8007504:	eba0 0308 	sub.w	r3, r0, r8
 8007508:	fa09 f303 	lsl.w	r3, r9, r3
 800750c:	4313      	orrs	r3, r2
 800750e:	46a2      	mov	sl, r4
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	e7d2      	b.n	80074ba <_vfiprintf_r+0xc6>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	1d19      	adds	r1, r3, #4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	9103      	str	r1, [sp, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	bfbb      	ittet	lt
 8007520:	425b      	neglt	r3, r3
 8007522:	f042 0202 	orrlt.w	r2, r2, #2
 8007526:	9307      	strge	r3, [sp, #28]
 8007528:	9307      	strlt	r3, [sp, #28]
 800752a:	bfb8      	it	lt
 800752c:	9204      	strlt	r2, [sp, #16]
 800752e:	7823      	ldrb	r3, [r4, #0]
 8007530:	2b2e      	cmp	r3, #46	; 0x2e
 8007532:	d10c      	bne.n	800754e <_vfiprintf_r+0x15a>
 8007534:	7863      	ldrb	r3, [r4, #1]
 8007536:	2b2a      	cmp	r3, #42	; 0x2a
 8007538:	d134      	bne.n	80075a4 <_vfiprintf_r+0x1b0>
 800753a:	9b03      	ldr	r3, [sp, #12]
 800753c:	3402      	adds	r4, #2
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	bfb8      	it	lt
 8007548:	f04f 33ff 	movlt.w	r3, #4294967295
 800754c:	9305      	str	r3, [sp, #20]
 800754e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007618 <_vfiprintf_r+0x224>
 8007552:	2203      	movs	r2, #3
 8007554:	4650      	mov	r0, sl
 8007556:	7821      	ldrb	r1, [r4, #0]
 8007558:	f7fe f8d7 	bl	800570a <memchr>
 800755c:	b138      	cbz	r0, 800756e <_vfiprintf_r+0x17a>
 800755e:	2240      	movs	r2, #64	; 0x40
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	eba0 000a 	sub.w	r0, r0, sl
 8007566:	4082      	lsls	r2, r0
 8007568:	4313      	orrs	r3, r2
 800756a:	3401      	adds	r4, #1
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007572:	2206      	movs	r2, #6
 8007574:	4829      	ldr	r0, [pc, #164]	; (800761c <_vfiprintf_r+0x228>)
 8007576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800757a:	f7fe f8c6 	bl	800570a <memchr>
 800757e:	2800      	cmp	r0, #0
 8007580:	d03f      	beq.n	8007602 <_vfiprintf_r+0x20e>
 8007582:	4b27      	ldr	r3, [pc, #156]	; (8007620 <_vfiprintf_r+0x22c>)
 8007584:	bb1b      	cbnz	r3, 80075ce <_vfiprintf_r+0x1da>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	3307      	adds	r3, #7
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	3308      	adds	r3, #8
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007594:	443b      	add	r3, r7
 8007596:	9309      	str	r3, [sp, #36]	; 0x24
 8007598:	e768      	b.n	800746c <_vfiprintf_r+0x78>
 800759a:	460c      	mov	r4, r1
 800759c:	2001      	movs	r0, #1
 800759e:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a2:	e7a6      	b.n	80074f2 <_vfiprintf_r+0xfe>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f04f 0c0a 	mov.w	ip, #10
 80075aa:	4619      	mov	r1, r3
 80075ac:	3401      	adds	r4, #1
 80075ae:	9305      	str	r3, [sp, #20]
 80075b0:	4620      	mov	r0, r4
 80075b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b6:	3a30      	subs	r2, #48	; 0x30
 80075b8:	2a09      	cmp	r2, #9
 80075ba:	d903      	bls.n	80075c4 <_vfiprintf_r+0x1d0>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0c6      	beq.n	800754e <_vfiprintf_r+0x15a>
 80075c0:	9105      	str	r1, [sp, #20]
 80075c2:	e7c4      	b.n	800754e <_vfiprintf_r+0x15a>
 80075c4:	4604      	mov	r4, r0
 80075c6:	2301      	movs	r3, #1
 80075c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80075cc:	e7f0      	b.n	80075b0 <_vfiprintf_r+0x1bc>
 80075ce:	ab03      	add	r3, sp, #12
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	462a      	mov	r2, r5
 80075d4:	4630      	mov	r0, r6
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <_vfiprintf_r+0x230>)
 80075d8:	a904      	add	r1, sp, #16
 80075da:	f7fd fa3f 	bl	8004a5c <_printf_float>
 80075de:	4607      	mov	r7, r0
 80075e0:	1c78      	adds	r0, r7, #1
 80075e2:	d1d6      	bne.n	8007592 <_vfiprintf_r+0x19e>
 80075e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075e6:	07d9      	lsls	r1, r3, #31
 80075e8:	d405      	bmi.n	80075f6 <_vfiprintf_r+0x202>
 80075ea:	89ab      	ldrh	r3, [r5, #12]
 80075ec:	059a      	lsls	r2, r3, #22
 80075ee:	d402      	bmi.n	80075f6 <_vfiprintf_r+0x202>
 80075f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075f2:	f7fe f889 	bl	8005708 <__retarget_lock_release_recursive>
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	065b      	lsls	r3, r3, #25
 80075fa:	f53f af1d 	bmi.w	8007438 <_vfiprintf_r+0x44>
 80075fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007600:	e71c      	b.n	800743c <_vfiprintf_r+0x48>
 8007602:	ab03      	add	r3, sp, #12
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	462a      	mov	r2, r5
 8007608:	4630      	mov	r0, r6
 800760a:	4b06      	ldr	r3, [pc, #24]	; (8007624 <_vfiprintf_r+0x230>)
 800760c:	a904      	add	r1, sp, #16
 800760e:	f7fd fcc5 	bl	8004f9c <_printf_i>
 8007612:	e7e4      	b.n	80075de <_vfiprintf_r+0x1ea>
 8007614:	0800ad6c 	.word	0x0800ad6c
 8007618:	0800ad72 	.word	0x0800ad72
 800761c:	0800ad76 	.word	0x0800ad76
 8007620:	08004a5d 	.word	0x08004a5d
 8007624:	080073d1 	.word	0x080073d1

08007628 <_raise_r>:
 8007628:	291f      	cmp	r1, #31
 800762a:	b538      	push	{r3, r4, r5, lr}
 800762c:	4604      	mov	r4, r0
 800762e:	460d      	mov	r5, r1
 8007630:	d904      	bls.n	800763c <_raise_r+0x14>
 8007632:	2316      	movs	r3, #22
 8007634:	6003      	str	r3, [r0, #0]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800763e:	b112      	cbz	r2, 8007646 <_raise_r+0x1e>
 8007640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007644:	b94b      	cbnz	r3, 800765a <_raise_r+0x32>
 8007646:	4620      	mov	r0, r4
 8007648:	f000 f830 	bl	80076ac <_getpid_r>
 800764c:	462a      	mov	r2, r5
 800764e:	4601      	mov	r1, r0
 8007650:	4620      	mov	r0, r4
 8007652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007656:	f000 b817 	b.w	8007688 <_kill_r>
 800765a:	2b01      	cmp	r3, #1
 800765c:	d00a      	beq.n	8007674 <_raise_r+0x4c>
 800765e:	1c59      	adds	r1, r3, #1
 8007660:	d103      	bne.n	800766a <_raise_r+0x42>
 8007662:	2316      	movs	r3, #22
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	2001      	movs	r0, #1
 8007668:	e7e7      	b.n	800763a <_raise_r+0x12>
 800766a:	2400      	movs	r4, #0
 800766c:	4628      	mov	r0, r5
 800766e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007672:	4798      	blx	r3
 8007674:	2000      	movs	r0, #0
 8007676:	e7e0      	b.n	800763a <_raise_r+0x12>

08007678 <raise>:
 8007678:	4b02      	ldr	r3, [pc, #8]	; (8007684 <raise+0xc>)
 800767a:	4601      	mov	r1, r0
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	f7ff bfd3 	b.w	8007628 <_raise_r>
 8007682:	bf00      	nop
 8007684:	20000064 	.word	0x20000064

08007688 <_kill_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	2300      	movs	r3, #0
 800768c:	4d06      	ldr	r5, [pc, #24]	; (80076a8 <_kill_r+0x20>)
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	602b      	str	r3, [r5, #0]
 8007696:	f7f9 fdc4 	bl	8001222 <_kill>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	d102      	bne.n	80076a4 <_kill_r+0x1c>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	b103      	cbz	r3, 80076a4 <_kill_r+0x1c>
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	bf00      	nop
 80076a8:	20000434 	.word	0x20000434

080076ac <_getpid_r>:
 80076ac:	f7f9 bdb2 	b.w	8001214 <_getpid>

080076b0 <_init>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr

080076bc <_fini>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr
